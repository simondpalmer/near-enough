{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2","program":"C:\\Users\\Simon Palmer\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","wasmer_types","--edition=2018","C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"enable-serde\"","--cfg","feature=\"serde\"","--cfg","feature=\"std\"","-C","metadata=5dd944202f7bf565","-C","extra-filename=-5dd944202f7bf565","--out-dir","c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","--extern","cranelift_entity=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libcranelift_entity-36154bdfcf2b7d2a.rmeta","--extern","serde=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libserde-14e46a0cd71f0fa4.rmeta","--extern","thiserror=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libthiserror-128cb2c362e7472f.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Simon Palmer\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libwasmer_types-5dd944202f7bf565.rmeta"},"prelude":{"crate_id":{"name":"wasmer_types","disambiguator":[7257111478101033833,16823103751844189797]},"crate_root":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src","external_crates":[{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2134305066550747688,1377703208702874155]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","num":2,"id":{"name":"core","disambiguator":[1322159461575500717,8297198428669169011]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2376346800744392852,12342541482992122530]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14946502858004023242,6637215598610016319]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5305136910335682758,6890491777619641650]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8079093424489733033,9678018066858265018]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8191054904896780843,65190916132359678]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17454577518104061478,8473922882117178851]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14702801963282246562,3385633331338644346]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4483555191844012602,617965746000623535]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6496369475756502088,8603909216288097824]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[8790568169648576788,8899032378407077408]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","num":13,"id":{"name":"serde","disambiguator":[16587173933292170134,18132029071893659478]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","num":14,"id":{"name":"serde_derive","disambiguator":[9842309209684279102,18288336910812146633]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","num":15,"id":{"name":"thiserror","disambiguator":[2171609043141791448,674823242066731952]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","num":16,"id":{"name":"thiserror_impl","disambiguator":[533010867123694261,830862060686457272]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","num":17,"id":{"name":"cranelift_entity","disambiguator":[1589712533132540097,17211741203633751510]}}],"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":0,"byte_end":2779,"line_start":1,"line_end":90,"column_start":1,"column_end":53}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1827,"byte_end":1828,"line_start":65,"line_end":65,"column_start":31,"column_end":32},"alias_span":null,"name":"*","value":"entity_impl","parent":{"krate":0,"index":452}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1858,"byte_end":1866,"line_start":68,"line_end":68,"column_start":26,"column_end":34},"alias_span":null,"name":"Features","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1898,"byte_end":1916,"line_start":70,"line_end":70,"column_start":5,"column_end":23},"alias_span":null,"name":"CustomSectionIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1918,"byte_end":1927,"line_start":70,"line_end":70,"column_start":25,"column_end":34},"alias_span":null,"name":"DataIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1929,"byte_end":1938,"line_start":70,"line_end":70,"column_start":36,"column_end":45},"alias_span":null,"name":"ElemIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1310},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1940,"byte_end":1951,"line_start":70,"line_end":70,"column_start":47,"column_end":58},"alias_span":null,"name":"ExportIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":830},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1953,"byte_end":1966,"line_start":70,"line_end":70,"column_start":60,"column_end":73},"alias_span":null,"name":"FunctionIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1968,"byte_end":1979,"line_start":70,"line_end":70,"column_start":75,"column_end":86},"alias_span":null,"name":"GlobalIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1394},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1981,"byte_end":1992,"line_start":70,"line_end":70,"column_start":88,"column_end":99},"alias_span":null,"name":"ImportIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1998,"byte_end":2016,"line_start":71,"line_end":71,"column_start":5,"column_end":23},"alias_span":null,"name":"LocalFunctionIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2018,"byte_end":2034,"line_start":71,"line_end":71,"column_start":25,"column_end":41},"alias_span":null,"name":"LocalGlobalIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2036,"byte_end":2052,"line_start":71,"line_end":71,"column_start":43,"column_end":59},"alias_span":null,"name":"LocalMemoryIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2054,"byte_end":2069,"line_start":71,"line_end":71,"column_start":61,"column_end":76},"alias_span":null,"name":"LocalTableIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1010},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2071,"byte_end":2082,"line_start":71,"line_end":71,"column_start":78,"column_end":89},"alias_span":null,"name":"MemoryIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2088,"byte_end":2102,"line_start":72,"line_end":72,"column_start":5,"column_end":19},"alias_span":null,"name":"SignatureIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":890},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2104,"byte_end":2114,"line_start":72,"line_end":72,"column_start":21,"column_end":31},"alias_span":null,"name":"TableIndex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1602},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2154,"byte_end":2169,"line_start":75,"line_end":75,"column_start":5,"column_end":20},"alias_span":null,"name":"DataInitializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1543},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2171,"byte_end":2194,"line_start":75,"line_end":75,"column_start":22,"column_end":45},"alias_span":null,"name":"DataInitializerLocation","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1662},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2196,"byte_end":2216,"line_start":75,"line_end":75,"column_start":47,"column_end":67},"alias_span":null,"name":"OwnedDataInitializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1478},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2218,"byte_end":2234,"line_start":75,"line_end":75,"column_start":69,"column_end":85},"alias_span":null,"name":"TableInitializer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2268,"byte_end":2278,"line_start":77,"line_end":77,"column_start":30,"column_end":40},"alias_span":null,"name":"Atomically","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2268,"byte_end":2278,"line_start":77,"line_end":77,"column_start":30,"column_end":40},"alias_span":null,"name":"Atomically","value":"","parent":{"krate":0,"index":476}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2280,"byte_end":2290,"line_start":77,"line_end":77,"column_start":42,"column_end":52},"alias_span":null,"name":"MemoryView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2317,"byte_end":2331,"line_start":78,"line_end":78,"column_start":25,"column_end":39},"alias_span":null,"name":"NativeWasmType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2333,"byte_end":2342,"line_start":78,"line_end":78,"column_start":41,"column_end":50},"alias_span":null,"name":"ValueType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2368,"byte_end":2377,"line_start":79,"line_end":79,"column_start":24,"column_end":33},"alias_span":null,"name":"ExternRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2379,"byte_end":2387,"line_start":79,"line_end":79,"column_start":35,"column_end":43},"alias_span":null,"name":"HostInfo","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2389,"byte_end":2396,"line_start":79,"line_end":79,"column_start":45,"column_end":52},"alias_span":null,"name":"HostRef","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3217},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2427,"byte_end":2432,"line_start":81,"line_end":81,"column_start":5,"column_end":10},"alias_span":null,"name":"Bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3218},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2427,"byte_end":2432,"line_start":81,"line_end":81,"column_start":5,"column_end":10},"alias_span":null,"name":"Bytes","value":"","parent":{"krate":0,"index":486}},{"kind":"Use","ref_id":{"krate":0,"index":3266},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2434,"byte_end":2453,"line_start":81,"line_end":81,"column_start":12,"column_end":31},"alias_span":null,"name":"PageCountOutOfRange","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3267},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2434,"byte_end":2453,"line_start":81,"line_end":81,"column_start":12,"column_end":31},"alias_span":null,"name":"PageCountOutOfRange","value":"","parent":{"krate":0,"index":487}},{"kind":"Use","ref_id":{"krate":0,"index":3168},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2455,"byte_end":2460,"line_start":81,"line_end":81,"column_start":33,"column_end":38},"alias_span":null,"name":"Pages","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3169},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2455,"byte_end":2460,"line_start":81,"line_end":81,"column_start":33,"column_end":38},"alias_span":null,"name":"Pages","value":"","parent":{"krate":0,"index":488}},{"kind":"Use","ref_id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2462,"byte_end":2476,"line_start":81,"line_end":81,"column_start":40,"column_end":54},"alias_span":null,"name":"WASM_MAX_PAGES","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2478,"byte_end":2492,"line_start":81,"line_end":81,"column_start":56,"column_end":70},"alias_span":null,"name":"WASM_MIN_PAGES","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2494,"byte_end":2508,"line_start":81,"line_end":81,"column_start":72,"column_end":86},"alias_span":null,"name":"WASM_PAGE_SIZE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3279},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2536,"byte_end":2541,"line_start":83,"line_end":83,"column_start":24,"column_end":29},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3090},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2564,"byte_end":2574,"line_start":85,"line_end":85,"column_start":5,"column_end":15},"alias_span":null,"name":"ExportType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2576,"byte_end":2586,"line_start":85,"line_end":85,"column_start":17,"column_end":27},"alias_span":null,"name":"ExternType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1986},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2588,"byte_end":2600,"line_start":85,"line_end":85,"column_start":29,"column_end":41},"alias_span":null,"name":"FunctionType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2783},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2602,"byte_end":2612,"line_start":85,"line_end":85,"column_start":43,"column_end":53},"alias_span":null,"name":"GlobalInit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2716},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2614,"byte_end":2624,"line_start":85,"line_end":85,"column_start":55,"column_end":65},"alias_span":null,"name":"GlobalType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3009},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2626,"byte_end":2636,"line_start":85,"line_end":85,"column_start":67,"column_end":77},"alias_span":null,"name":"ImportType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2939},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2638,"byte_end":2648,"line_start":85,"line_end":85,"column_start":79,"column_end":89},"alias_span":null,"name":"MemoryType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2652},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2654,"byte_end":2664,"line_start":86,"line_end":86,"column_start":5,"column_end":15},"alias_span":null,"name":"Mutability","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2869},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2666,"byte_end":2675,"line_start":86,"line_end":86,"column_start":17,"column_end":26},"alias_span":null,"name":"TableType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2677,"byte_end":2681,"line_start":86,"line_end":86,"column_start":28,"column_end":32},"alias_span":null,"name":"Type","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2683,"byte_end":2687,"line_start":86,"line_end":86,"column_start":34,"column_end":38},"alias_span":null,"name":"V128","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1854},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2683,"byte_end":2687,"line_start":86,"line_end":86,"column_start":34,"column_end":38},"alias_span":null,"name":"V128","value":"","parent":{"krate":0,"index":504}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":0,"byte_end":2779,"line_start":1,"line_end":90,"column_start":1,"column_end":53},"name":"","qualname":"::","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":22},{"krate":0,"index":39},{"krate":0,"index":45},{"krate":0,"index":57},{"krate":0,"index":107},{"krate":0,"index":157},{"krate":0,"index":238},{"krate":0,"index":328},{"krate":0,"index":377},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":3521},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":3535},{"krate":0,"index":487},{"krate":0,"index":3537},{"krate":0,"index":488},{"krate":0,"index":3539},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":3569},{"krate":0,"index":505}],"decl_id":null,"docs":" This are the common types and utility tools for using WebAssembly\n in a Rust environment.","sig":null,"attributes":[{"value":"/ This are the common types and utility tools for using WebAssembly","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":0,"byte_end":69,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/ in a Rust environment.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":70,"byte_end":96,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":97,"byte_end":100,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ This crate provides common structures such as `Type` or `Value`, type indexes","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":101,"byte_end":182,"line_start":4,"line_end":4,"column_start":1,"column_end":82}},{"value":"/ and native function wrappers with `Func`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":183,"byte_end":228,"line_start":5,"line_end":5,"column_start":1,"column_end":46}},{"value":"deny(missing_docs, unused_extern_crates)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":230,"byte_end":274,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"warn(unused_import_braces)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":275,"byte_end":305,"line_start":8,"line_end":8,"column_start":1,"column_end":31}},{"value":"deny(unstable_features)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":335,"byte_end":358,"line_start":9,"line_end":9,"column_start":30,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":506},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3169,"byte_end":3177,"line_start":10,"line_end":10,"column_start":12,"column_end":20},"name":"Features","qualname":"::features::Features","value":"Features { threads, reference_types, simd, bulk_memory, multi_value, tail_call, module_linking, multi_memory, memory64 }","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515}],"decl_id":null,"docs":" Controls which experimental features will be enabled.\n Features usually have a corresponding [WebAssembly proposal].","sig":null,"attributes":[{"value":"/ Controls which experimental features will be enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":2852,"byte_end":2909,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/ Features usually have a corresponding [WebAssembly proposal].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":2910,"byte_end":2975,"line_start":5,"line_end":5,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":2976,"byte_end":2979,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [WebAssembly proposal]: https://github.com/WebAssembly/proposals","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":2980,"byte_end":3048,"line_start":7,"line_end":7,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":507},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3231,"byte_end":3238,"line_start":12,"line_end":12,"column_start":9,"column_end":16},"name":"threads","qualname":"::features::Features::threads","value":"bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Threads proposal should be enabled\n","sig":null,"attributes":[{"value":"/ Threads proposal should be enabled","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3184,"byte_end":3222,"line_start":11,"line_end":11,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":508},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3305,"byte_end":3320,"line_start":14,"line_end":14,"column_start":9,"column_end":24},"name":"reference_types","qualname":"::features::Features::reference_types","value":"bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Reference Types proposal should be enabled\n","sig":null,"attributes":[{"value":"/ Reference Types proposal should be enabled","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3250,"byte_end":3296,"line_start":13,"line_end":13,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":509},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3376,"byte_end":3380,"line_start":16,"line_end":16,"column_start":9,"column_end":13},"name":"simd","qualname":"::features::Features::simd","value":"bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" SIMD proposal should be enabled\n","sig":null,"attributes":[{"value":"/ SIMD proposal should be enabled","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3332,"byte_end":3367,"line_start":15,"line_end":15,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3443,"byte_end":3454,"line_start":18,"line_end":18,"column_start":9,"column_end":20},"name":"bulk_memory","qualname":"::features::Features::bulk_memory","value":"bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Bulk Memory proposal should be enabled\n","sig":null,"attributes":[{"value":"/ Bulk Memory proposal should be enabled","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3392,"byte_end":3434,"line_start":17,"line_end":17,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":511},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3517,"byte_end":3528,"line_start":20,"line_end":20,"column_start":9,"column_end":20},"name":"multi_value","qualname":"::features::Features::multi_value","value":"bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Multi Value proposal should be enabled\n","sig":null,"attributes":[{"value":"/ Multi Value proposal should be enabled","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3466,"byte_end":3508,"line_start":19,"line_end":19,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":512},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3589,"byte_end":3598,"line_start":22,"line_end":22,"column_start":9,"column_end":18},"name":"tail_call","qualname":"::features::Features::tail_call","value":"bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Tail call proposal should be enabled\n","sig":null,"attributes":[{"value":"/ Tail call proposal should be enabled","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3540,"byte_end":3580,"line_start":21,"line_end":21,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3664,"byte_end":3678,"line_start":24,"line_end":24,"column_start":9,"column_end":23},"name":"module_linking","qualname":"::features::Features::module_linking","value":"bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Module Linking proposal should be enabled\n","sig":null,"attributes":[{"value":"/ Module Linking proposal should be enabled","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3610,"byte_end":3655,"line_start":23,"line_end":23,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3742,"byte_end":3754,"line_start":26,"line_end":26,"column_start":9,"column_end":21},"name":"multi_memory","qualname":"::features::Features::multi_memory","value":"bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" Multi Memory proposal should be enabled\n","sig":null,"attributes":[{"value":"/ Multi Memory proposal should be enabled","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3690,"byte_end":3733,"line_start":25,"line_end":25,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3819,"byte_end":3827,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"name":"memory64","qualname":"::features::Features::memory64","value":"bool","parent":{"krate":0,"index":506},"children":[],"decl_id":null,"docs":" 64-bit Memory proposal should be enabled\n","sig":null,"attributes":[{"value":"/ 64-bit Memory proposal should be enabled","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3766,"byte_end":3810,"line_start":27,"line_end":27,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3894,"byte_end":3897,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"new","qualname":"<Features>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new feature\n","sig":null,"attributes":[{"value":"/ Create a new feature","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3858,"byte_end":3882,"line_start":32,"line_end":32,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4857,"byte_end":4864,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"threads","qualname":"<Features>::threads","value":"pub fn threads(&mut Self, bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures whether the WebAssembly threads proposal will be enabled.","sig":null,"attributes":[{"value":"/ Configures whether the WebAssembly threads proposal will be enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4325,"byte_end":4397,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4402,"byte_end":4405,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The [WebAssembly threads proposal][threads] is not currently fully","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4410,"byte_end":4480,"line_start":51,"line_end":51,"column_start":5,"column_end":75}},{"value":"/ standardized and is undergoing development. Support for this feature can","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4485,"byte_end":4561,"line_start":52,"line_end":52,"column_start":5,"column_end":81}},{"value":"/ be enabled through this method for appropriate WebAssembly modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4566,"byte_end":4637,"line_start":53,"line_end":53,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4642,"byte_end":4645,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ This feature gates items such as shared memories and atomic","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4650,"byte_end":4713,"line_start":55,"line_end":55,"column_start":5,"column_end":68}},{"value":"/ instructions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4718,"byte_end":4735,"line_start":56,"line_end":56,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4740,"byte_end":4743,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This is `false` by default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4748,"byte_end":4779,"line_start":58,"line_end":58,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4784,"byte_end":4787,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ [threads]: https://github.com/webassembly/threads","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4792,"byte_end":4845,"line_start":60,"line_end":60,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5650,"byte_end":5665,"line_start":81,"line_end":81,"column_start":12,"column_end":27},"name":"reference_types","qualname":"<Features>::reference_types","value":"pub fn reference_types(&mut Self, bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures whether the WebAssembly reference types proposal will be\n enabled.","sig":null,"attributes":[{"value":"/ Configures whether the WebAssembly reference types proposal will be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":4960,"byte_end":5031,"line_start":66,"line_end":66,"column_start":5,"column_end":76}},{"value":"/ enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5036,"byte_end":5048,"line_start":67,"line_end":67,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5053,"byte_end":5056,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ The [WebAssembly reference types proposal][proposal] is not currently","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5061,"byte_end":5134,"line_start":69,"line_end":69,"column_start":5,"column_end":78}},{"value":"/ fully standardized and is undergoing development. Support for this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5139,"byte_end":5209,"line_start":70,"line_end":70,"column_start":5,"column_end":75}},{"value":"/ feature can be enabled through this method for appropriate WebAssembly","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5214,"byte_end":5288,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"/ modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5293,"byte_end":5305,"line_start":72,"line_end":72,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5310,"byte_end":5313,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This feature gates items such as the `externref` type and multiple tables","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5318,"byte_end":5395,"line_start":74,"line_end":74,"column_start":5,"column_end":82}},{"value":"/ being in a module. Note that enabling the reference types feature will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5400,"byte_end":5474,"line_start":75,"line_end":75,"column_start":5,"column_end":79}},{"value":"/ also enable the bulk memory feature.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5479,"byte_end":5519,"line_start":76,"line_end":76,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5524,"byte_end":5527,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This is `false` by default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5532,"byte_end":5563,"line_start":78,"line_end":78,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5568,"byte_end":5571,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ [proposal]: https://github.com/webassembly/reference-types","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5576,"byte_end":5638,"line_start":80,"line_end":80,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6471,"byte_end":6475,"line_start":104,"line_end":104,"column_start":12,"column_end":16},"name":"simd","qualname":"<Features>::simd","value":"pub fn simd(&mut Self, bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures whether the WebAssembly SIMD proposal will be\n enabled.","sig":null,"attributes":[{"value":"/ Configures whether the WebAssembly SIMD proposal will be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5911,"byte_end":5971,"line_start":90,"line_end":90,"column_start":5,"column_end":65}},{"value":"/ enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5976,"byte_end":5988,"line_start":91,"line_end":91,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":5993,"byte_end":5996,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The [WebAssembly SIMD proposal][proposal] is not currently","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6001,"byte_end":6063,"line_start":93,"line_end":93,"column_start":5,"column_end":67}},{"value":"/ fully standardized and is undergoing development. Support for this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6068,"byte_end":6138,"line_start":94,"line_end":94,"column_start":5,"column_end":75}},{"value":"/ feature can be enabled through this method for appropriate WebAssembly","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6143,"byte_end":6217,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6222,"byte_end":6234,"line_start":96,"line_end":96,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6239,"byte_end":6242,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This feature gates items such as the `v128` type and all of its","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6247,"byte_end":6314,"line_start":98,"line_end":98,"column_start":5,"column_end":72}},{"value":"/ operators being in a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6319,"byte_end":6351,"line_start":99,"line_end":99,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6356,"byte_end":6359,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ This is `false` by default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6364,"byte_end":6395,"line_start":101,"line_end":101,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6400,"byte_end":6403,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ [proposal]: https://github.com/webassembly/simd","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6408,"byte_end":6459,"line_start":103,"line_end":103,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7206,"byte_end":7217,"line_start":123,"line_end":123,"column_start":12,"column_end":23},"name":"bulk_memory","qualname":"<Features>::bulk_memory","value":"pub fn bulk_memory(&mut Self, bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures whether the WebAssembly bulk memory operations proposal will\n be enabled.","sig":null,"attributes":[{"value":"/ Configures whether the WebAssembly bulk memory operations proposal will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6568,"byte_end":6643,"line_start":109,"line_end":109,"column_start":5,"column_end":80}},{"value":"/ be enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6648,"byte_end":6663,"line_start":110,"line_end":110,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6668,"byte_end":6671,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ The [WebAssembly bulk memory operations proposal][proposal] is not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6676,"byte_end":6746,"line_start":112,"line_end":112,"column_start":5,"column_end":75}},{"value":"/ currently fully standardized and is undergoing development.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6751,"byte_end":6814,"line_start":113,"line_end":113,"column_start":5,"column_end":68}},{"value":"/ Support for this feature can be enabled through this method for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6819,"byte_end":6886,"line_start":114,"line_end":114,"column_start":5,"column_end":72}},{"value":"/ appropriate WebAssembly modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6891,"byte_end":6927,"line_start":115,"line_end":115,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6932,"byte_end":6935,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ This feature gates items such as the `memory.copy` instruction, passive","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":6940,"byte_end":7015,"line_start":117,"line_end":117,"column_start":5,"column_end":80}},{"value":"/ data/table segments, etc, being in a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7020,"byte_end":7068,"line_start":118,"line_end":118,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7073,"byte_end":7076,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This is `false` by default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7081,"byte_end":7112,"line_start":120,"line_end":120,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7117,"byte_end":7120,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ [proposal]: https://github.com/webassembly/bulk-memory-operations","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7125,"byte_end":7194,"line_start":122,"line_end":122,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8091,"byte_end":8102,"line_start":147,"line_end":147,"column_start":12,"column_end":23},"name":"multi_value","qualname":"<Features>::multi_value","value":"pub fn multi_value(&mut Self, bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures whether the WebAssembly multi-value proposal will\n be enabled.","sig":null,"attributes":[{"value":"/ Configures whether the WebAssembly multi-value proposal will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7511,"byte_end":7575,"line_start":133,"line_end":133,"column_start":5,"column_end":69}},{"value":"/ be enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7580,"byte_end":7595,"line_start":134,"line_end":134,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7600,"byte_end":7603,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ The [WebAssembly multi-value proposal][proposal] is not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7608,"byte_end":7667,"line_start":136,"line_end":136,"column_start":5,"column_end":64}},{"value":"/ currently fully standardized and is undergoing development.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7672,"byte_end":7735,"line_start":137,"line_end":137,"column_start":5,"column_end":68}},{"value":"/ Support for this feature can be enabled through this method for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7740,"byte_end":7807,"line_start":138,"line_end":138,"column_start":5,"column_end":72}},{"value":"/ appropriate WebAssembly modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7812,"byte_end":7848,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7853,"byte_end":7856,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ This feature gates functions and blocks returning multiple values in a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7861,"byte_end":7935,"line_start":141,"line_end":141,"column_start":5,"column_end":79}},{"value":"/ module, for example.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7940,"byte_end":7964,"line_start":142,"line_end":142,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7969,"byte_end":7972,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ This is `false` by default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":7977,"byte_end":8008,"line_start":144,"line_end":144,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8013,"byte_end":8016,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ [proposal]: https://github.com/webassembly/multi-value","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8021,"byte_end":8079,"line_start":146,"line_end":146,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8731,"byte_end":8740,"line_start":165,"line_end":165,"column_start":12,"column_end":21},"name":"tail_call","qualname":"<Features>::tail_call","value":"pub fn tail_call(&mut Self, bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures whether the WebAssembly tail-call proposal will\n be enabled.","sig":null,"attributes":[{"value":"/ Configures whether the WebAssembly tail-call proposal will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8202,"byte_end":8264,"line_start":152,"line_end":152,"column_start":5,"column_end":67}},{"value":"/ be enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8269,"byte_end":8284,"line_start":153,"line_end":153,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8289,"byte_end":8292,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ The [WebAssembly tail-call proposal][proposal] is not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8297,"byte_end":8354,"line_start":155,"line_end":155,"column_start":5,"column_end":62}},{"value":"/ currently fully standardized and is undergoing development.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8359,"byte_end":8422,"line_start":156,"line_end":156,"column_start":5,"column_end":68}},{"value":"/ Support for this feature can be enabled through this method for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8427,"byte_end":8494,"line_start":157,"line_end":157,"column_start":5,"column_end":72}},{"value":"/ appropriate WebAssembly modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8499,"byte_end":8535,"line_start":158,"line_end":158,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8540,"byte_end":8543,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This feature gates tail-call functions in WebAssembly.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8548,"byte_end":8606,"line_start":160,"line_end":160,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8611,"byte_end":8614,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ This is `false` by default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8619,"byte_end":8650,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8655,"byte_end":8658,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ [proposal]: https://github.com/webassembly/tail-call","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8663,"byte_end":8719,"line_start":164,"line_end":164,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9417,"byte_end":9431,"line_start":184,"line_end":184,"column_start":12,"column_end":26},"name":"module_linking","qualname":"<Features>::module_linking","value":"pub fn module_linking(&mut Self, bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures whether the WebAssembly tail-call proposal will\n be enabled.","sig":null,"attributes":[{"value":"/ Configures whether the WebAssembly tail-call proposal will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8838,"byte_end":8900,"line_start":170,"line_end":170,"column_start":5,"column_end":67}},{"value":"/ be enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8905,"byte_end":8920,"line_start":171,"line_end":171,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8925,"byte_end":8928,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ The [WebAssembly tail-call proposal][proposal] is not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8933,"byte_end":8990,"line_start":173,"line_end":173,"column_start":5,"column_end":62}},{"value":"/ currently fully standardized and is undergoing development.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":8995,"byte_end":9058,"line_start":174,"line_end":174,"column_start":5,"column_end":68}},{"value":"/ Support for this feature can be enabled through this method for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9063,"byte_end":9130,"line_start":175,"line_end":175,"column_start":5,"column_end":72}},{"value":"/ appropriate WebAssembly modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9135,"byte_end":9171,"line_start":176,"line_end":176,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9176,"byte_end":9179,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ This feature allows WebAssembly modules to define, import and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9184,"byte_end":9249,"line_start":178,"line_end":178,"column_start":5,"column_end":70}},{"value":"/ export modules and instances.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9254,"byte_end":9287,"line_start":179,"line_end":179,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9292,"byte_end":9295,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ This is `false` by default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9300,"byte_end":9331,"line_start":181,"line_end":181,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9336,"byte_end":9339,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ [proposal]: https://github.com/webassembly/module-linking","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9344,"byte_end":9405,"line_start":183,"line_end":183,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10109,"byte_end":10121,"line_start":203,"line_end":203,"column_start":12,"column_end":24},"name":"multi_memory","qualname":"<Features>::multi_memory","value":"pub fn multi_memory(&mut Self, bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures whether the WebAssembly multi-memory proposal will\n be enabled.","sig":null,"attributes":[{"value":"/ Configures whether the WebAssembly multi-memory proposal will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9534,"byte_end":9599,"line_start":189,"line_end":189,"column_start":5,"column_end":70}},{"value":"/ be enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9604,"byte_end":9619,"line_start":190,"line_end":190,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9624,"byte_end":9627,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The [WebAssembly multi-memory proposal][proposal] is not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9632,"byte_end":9692,"line_start":192,"line_end":192,"column_start":5,"column_end":65}},{"value":"/ currently fully standardized and is undergoing development.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9697,"byte_end":9760,"line_start":193,"line_end":193,"column_start":5,"column_end":68}},{"value":"/ Support for this feature can be enabled through this method for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9765,"byte_end":9832,"line_start":194,"line_end":194,"column_start":5,"column_end":72}},{"value":"/ appropriate WebAssembly modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9837,"byte_end":9873,"line_start":195,"line_end":195,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9878,"byte_end":9881,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ This feature adds the ability to use multiple memories within a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9886,"byte_end":9953,"line_start":197,"line_end":197,"column_start":5,"column_end":72}},{"value":"/ single Wasm module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9958,"byte_end":9981,"line_start":198,"line_end":198,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9986,"byte_end":9989,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ This is `false` by default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":9994,"byte_end":10025,"line_start":200,"line_end":200,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10030,"byte_end":10033,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ [proposal]: https://github.com/WebAssembly/multi-memory","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10038,"byte_end":10097,"line_start":202,"line_end":202,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10788,"byte_end":10796,"line_start":222,"line_end":222,"column_start":12,"column_end":20},"name":"memory64","qualname":"<Features>::memory64","value":"pub fn memory64(&mut Self, bool) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Configures whether the WebAssembly 64-bit memory proposal will\n be enabled.","sig":null,"attributes":[{"value":"/ Configures whether the WebAssembly 64-bit memory proposal will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10222,"byte_end":10288,"line_start":208,"line_end":208,"column_start":5,"column_end":71}},{"value":"/ be enabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10293,"byte_end":10308,"line_start":209,"line_end":209,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10313,"byte_end":10316,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ The [WebAssembly 64-bit memory proposal][proposal] is not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10321,"byte_end":10382,"line_start":211,"line_end":211,"column_start":5,"column_end":66}},{"value":"/ currently fully standardized and is undergoing development.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10387,"byte_end":10450,"line_start":212,"line_end":212,"column_start":5,"column_end":68}},{"value":"/ Support for this feature can be enabled through this method for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10455,"byte_end":10522,"line_start":213,"line_end":213,"column_start":5,"column_end":72}},{"value":"/ appropriate WebAssembly modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10527,"byte_end":10563,"line_start":214,"line_end":214,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10568,"byte_end":10571,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ This feature gates support for linear memory of sizes larger than","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10576,"byte_end":10645,"line_start":216,"line_end":216,"column_start":5,"column_end":74}},{"value":"/ 2^32 bits.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10650,"byte_end":10664,"line_start":217,"line_end":217,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10669,"byte_end":10672,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ This is `false` by default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10677,"byte_end":10708,"line_start":219,"line_end":219,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10713,"byte_end":10716,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ [proposal]: https://github.com/WebAssembly/memory64","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10721,"byte_end":10776,"line_start":221,"line_end":221,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":13777,"byte_end":13795,"line_start":10,"line_end":10,"column_start":12,"column_end":30},"name":"LocalFunctionIndex","qualname":"::indexes::LocalFunctionIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a function defined locally inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a function defined locally inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":13552,"byte_end":13627,"line_start":7,"line_end":7,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":650},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":14059,"byte_end":14074,"line_start":16,"line_end":16,"column_start":12,"column_end":27},"name":"LocalTableIndex","qualname":"::indexes::LocalTableIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a table defined locally inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a table defined locally inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":13837,"byte_end":13909,"line_start":13,"line_end":13,"column_start":1,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":14336,"byte_end":14352,"line_start":22,"line_end":22,"column_start":12,"column_end":28},"name":"LocalMemoryIndex","qualname":"::indexes::LocalMemoryIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a memory defined locally inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a memory defined locally inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":14113,"byte_end":14186,"line_start":19,"line_end":19,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":14615,"byte_end":14631,"line_start":28,"line_end":28,"column_start":12,"column_end":28},"name":"LocalGlobalIndex","qualname":"::indexes::LocalGlobalIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a global defined locally inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a global defined locally inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":14392,"byte_end":14465,"line_start":25,"line_end":25,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":830},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":14900,"byte_end":14913,"line_start":34,"line_end":34,"column_start":12,"column_end":25},"name":"FunctionIndex","qualname":"::indexes::FunctionIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a function (imported or local) inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a function (imported or local) inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":14671,"byte_end":14750,"line_start":31,"line_end":31,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":890},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":15176,"byte_end":15186,"line_start":40,"line_end":40,"column_start":12,"column_end":22},"name":"TableIndex","qualname":"::indexes::TableIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a table (imported or local) inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a table (imported or local) inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":14950,"byte_end":15026,"line_start":37,"line_end":37,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":15456,"byte_end":15467,"line_start":46,"line_end":46,"column_start":12,"column_end":23},"name":"GlobalIndex","qualname":"::indexes::GlobalIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a global variable (imported or local) inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a global variable (imported or local) inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":15220,"byte_end":15306,"line_start":43,"line_end":43,"column_start":1,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":1010},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":15736,"byte_end":15747,"line_start":52,"line_end":52,"column_start":12,"column_end":23},"name":"MemoryIndex","qualname":"::indexes::MemoryIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a linear memory (imported or local) inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a linear memory (imported or local) inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":15502,"byte_end":15586,"line_start":49,"line_end":49,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1070},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":16012,"byte_end":16026,"line_start":58,"line_end":58,"column_start":12,"column_end":26},"name":"SignatureIndex","qualname":"::indexes::SignatureIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a signature (imported or local) inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a signature (imported or local) inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":15782,"byte_end":15862,"line_start":55,"line_end":55,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":16285,"byte_end":16294,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"DataIndex","qualname":"::indexes::DataIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a passive data segment inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a passive data segment inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":16064,"byte_end":16135,"line_start":61,"line_end":61,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":16551,"byte_end":16560,"line_start":70,"line_end":70,"column_start":12,"column_end":21},"name":"ElemIndex","qualname":"::indexes::ElemIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a passive element segment inside the WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a passive element segment inside the WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":16327,"byte_end":16401,"line_start":67,"line_end":67,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":16806,"byte_end":16824,"line_start":76,"line_end":76,"column_start":12,"column_end":30},"name":"CustomSectionIndex","qualname":"::indexes::CustomSectionIndex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index type of a custom section inside a WebAssembly module.\n","sig":null,"attributes":[{"value":"/ Index type of a custom section inside a WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":16593,"byte_end":16656,"line_start":73,"line_end":73,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1311},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17075,"byte_end":17083,"line_start":84,"line_end":84,"column_start":5,"column_end":13},"name":"Function","qualname":"::indexes::ExportIndex::Function","value":"ExportIndex::Function(FunctionIndex)","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":" Function export.\n","sig":null,"attributes":[{"value":"/ Function export.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17050,"byte_end":17070,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1314},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17126,"byte_end":17131,"line_start":86,"line_end":86,"column_start":5,"column_end":10},"name":"Table","qualname":"::indexes::ExportIndex::Table","value":"ExportIndex::Table(TableIndex)","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":" Table export.\n","sig":null,"attributes":[{"value":"/ Table export.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17104,"byte_end":17121,"line_start":85,"line_end":85,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1317},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17172,"byte_end":17178,"line_start":88,"line_end":88,"column_start":5,"column_end":11},"name":"Memory","qualname":"::indexes::ExportIndex::Memory","value":"ExportIndex::Memory(MemoryIndex)","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":" Memory export.\n","sig":null,"attributes":[{"value":"/ Memory export.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17149,"byte_end":17167,"line_start":87,"line_end":87,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1320},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17220,"byte_end":17226,"line_start":90,"line_end":90,"column_start":5,"column_end":11},"name":"Global","qualname":"::indexes::ExportIndex::Global","value":"ExportIndex::Global(GlobalIndex)","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":" Global export.\n","sig":null,"attributes":[{"value":"/ Global export.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17197,"byte_end":17215,"line_start":89,"line_end":89,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1310},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17032,"byte_end":17043,"line_start":82,"line_end":82,"column_start":10,"column_end":21},"name":"ExportIndex","qualname":"::indexes::ExportIndex","value":"pub enum ExportIndex {\n\n    /// Function export.\n    Function(FunctionIndex),\n\n    /// Table export.\n    Table(TableIndex),\n\n    /// Memory export.\n    Memory(MemoryIndex),\n\n    /// Global export.\n    Global(GlobalIndex),\n}","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1314},{"krate":0,"index":1317},{"krate":0,"index":1320}],"decl_id":null,"docs":" An entity to export.\n","sig":null,"attributes":[{"value":"/ An entity to export.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":16866,"byte_end":16890,"line_start":79,"line_end":79,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1395},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17453,"byte_end":17461,"line_start":98,"line_end":98,"column_start":5,"column_end":13},"name":"Function","qualname":"::indexes::ImportIndex::Function","value":"ImportIndex::Function(FunctionIndex)","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":" Function import.\n","sig":null,"attributes":[{"value":"/ Function import.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17428,"byte_end":17448,"line_start":97,"line_end":97,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17504,"byte_end":17509,"line_start":100,"line_end":100,"column_start":5,"column_end":10},"name":"Table","qualname":"::indexes::ImportIndex::Table","value":"ImportIndex::Table(TableIndex)","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":" Table import.\n","sig":null,"attributes":[{"value":"/ Table import.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17482,"byte_end":17499,"line_start":99,"line_end":99,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17550,"byte_end":17556,"line_start":102,"line_end":102,"column_start":5,"column_end":11},"name":"Memory","qualname":"::indexes::ImportIndex::Memory","value":"ImportIndex::Memory(MemoryIndex)","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":" Memory import.\n","sig":null,"attributes":[{"value":"/ Memory import.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17527,"byte_end":17545,"line_start":101,"line_end":101,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17598,"byte_end":17604,"line_start":104,"line_end":104,"column_start":5,"column_end":11},"name":"Global","qualname":"::indexes::ImportIndex::Global","value":"ImportIndex::Global(GlobalIndex)","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":" Global import.\n","sig":null,"attributes":[{"value":"/ Global import.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17575,"byte_end":17593,"line_start":103,"line_end":103,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1394},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17410,"byte_end":17421,"line_start":96,"line_end":96,"column_start":10,"column_end":21},"name":"ImportIndex","qualname":"::indexes::ImportIndex","value":"pub enum ImportIndex {\n\n    /// Function import.\n    Function(FunctionIndex),\n\n    /// Table import.\n    Table(TableIndex),\n\n    /// Memory import.\n    Memory(MemoryIndex),\n\n    /// Global import.\n    Global(GlobalIndex),\n}","parent":null,"children":[{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1404}],"decl_id":null,"docs":" An entity to import.\n","sig":null,"attributes":[{"value":"/ An entity to import.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\indexes.rs","byte_start":17244,"byte_end":17268,"line_start":93,"line_end":93,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1478},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":17904,"byte_end":17920,"line_start":9,"line_end":9,"column_start":12,"column_end":28},"name":"TableInitializer","qualname":"::initializers::TableInitializer","value":"TableInitializer { table_index, base, offset, elements }","parent":null,"children":[{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1482}],"decl_id":null,"docs":" A WebAssembly table initializer.\n","sig":null,"attributes":[{"value":"/ A WebAssembly table initializer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":17802,"byte_end":17838,"line_start":7,"line_end":7,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1479},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":17975,"byte_end":17986,"line_start":11,"line_end":11,"column_start":9,"column_end":20},"name":"table_index","qualname":"::initializers::TableInitializer::table_index","value":"indexes::TableIndex","parent":{"krate":0,"index":1478},"children":[],"decl_id":null,"docs":" The index of a table to initialize.\n","sig":null,"attributes":[{"value":"/ The index of a table to initialize.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":17927,"byte_end":17966,"line_start":10,"line_end":10,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1480},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18067,"byte_end":18071,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"base","qualname":"::initializers::TableInitializer::base","value":"std::option::Option<indexes::GlobalIndex>","parent":{"krate":0,"index":1478},"children":[],"decl_id":null,"docs":" Optionally, a global variable giving a base index.\n","sig":null,"attributes":[{"value":"/ Optionally, a global variable giving a base index.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18004,"byte_end":18058,"line_start":12,"line_end":12,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1481},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18141,"byte_end":18147,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"offset","qualname":"::initializers::TableInitializer::offset","value":"usize","parent":{"krate":0,"index":1478},"children":[],"decl_id":null,"docs":" The offset to add to the base.\n","sig":null,"attributes":[{"value":"/ The offset to add to the base.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18098,"byte_end":18132,"line_start":14,"line_end":14,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1482},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18217,"byte_end":18225,"line_start":17,"line_end":17,"column_start":9,"column_end":17},"name":"elements","qualname":"::initializers::TableInitializer::elements","value":"std::boxed::Box<[indexes::FunctionIndex]>","parent":{"krate":0,"index":1478},"children":[],"decl_id":null,"docs":" The values to write into the table elements.\n","sig":null,"attributes":[{"value":"/ The values to write into the table elements.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18160,"byte_end":18208,"line_start":16,"line_end":16,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":1543},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18459,"byte_end":18482,"line_start":24,"line_end":24,"column_start":12,"column_end":35},"name":"DataInitializerLocation","qualname":"::initializers::DataInitializerLocation","value":"DataInitializerLocation { memory_index, base, offset }","parent":null,"children":[{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546}],"decl_id":null,"docs":" A memory index and offset within that memory where a data initialization\n should be performed.\n","sig":null,"attributes":[{"value":"/ A memory index and offset within that memory where a data initialization","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18252,"byte_end":18328,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ should be performed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18329,"byte_end":18353,"line_start":21,"line_end":21,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1544},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18540,"byte_end":18552,"line_start":26,"line_end":26,"column_start":9,"column_end":21},"name":"memory_index","qualname":"::initializers::DataInitializerLocation::memory_index","value":"indexes::MemoryIndex","parent":{"krate":0,"index":1543},"children":[],"decl_id":null,"docs":" The index of the memory to initialize.\n","sig":null,"attributes":[{"value":"/ The index of the memory to initialize.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18489,"byte_end":18531,"line_start":25,"line_end":25,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1545},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18636,"byte_end":18640,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"name":"base","qualname":"::initializers::DataInitializerLocation::base","value":"std::option::Option<indexes::GlobalIndex>","parent":{"krate":0,"index":1543},"children":[],"decl_id":null,"docs":" Optionally a Global variable base to initialize at.\n","sig":null,"attributes":[{"value":"/ Optionally a Global variable base to initialize at.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18572,"byte_end":18627,"line_start":28,"line_end":28,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1546},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18716,"byte_end":18722,"line_start":32,"line_end":32,"column_start":9,"column_end":15},"name":"offset","qualname":"::initializers::DataInitializerLocation::offset","value":"usize","parent":{"krate":0,"index":1543},"children":[],"decl_id":null,"docs":" A constant offset to initialize at.\n","sig":null,"attributes":[{"value":"/ A constant offset to initialize at.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18668,"byte_end":18707,"line_start":31,"line_end":31,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1602},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18874,"byte_end":18889,"line_start":38,"line_end":38,"column_start":12,"column_end":27},"name":"DataInitializer","qualname":"::initializers::DataInitializer","value":"DataInitializer { location, data }","parent":null,"children":[{"krate":0,"index":1604},{"krate":0,"index":1605}],"decl_id":null,"docs":" A data initializer for linear memory.\n","sig":null,"attributes":[{"value":"/ A data initializer for linear memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18734,"byte_end":18775,"line_start":35,"line_end":35,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1604},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18973,"byte_end":18981,"line_start":40,"line_end":40,"column_start":9,"column_end":17},"name":"location","qualname":"::initializers::DataInitializer::location","value":"initializers::DataInitializerLocation","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":" The location where the initialization is to be performed.\n","sig":null,"attributes":[{"value":"/ The location where the initialization is to be performed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":18903,"byte_end":18964,"line_start":39,"line_end":39,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1605},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19050,"byte_end":19054,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"name":"data","qualname":"::initializers::DataInitializer::data","value":"&'data [u8]","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":" The initialization data.\n","sig":null,"attributes":[{"value":"/ The initialization data.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19013,"byte_end":19041,"line_start":42,"line_end":42,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1662},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19264,"byte_end":19284,"line_start":50,"line_end":50,"column_start":12,"column_end":32},"name":"OwnedDataInitializer","qualname":"::initializers::OwnedDataInitializer","value":"OwnedDataInitializer { location, data }","parent":null,"children":[{"krate":0,"index":1663},{"krate":0,"index":1664}],"decl_id":null,"docs":" As `DataInitializer` but owning the data rather than\n holding a reference to it\n","sig":null,"attributes":[{"value":"/ As `DataInitializer` but owning the data rather than","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19072,"byte_end":19128,"line_start":46,"line_end":46,"column_start":1,"column_end":57}},{"value":"/ holding a reference to it","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19129,"byte_end":19158,"line_start":47,"line_end":47,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":1663},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19361,"byte_end":19369,"line_start":52,"line_end":52,"column_start":9,"column_end":17},"name":"location","qualname":"::initializers::OwnedDataInitializer::location","value":"initializers::DataInitializerLocation","parent":{"krate":0,"index":1662},"children":[],"decl_id":null,"docs":" The location where the initialization is to be performed.\n","sig":null,"attributes":[{"value":"/ The location where the initialization is to be performed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19291,"byte_end":19352,"line_start":51,"line_end":51,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1664},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19444,"byte_end":19448,"line_start":55,"line_end":55,"column_start":9,"column_end":13},"name":"data","qualname":"::initializers::OwnedDataInitializer::data","value":"std::boxed::Box<[u8]>","parent":{"krate":0,"index":1662},"children":[],"decl_id":null,"docs":" The initialization owned data.\n","sig":null,"attributes":[{"value":"/ The initialization owned data.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19401,"byte_end":19435,"line_start":54,"line_end":54,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19574,"byte_end":19577,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<OwnedDataInitializer>::new","value":"pub fn new(&DataInitializer) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `OwnedDataInitializer` from a `DataInitializer`.\n","sig":null,"attributes":[{"value":"/ Creates a new `OwnedDataInitializer` from a `DataInitializer`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19496,"byte_end":19562,"line_start":59,"line_end":59,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20071,"byte_end":20077,"line_start":10,"line_end":10,"column_start":11,"column_end":17},"name":"Atomic","qualname":"::memory_view::Atomic","value":"Atomic","parent":null,"children":[{"krate":0,"index":73}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20089,"byte_end":20095,"line_start":11,"line_end":11,"column_start":10,"column_end":16},"name":"Output","qualname":"::memory_view::Atomic::Output","value":"type Output;","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20604,"byte_end":20614,"line_start":41,"line_end":41,"column_start":12,"column_end":22},"name":"Atomically","qualname":"::memory_view::Atomically","value":"","parent":null,"children":[],"decl_id":null,"docs":" Atomically.\n","sig":null,"attributes":[{"value":"/ Atomically.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20577,"byte_end":20592,"line_start":40,"line_end":40,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20681,"byte_end":20694,"line_start":45,"line_end":45,"column_start":12,"column_end":25},"name":"NonAtomically","qualname":"::memory_view::NonAtomically","value":"","parent":null,"children":[],"decl_id":null,"docs":" Non-atomically.\n","sig":null,"attributes":[{"value":"/ Non-atomically.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20650,"byte_end":20669,"line_start":44,"line_end":44,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20770,"byte_end":20780,"line_start":49,"line_end":49,"column_start":12,"column_end":22},"name":"MemoryView","qualname":"::memory_view::MemoryView","value":"MemoryView {  }","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"decl_id":null,"docs":" A view into a memory.\n","sig":null,"attributes":[{"value":"/ A view into a memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20733,"byte_end":20758,"line_start":48,"line_end":48,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":21053,"byte_end":21056,"line_start":60,"line_end":60,"column_start":19,"column_end":22},"name":"new","qualname":"<MemoryView>::new","value":"pub unsafe fn new(*mut T, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new MemoryView given a `pointer` and `length`.\n","sig":null,"attributes":[{"value":"/ Creates a new MemoryView given a `pointer` and `length`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20974,"byte_end":21034,"line_start":59,"line_end":59,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":21311,"byte_end":21321,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"atomically","qualname":"<MemoryView>::atomically","value":"pub fn atomically(&Self) -> MemoryView","parent":null,"children":[],"decl_id":null,"docs":" Get atomic access to a memory view.\n","sig":null,"attributes":[{"value":"/ Get atomic access to a memory view.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":21260,"byte_end":21299,"line_start":70,"line_end":70,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22741,"byte_end":22755,"line_start":23,"line_end":23,"column_start":11,"column_end":25},"name":"NativeWasmType","qualname":"::native::NativeWasmType","value":"NativeWasmType: Sized","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":119}],"decl_id":null,"docs":" `NativeWasmType` represents a Wasm type that has a direct\n representation on the host (hence the “native” term).","sig":null,"attributes":[{"value":"/ `NativeWasmType` represents a Wasm type that has a direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22233,"byte_end":22294,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ representation on the host (hence the “native” term).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22295,"byte_end":22356,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22357,"byte_end":22360,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It uses the Rust Type system to automatically detect the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22361,"byte_end":22421,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/ Wasm type associated with a native Rust type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22422,"byte_end":22471,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22472,"byte_end":22475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22476,"byte_end":22483,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use wasmer_types::{NativeWasmType, Type};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22484,"byte_end":22529,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22530,"byte_end":22533,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ let wasm_type = i32::WASM_TYPE;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22534,"byte_end":22569,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(wasm_type, Type::I32);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22570,"byte_end":22607,"line_start":18,"line_end":18,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22608,"byte_end":22615,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22616,"byte_end":22619,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ > Note: This strategy will be needed later to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22620,"byte_end":22669,"line_start":21,"line_end":21,"column_start":1,"column_end":50}},{"value":"/ > automatically detect the signature of a Rust function.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22670,"byte_end":22730,"line_start":22,"line_end":22,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22825,"byte_end":22828,"line_start":25,"line_end":25,"column_start":10,"column_end":13},"name":"Abi","qualname":"::native::NativeWasmType::Abi","value":"type Abi: Copy + fmt::Debug;","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" The ABI for this type (i32, i64, f32, f64)\n","sig":null,"attributes":[{"value":"/ The ABI for this type (i32, i64, f32, f64)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22769,"byte_end":22815,"line_start":24,"line_end":24,"column_start":5,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22900,"byte_end":22909,"line_start":28,"line_end":28,"column_start":11,"column_end":20},"name":"WASM_TYPE","qualname":"::native::NativeWasmType::WASM_TYPE","value":"Type","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Type for this `NativeWasmType`.\n","sig":null,"attributes":[{"value":"/ Type for this `NativeWasmType`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22854,"byte_end":22889,"line_start":27,"line_end":27,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22944,"byte_end":22952,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"from_abi","qualname":"::native::NativeWasmType::from_abi","value":"pub fn from_abi(Self::Abi) -> Self","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":23005,"byte_end":23013,"line_start":34,"line_end":34,"column_start":8,"column_end":16},"name":"into_abi","qualname":"::native::NativeWasmType::into_abi","value":"pub fn into_abi(Self) -> Self::Abi","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":23094,"byte_end":23103,"line_start":37,"line_end":37,"column_start":8,"column_end":17},"name":"to_binary","qualname":"::native::NativeWasmType::to_binary","value":"pub fn to_binary(Self) -> i128","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Convert self to i128 binary representation.\n","sig":null,"attributes":[{"value":"/ Convert self to i128 binary representation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":23039,"byte_end":23086,"line_start":36,"line_end":36,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":23162,"byte_end":23170,"line_start":40,"line_end":40,"column_start":8,"column_end":16},"name":"to_value","qualname":"::native::NativeWasmType::to_value","value":"pub fn to_value<T>(Self) -> Value<T>","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Convert self to a `Value`.\n","sig":null,"attributes":[{"value":"/ Convert self to a `Value`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":23124,"byte_end":23154,"line_start":39,"line_end":39,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":23373,"byte_end":23384,"line_start":47,"line_end":47,"column_start":8,"column_end":19},"name":"from_binary","qualname":"::native::NativeWasmType::from_binary","value":"pub fn from_binary(i128) -> Self","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Convert to self from i128 binary representation.\n","sig":null,"attributes":[{"value":"/ Convert to self from i128 binary representation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":23313,"byte_end":23365,"line_start":46,"line_end":46,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":27370,"byte_end":27379,"line_start":226,"line_end":226,"column_start":18,"column_end":27},"name":"ValueType","qualname":"::native::ValueType","value":"ValueType: Copy","parent":null,"children":[],"decl_id":null,"docs":" Trait for a Value type. A Value type is a type that is always valid and may\n be safely copied.","sig":null,"attributes":[{"value":"/ Trait for a Value type. A Value type is a type that is always valid and may","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":26850,"byte_end":26929,"line_start":216,"line_end":216,"column_start":1,"column_end":80}},{"value":"/ be safely copied.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":26930,"byte_end":26951,"line_start":217,"line_end":217,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":26952,"byte_end":26955,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ That is, for all possible bit patterns a valid Value type can be constructed","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":26956,"byte_end":27036,"line_start":219,"line_end":219,"column_start":1,"column_end":81}},{"value":"/ from those bits.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":27037,"byte_end":27057,"line_start":220,"line_end":220,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":27058,"byte_end":27061,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Concretely a `u32` is a Value type because every combination of 32 bits is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":27062,"byte_end":27140,"line_start":222,"line_end":222,"column_start":1,"column_end":79}},{"value":"/ a valid `u32`. However a `bool` is _not_ a Value type because any bit patterns","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":27141,"byte_end":27223,"line_start":223,"line_end":223,"column_start":1,"column_end":83}},{"value":"/ other than `0` and `1` are invalid in Rust and may cause undefined behavior if","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":27224,"byte_end":27306,"line_start":224,"line_end":224,"column_start":1,"column_end":83}},{"value":"/ a `bool` is constructed from those bytes.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":27307,"byte_end":27352,"line_start":225,"line_end":225,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":27860,"byte_end":27868,"line_start":10,"line_end":10,"column_start":11,"column_end":19},"name":"HostInfo","qualname":"::r#ref::HostInfo","value":"HostInfo","parent":null,"children":[{"krate":0,"index":169}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":27878,"byte_end":27886,"line_start":11,"line_end":11,"column_start":8,"column_end":16},"name":"finalize","qualname":"::r#ref::HostInfo::finalize","value":"pub fn finalize(&mut Self)","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1748},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28187,"byte_end":28198,"line_start":22,"line_end":22,"column_start":12,"column_end":23},"name":"InternalRef","qualname":"::r#ref::InternalRef","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28256,"byte_end":28262,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"is_ref","qualname":"<InternalRef>::is_ref","value":"pub fn is_ref<T: 'static>(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28375,"byte_end":28382,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<InternalRef>::get_ref","value":"pub fn get_ref<T: 'static>(&Self) -> HostRef<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1753},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28841,"byte_end":28849,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"OtherRef","qualname":"::r#ref::OtherRef","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1759},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29022,"byte_end":29026,"line_start":57,"line_end":57,"column_start":5,"column_end":9},"name":"Null","qualname":"::r#ref::ExternRef::Null","value":"ExternRef::Null","parent":{"krate":0,"index":1758},"children":[],"decl_id":null,"docs":" A reference to no data.\n","sig":null,"attributes":[{"value":"/ A reference to no data.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28990,"byte_end":29017,"line_start":56,"line_end":56,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1761},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29079,"byte_end":29082,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"name":"Ref","qualname":"::r#ref::ExternRef::Ref","value":"ExternRef::Ref(InternalRef)","parent":{"krate":0,"index":1758},"children":[],"decl_id":null,"docs":" A reference to data stored internally.\n","sig":null,"attributes":[{"value":"/ A reference to data stored internally.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29032,"byte_end":29074,"line_start":58,"line_end":58,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1764},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29146,"byte_end":29151,"line_start":61,"line_end":61,"column_start":5,"column_end":10},"name":"Other","qualname":"::r#ref::ExternRef::Other","value":"ExternRef::Other(OtherRef)","parent":{"krate":0,"index":1758},"children":[],"decl_id":null,"docs":" A reference to data located outside.\n","sig":null,"attributes":[{"value":"/ A reference to data located outside.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29101,"byte_end":29141,"line_start":60,"line_end":60,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28974,"byte_end":28983,"line_start":55,"line_end":55,"column_start":10,"column_end":19},"name":"ExternRef","qualname":"::r#ref::ExternRef","value":"pub enum ExternRef {\n\n    /// A reference to no data.\n    Null,\n\n    /// A reference to data stored internally.\n    Ref(InternalRef),\n\n    /// A reference to data located outside.\n    Other(OtherRef),\n}","parent":null,"children":[{"krate":0,"index":1759},{"krate":0,"index":1761},{"krate":0,"index":1764}],"decl_id":null,"docs":" Represents an opaque reference to any data within WebAssembly.\n","sig":null,"attributes":[{"value":"/ Represents an opaque reference to any data within WebAssembly.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28881,"byte_end":28947,"line_start":53,"line_end":53,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29557,"byte_end":29560,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<ExternRef>::new","value":"pub fn new(Box<Any>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new instance of `ExternRef` from `Box<dyn Any>`.\n","sig":null,"attributes":[{"value":"/ Creates a new instance of `ExternRef` from `Box<dyn Any>`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29483,"byte_end":29545,"line_start":77,"line_end":77,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29803,"byte_end":29807,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"null","qualname":"<ExternRef>::null","value":"pub fn null() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Null` reference.\n","sig":null,"attributes":[{"value":"/ Creates a `Null` reference.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29760,"byte_end":29791,"line_start":86,"line_end":86,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30009,"byte_end":30013,"line_start":96,"line_end":96,"column_start":12,"column_end":16},"name":"data","qualname":"<ExternRef>::data","value":"pub fn data(&Self) -> cell::Ref<, Box<Any>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the data stored in the reference if available.","sig":null,"attributes":[{"value":"/ Returns the data stored in the reference if available.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29850,"byte_end":29908,"line_start":91,"line_end":91,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29913,"byte_end":29916,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29921,"byte_end":29933,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29938,"byte_end":29941,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Panics if the variant isn't `ExternRef::Other`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29946,"byte_end":29997,"line_start":95,"line_end":95,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30355,"byte_end":30361,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<ExternRef>::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the two `ExternRef<T>`'s point to the same value (not just\n values that compare as equal).\n","sig":null,"attributes":[{"value":"/ Returns true if the two `ExternRef<T>`'s point to the same value (not just","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30226,"byte_end":30304,"line_start":103,"line_end":103,"column_start":5,"column_end":83}},{"value":"/ values that compare as equal).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30309,"byte_end":30343,"line_start":104,"line_end":104,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30898,"byte_end":30907,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"host_info","qualname":"<ExternRef>::host_info","value":"pub fn host_info(&Self) -> Option<cell::RefMut<, Box<HostInfo>>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the host information if available.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the host information if available.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30708,"byte_end":30777,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30782,"byte_end":30785,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30790,"byte_end":30802,"line_start":116,"line_end":116,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30807,"byte_end":30810,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ Panics if `ExternRef` is already borrowed or `ExternRef` is `Null`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":30815,"byte_end":30886,"line_start":118,"line_end":118,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":31555,"byte_end":31568,"line_start":138,"line_end":138,"column_start":12,"column_end":25},"name":"set_host_info","qualname":"<ExternRef>::set_host_info","value":"pub fn set_host_info(&Self, Option<Box<HostInfo>>)","parent":null,"children":[],"decl_id":null,"docs":" Sets the host information for an `ExternRef`.","sig":null,"attributes":[{"value":"/ Sets the host information for an `ExternRef`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":31385,"byte_end":31434,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":31439,"byte_end":31442,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":31447,"byte_end":31459,"line_start":135,"line_end":135,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":31464,"byte_end":31467,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Panics if `ExternRef` is already borrowed or `ExternRef` is `Null`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":31472,"byte_end":31543,"line_start":137,"line_end":137,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":211},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32491,"byte_end":32498,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"HostRef","qualname":"::r#ref::HostRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" Represents a piece of data located in the host environment.\n","sig":null,"attributes":[{"value":"/ Represents a piece of data located in the host environment.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32416,"byte_end":32479,"line_start":173,"line_end":173,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32618,"byte_end":32621,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"new","qualname":"<HostRef<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `HostRef<T>` from `T`.\n","sig":null,"attributes":[{"value":"/ Creates a new `HostRef<T>` from `T`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32566,"byte_end":32606,"line_start":177,"line_end":177,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33024,"byte_end":33030,"line_start":193,"line_end":193,"column_start":12,"column_end":18},"name":"borrow","qualname":"<HostRef<T>>::borrow","value":"pub fn borrow(&Self) -> cell::Ref<, T>","parent":null,"children":[],"decl_id":null,"docs":" Immutably borrows the wrapped data.","sig":null,"attributes":[{"value":"/ Immutably borrows the wrapped data.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32881,"byte_end":32920,"line_start":188,"line_end":188,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32925,"byte_end":32928,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32933,"byte_end":32945,"line_start":190,"line_end":190,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32950,"byte_end":32953,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ Panics if the value is currently mutably borrowed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32958,"byte_end":33012,"line_start":192,"line_end":192,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33261,"byte_end":33271,"line_start":202,"line_end":202,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<HostRef<T>>::borrow_mut","value":"pub fn borrow_mut(&Self) -> cell::RefMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Mutably borrows the wrapped data.","sig":null,"attributes":[{"value":"/ Mutably borrows the wrapped data.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33123,"byte_end":33160,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33165,"byte_end":33168,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33173,"byte_end":33185,"line_start":199,"line_end":199,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33190,"byte_end":33193,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Panics if the `HostRef<T>` is already borrowed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33198,"byte_end":33249,"line_start":201,"line_end":201,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33505,"byte_end":33511,"line_start":208,"line_end":208,"column_start":12,"column_end":18},"name":"ptr_eq","qualname":"<HostRef<T>>::ptr_eq","value":"pub fn ptr_eq(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the two `HostRef<T>`'s point to the same value (not just\n values that compare as equal).\n","sig":null,"attributes":[{"value":"/ Returns true if the two `HostRef<T>`'s point to the same value (not just","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33378,"byte_end":33454,"line_start":206,"line_end":206,"column_start":5,"column_end":81}},{"value":"/ values that compare as equal).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33459,"byte_end":33493,"line_start":207,"line_end":207,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33787,"byte_end":33796,"line_start":218,"line_end":218,"column_start":12,"column_end":21},"name":"externref","qualname":"<HostRef<T>>::externref","value":"pub fn externref(&Self) -> ExternRef","parent":null,"children":[],"decl_id":null,"docs":" Returns an opaque reference to the wrapped data in the form of\n an `ExternRef`.","sig":null,"attributes":[{"value":"/ Returns an opaque reference to the wrapped data in the form of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33592,"byte_end":33658,"line_start":212,"line_end":212,"column_start":5,"column_end":71}},{"value":"/ an `ExternRef`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33663,"byte_end":33682,"line_start":213,"line_end":213,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33687,"byte_end":33690,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33695,"byte_end":33707,"line_start":215,"line_end":215,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33712,"byte_end":33715,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Panics if `HostRef<T>` is already mutably borrowed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":33720,"byte_end":33775,"line_start":217,"line_end":217,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1770},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35827,"byte_end":35830,"line_start":22,"line_end":22,"column_start":5,"column_end":8},"name":"I32","qualname":"::types::Type::I32","value":"Type::I32","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" Signed 32 bit integer.\n","sig":null,"attributes":[{"value":"/ Signed 32 bit integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35796,"byte_end":35822,"line_start":21,"line_end":21,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1772},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35867,"byte_end":35870,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"I64","qualname":"::types::Type::I64","value":"Type::I64","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" Signed 64 bit integer.\n","sig":null,"attributes":[{"value":"/ Signed 64 bit integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35836,"byte_end":35862,"line_start":23,"line_end":23,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1774},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35915,"byte_end":35918,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"F32","qualname":"::types::Type::F32","value":"Type::F32","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" Floating point 32 bit integer.\n","sig":null,"attributes":[{"value":"/ Floating point 32 bit integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35876,"byte_end":35910,"line_start":25,"line_end":25,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35963,"byte_end":35966,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"F64","qualname":"::types::Type::F64","value":"Type::F64","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" Floating point 64 bit integer.\n","sig":null,"attributes":[{"value":"/ Floating point 64 bit integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35924,"byte_end":35958,"line_start":27,"line_end":27,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1778},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35998,"byte_end":36002,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"V128","qualname":"::types::Type::V128","value":"Type::V128","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" A 128 bit number.\n","sig":null,"attributes":[{"value":"/ A 128 bit number.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35972,"byte_end":35993,"line_start":29,"line_end":29,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36065,"byte_end":36074,"line_start":32,"line_end":32,"column_start":5,"column_end":14},"name":"ExternRef","qualname":"::types::Type::ExternRef","value":"Type::ExternRef","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" A reference to opaque data in the Wasm instance.\n","sig":null,"attributes":[{"value":"/ A reference to opaque data in the Wasm instance.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36008,"byte_end":36060,"line_start":31,"line_end":31,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36132,"byte_end":36139,"line_start":34,"line_end":34,"column_start":5,"column_end":12},"name":"FuncRef","qualname":"::types::Type::FuncRef","value":"Type::FuncRef","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" A reference to a Wasm function.\n","sig":null,"attributes":[{"value":"/ A reference to a Wasm function.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36092,"byte_end":36127,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":1769},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35785,"byte_end":35789,"line_start":20,"line_end":20,"column_start":10,"column_end":14},"name":"Type","qualname":"::types::Type","value":"pub enum Type {\n\n    /// Signed 32 bit integer.\n    I32,\n\n    /// Signed 64 bit integer.\n    I64,\n\n    /// Floating point 32 bit integer.\n    F32,\n\n    /// Floating point 64 bit integer.\n    F64,\n\n    /// A 128 bit number.\n    V128,\n\n    /// A reference to opaque data in the Wasm instance.\n    ExternRef,\n\n    /// A reference to a Wasm function.\n    FuncRef,\n}","parent":null,"children":[{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782}],"decl_id":null,"docs":" A list of all possible value types in WebAssembly.\n","sig":null,"attributes":[{"value":"/ A list of all possible value types in WebAssembly.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":35600,"byte_end":35654,"line_start":17,"line_end":17,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36283,"byte_end":36289,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"is_num","qualname":"<Type>::is_num","value":"pub fn is_num(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `Type` matches any of the numeric types. (e.g. `I32`,\n `I64`, `F32`, `F64`, `V128`).\n","sig":null,"attributes":[{"value":"/ Returns true if `Type` matches any of the numeric types. (e.g. `I32`,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36160,"byte_end":36233,"line_start":38,"line_end":38,"column_start":5,"column_end":78}},{"value":"/ `I64`, `F32`, `F64`, `V128`).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36238,"byte_end":36271,"line_start":39,"line_end":39,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36511,"byte_end":36517,"line_start":48,"line_end":48,"column_start":12,"column_end":18},"name":"is_ref","qualname":"<Type>::is_ref","value":"pub fn is_ref(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if `Type` matches either of the reference types.\n","sig":null,"attributes":[{"value":"/ Returns true if `Type` matches either of the reference types.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36434,"byte_end":36499,"line_start":47,"line_end":47,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36890,"byte_end":36894,"line_start":62,"line_end":62,"column_start":12,"column_end":16},"name":"V128","qualname":"::types::V128","value":"","parent":null,"children":[],"decl_id":null,"docs":" The WebAssembly V128 type\n","sig":null,"attributes":[{"value":"/ The WebAssembly V128 type","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36849,"byte_end":36878,"line_start":61,"line_end":61,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36995,"byte_end":37000,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"bytes","qualname":"<V128>::bytes","value":"pub fn bytes(&Self) -> &[u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Get the bytes corresponding to the V128 value\n","sig":null,"attributes":[{"value":"/ Get the bytes corresponding to the V128 value","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36934,"byte_end":36983,"line_start":65,"line_end":65,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37104,"byte_end":37108,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"iter","qualname":"<V128>::iter","value":"pub fn iter(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the bytes in the constant.\n","sig":null,"attributes":[{"value":"/ Iterate over the bytes in the constant.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37049,"byte_end":37092,"line_start":69,"line_end":69,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37232,"byte_end":37238,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<V128>::to_vec","value":"pub fn to_vec(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Convert the immediate into a vector.\n","sig":null,"attributes":[{"value":"/ Convert the immediate into a vector.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37180,"byte_end":37220,"line_start":74,"line_end":74,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37344,"byte_end":37352,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<V128>::as_slice","value":"pub fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Convert the immediate into a slice.\n","sig":null,"attributes":[{"value":"/ Convert the immediate into a slice.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37293,"byte_end":37332,"line_start":79,"line_end":79,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1903},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":38151,"byte_end":38159,"line_start":111,"line_end":111,"column_start":5,"column_end":13},"name":"Function","qualname":"::types::ExternType::Function","value":"ExternType::Function(FunctionType)","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" This external type is the type of a WebAssembly function.\n","sig":null,"attributes":[{"value":"/ This external type is the type of a WebAssembly function.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":38085,"byte_end":38146,"line_start":110,"line_end":110,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1906},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":38243,"byte_end":38249,"line_start":113,"line_end":113,"column_start":5,"column_end":11},"name":"Global","qualname":"::types::ExternType::Global","value":"ExternType::Global(GlobalType)","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" This external type is the type of a WebAssembly global.\n","sig":null,"attributes":[{"value":"/ This external type is the type of a WebAssembly global.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":38179,"byte_end":38238,"line_start":112,"line_end":112,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1909},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":38330,"byte_end":38335,"line_start":115,"line_end":115,"column_start":5,"column_end":10},"name":"Table","qualname":"::types::ExternType::Table","value":"ExternType::Table(TableType)","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" This external type is the type of a WebAssembly table.\n","sig":null,"attributes":[{"value":"/ This external type is the type of a WebAssembly table.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":38267,"byte_end":38325,"line_start":114,"line_end":114,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1912},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":38416,"byte_end":38422,"line_start":117,"line_end":117,"column_start":5,"column_end":11},"name":"Memory","qualname":"::types::ExternType::Memory","value":"ExternType::Memory(MemoryType)","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" This external type is the type of a WebAssembly memory.\n","sig":null,"attributes":[{"value":"/ This external type is the type of a WebAssembly memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":38352,"byte_end":38411,"line_start":116,"line_end":116,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":38068,"byte_end":38078,"line_start":109,"line_end":109,"column_start":10,"column_end":20},"name":"ExternType","qualname":"::types::ExternType","value":"pub enum ExternType {\n\n    /// This external type is the type of a WebAssembly function.\n    Function(FunctionType),\n\n    /// This external type is the type of a WebAssembly global.\n    Global(GlobalType),\n\n    /// This external type is the type of a WebAssembly table.\n    Table(TableType),\n\n    /// This external type is the type of a WebAssembly memory.\n    Memory(MemoryType),\n}","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1906},{"krate":0,"index":1909},{"krate":0,"index":1912}],"decl_id":null,"docs":" A list of all possible types which can be externally referenced from a\n WebAssembly module.","sig":null,"attributes":[{"value":"/ A list of all possible types which can be externally referenced from a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37722,"byte_end":37796,"line_start":102,"line_end":102,"column_start":1,"column_end":75}},{"value":"/ WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37797,"byte_end":37820,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37821,"byte_end":37824,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This list can be found in [`ImportType`] or [`ExportType`], so these types","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37825,"byte_end":37903,"line_start":105,"line_end":105,"column_start":1,"column_end":79}},{"value":"/ can either be imported or exported.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37904,"byte_end":37943,"line_start":106,"line_end":106,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1978},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41060,"byte_end":41064,"line_start":204,"line_end":204,"column_start":33,"column_end":37},"name":"func","qualname":"<ExternType>::func","value":"pub fn func(&Self) -> Option<&FunctionType>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to return the underlying type of this external type,\n returning `None` if it is a different type.\n","sig":null,"attributes":[{"value":"/ Attempt to return the underlying type of this external type,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40340,"byte_end":40404,"line_start":180,"line_end":180,"column_start":9,"column_end":73}},{"value":"/ returning `None` if it is a different type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40413,"byte_end":40460,"line_start":181,"line_end":181,"column_start":9,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41065,"byte_end":41076,"line_start":204,"line_end":204,"column_start":38,"column_end":49},"name":"unwrap_func","qualname":"<ExternType>::unwrap_func","value":"pub fn unwrap_func(&Self) -> &FunctionType","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying descriptor of this [`ExternType`], panicking\n if it is a different type.","sig":null,"attributes":[{"value":"/ Returns the underlying descriptor of this [`ExternType`], panicking","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40651,"byte_end":40722,"line_start":190,"line_end":190,"column_start":9,"column_end":80}},{"value":"/ if it is a different type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40731,"byte_end":40761,"line_start":191,"line_end":191,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40770,"byte_end":40773,"line_start":192,"line_end":192,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40782,"byte_end":40794,"line_start":193,"line_end":193,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40803,"byte_end":40806,"line_start":194,"line_end":194,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40815,"byte_end":40861,"line_start":195,"line_end":195,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41106,"byte_end":41112,"line_start":205,"line_end":205,"column_start":29,"column_end":35},"name":"global","qualname":"<ExternType>::global","value":"pub fn global(&Self) -> Option<&GlobalType>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to return the underlying type of this external type,\n returning `None` if it is a different type.\n","sig":null,"attributes":[{"value":"/ Attempt to return the underlying type of this external type,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40340,"byte_end":40404,"line_start":180,"line_end":180,"column_start":9,"column_end":73}},{"value":"/ returning `None` if it is a different type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40413,"byte_end":40460,"line_start":181,"line_end":181,"column_start":9,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41113,"byte_end":41126,"line_start":205,"line_end":205,"column_start":36,"column_end":49},"name":"unwrap_global","qualname":"<ExternType>::unwrap_global","value":"pub fn unwrap_global(&Self) -> &GlobalType","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying descriptor of this [`ExternType`], panicking\n if it is a different type.","sig":null,"attributes":[{"value":"/ Returns the underlying descriptor of this [`ExternType`], panicking","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40651,"byte_end":40722,"line_start":190,"line_end":190,"column_start":9,"column_end":80}},{"value":"/ if it is a different type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40731,"byte_end":40761,"line_start":191,"line_end":191,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40770,"byte_end":40773,"line_start":192,"line_end":192,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40782,"byte_end":40794,"line_start":193,"line_end":193,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40803,"byte_end":40806,"line_start":194,"line_end":194,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40815,"byte_end":40861,"line_start":195,"line_end":195,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41154,"byte_end":41159,"line_start":206,"line_end":206,"column_start":27,"column_end":32},"name":"table","qualname":"<ExternType>::table","value":"pub fn table(&Self) -> Option<&TableType>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to return the underlying type of this external type,\n returning `None` if it is a different type.\n","sig":null,"attributes":[{"value":"/ Attempt to return the underlying type of this external type,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40340,"byte_end":40404,"line_start":180,"line_end":180,"column_start":9,"column_end":73}},{"value":"/ returning `None` if it is a different type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40413,"byte_end":40460,"line_start":181,"line_end":181,"column_start":9,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41160,"byte_end":41172,"line_start":206,"line_end":206,"column_start":33,"column_end":45},"name":"unwrap_table","qualname":"<ExternType>::unwrap_table","value":"pub fn unwrap_table(&Self) -> &TableType","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying descriptor of this [`ExternType`], panicking\n if it is a different type.","sig":null,"attributes":[{"value":"/ Returns the underlying descriptor of this [`ExternType`], panicking","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40651,"byte_end":40722,"line_start":190,"line_end":190,"column_start":9,"column_end":80}},{"value":"/ if it is a different type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40731,"byte_end":40761,"line_start":191,"line_end":191,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40770,"byte_end":40773,"line_start":192,"line_end":192,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40782,"byte_end":40794,"line_start":193,"line_end":193,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40803,"byte_end":40806,"line_start":194,"line_end":194,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40815,"byte_end":40861,"line_start":195,"line_end":195,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41202,"byte_end":41208,"line_start":207,"line_end":207,"column_start":29,"column_end":35},"name":"memory","qualname":"<ExternType>::memory","value":"pub fn memory(&Self) -> Option<&MemoryType>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to return the underlying type of this external type,\n returning `None` if it is a different type.\n","sig":null,"attributes":[{"value":"/ Attempt to return the underlying type of this external type,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40340,"byte_end":40404,"line_start":180,"line_end":180,"column_start":9,"column_end":73}},{"value":"/ returning `None` if it is a different type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40413,"byte_end":40460,"line_start":181,"line_end":181,"column_start":9,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41209,"byte_end":41222,"line_start":207,"line_end":207,"column_start":36,"column_end":49},"name":"unwrap_memory","qualname":"<ExternType>::unwrap_memory","value":"pub fn unwrap_memory(&Self) -> &MemoryType","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying descriptor of this [`ExternType`], panicking\n if it is a different type.","sig":null,"attributes":[{"value":"/ Returns the underlying descriptor of this [`ExternType`], panicking","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40651,"byte_end":40722,"line_start":190,"line_end":190,"column_start":9,"column_end":80}},{"value":"/ if it is a different type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40731,"byte_end":40761,"line_start":191,"line_end":191,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40770,"byte_end":40773,"line_start":192,"line_end":192,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40782,"byte_end":40794,"line_start":193,"line_end":193,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40803,"byte_end":40806,"line_start":194,"line_end":194,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40815,"byte_end":40861,"line_start":195,"line_end":195,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41285,"byte_end":41303,"line_start":210,"line_end":210,"column_start":12,"column_end":30},"name":"is_compatible_with","qualname":"<ExternType>::is_compatible_with","value":"pub fn is_compatible_with(&Self, &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if two externs are compatible\n","sig":null,"attributes":[{"value":"/ Check if two externs are compatible","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41234,"byte_end":41273,"line_start":209,"line_end":209,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1986},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42174,"byte_end":42186,"line_start":230,"line_end":230,"column_start":12,"column_end":24},"name":"FunctionType","qualname":"::types::FunctionType","value":"FunctionType {  }","parent":null,"children":[{"krate":0,"index":1987},{"krate":0,"index":1988}],"decl_id":null,"docs":" The signature of a function that is either implemented\n in a Wasm module or exposed to Wasm by the host.","sig":null,"attributes":[{"value":"/ The signature of a function that is either implemented","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41863,"byte_end":41921,"line_start":224,"line_end":224,"column_start":1,"column_end":59}},{"value":"/ in a Wasm module or exposed to Wasm by the host.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41922,"byte_end":41974,"line_start":225,"line_end":225,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41975,"byte_end":41978,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ WebAssembly functions can have 0 or more parameters and results.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":41979,"byte_end":42047,"line_start":227,"line_end":227,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42434,"byte_end":42437,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"new","qualname":"<FunctionType>::new","value":"pub fn new<Params, Returns>(Params, Returns) -> Self where\nParams: Into<Vec<Type>>, Returns: Into<Vec<Type>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new Function Type with the given parameter and return types.\n","sig":null,"attributes":[{"value":"/ Creates a new Function Type with the given parameter and return types.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42348,"byte_end":42422,"line_start":238,"line_end":238,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42758,"byte_end":42764,"line_start":251,"line_end":251,"column_start":12,"column_end":18},"name":"params","qualname":"<FunctionType>::params","value":"pub fn params(&Self) -> &[Type]","parent":null,"children":[],"decl_id":null,"docs":" Parameter types.\n","sig":null,"attributes":[{"value":"/ Parameter types.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42726,"byte_end":42746,"line_start":250,"line_end":250,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42846,"byte_end":42853,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"results","qualname":"<FunctionType>::results","value":"pub fn results(&Self) -> &[Type]","parent":null,"children":[],"decl_id":null,"docs":" Return types.\n","sig":null,"attributes":[{"value":"/ Return types.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42817,"byte_end":42834,"line_start":255,"line_end":255,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2653},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44776,"byte_end":44781,"line_start":317,"line_end":317,"column_start":5,"column_end":10},"name":"Const","qualname":"::types::Mutability::Const","value":"Mutability::Const","parent":{"krate":0,"index":2652},"children":[],"decl_id":null,"docs":" The global is constant and its value does not change\n","sig":null,"attributes":[{"value":"/ The global is constant and its value does not change","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44715,"byte_end":44771,"line_start":316,"line_end":316,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2655},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44840,"byte_end":44843,"line_start":319,"line_end":319,"column_start":5,"column_end":8},"name":"Var","qualname":"::types::Mutability::Var","value":"Mutability::Var","parent":{"krate":0,"index":2652},"children":[],"decl_id":null,"docs":" The value of the global can change over time\n","sig":null,"attributes":[{"value":"/ The value of the global can change over time","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44787,"byte_end":44835,"line_start":318,"line_end":318,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":2652},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44698,"byte_end":44708,"line_start":315,"line_end":315,"column_start":10,"column_end":20},"name":"Mutability","qualname":"::types::Mutability","value":"pub enum Mutability {\n\n    /// The global is constant and its value does not change\n    Const,\n\n    /// The value of the global can change over time\n    Var,\n}","parent":null,"children":[{"krate":0,"index":2653},{"krate":0,"index":2655}],"decl_id":null,"docs":" Indicator of whether a global is mutable or not\n","sig":null,"attributes":[{"value":"/ Indicator of whether a global is mutable or not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44516,"byte_end":44567,"line_start":312,"line_end":312,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44945,"byte_end":44955,"line_start":324,"line_end":324,"column_start":12,"column_end":22},"name":"is_mutable","qualname":"<Mutability>::is_mutable","value":"pub fn is_mutable(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns a boolean indicating if the enum is set to mutable.\n","sig":null,"attributes":[{"value":"/ Returns a boolean indicating if the enum is set to mutable.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44870,"byte_end":44933,"line_start":323,"line_end":323,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2716},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45518,"byte_end":45528,"line_start":351,"line_end":351,"column_start":12,"column_end":22},"name":"GlobalType","qualname":"::types::GlobalType","value":"GlobalType { ty, mutability }","parent":null,"children":[{"krate":0,"index":2717},{"krate":0,"index":2718}],"decl_id":null,"docs":" WebAssembly global.\n","sig":null,"attributes":[{"value":"/ WebAssembly global.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45362,"byte_end":45385,"line_start":348,"line_end":348,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2717},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45591,"byte_end":45593,"line_start":353,"line_end":353,"column_start":9,"column_end":11},"name":"ty","qualname":"::types::GlobalType::ty","value":"types::Type","parent":{"krate":0,"index":2716},"children":[],"decl_id":null,"docs":" The type of the value stored in the global.\n","sig":null,"attributes":[{"value":"/ The type of the value stored in the global.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45535,"byte_end":45582,"line_start":352,"line_end":352,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2718},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45676,"byte_end":45686,"line_start":355,"line_end":355,"column_start":9,"column_end":19},"name":"mutability","qualname":"::types::GlobalType::mutability","value":"types::Mutability","parent":{"krate":0,"index":2716},"children":[],"decl_id":null,"docs":" A flag indicating whether the value may change at runtime.\n","sig":null,"attributes":[{"value":"/ A flag indicating whether the value may change at runtime.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45605,"byte_end":45667,"line_start":354,"line_end":354,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46295,"byte_end":46298,"line_start":376,"line_end":376,"column_start":12,"column_end":15},"name":"new","qualname":"<GlobalType>::new","value":"pub fn new(Type, Mutability) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new Global variable\n # Usage:\n ```\n use wasmer_types::{GlobalType, Type, Mutability, Value};","sig":null,"attributes":[{"value":"/ Create a new Global variable","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45936,"byte_end":45968,"line_start":366,"line_end":366,"column_start":5,"column_end":37}},{"value":"/ # Usage:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45973,"byte_end":45985,"line_start":367,"line_end":367,"column_start":5,"column_end":17}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45990,"byte_end":45997,"line_start":368,"line_end":368,"column_start":5,"column_end":12}},{"value":"/ use wasmer_types::{GlobalType, Type, Mutability, Value};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46002,"byte_end":46062,"line_start":369,"line_end":369,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46067,"byte_end":46070,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ // An I32 constant global","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46075,"byte_end":46104,"line_start":371,"line_end":371,"column_start":5,"column_end":34}},{"value":"/ let global = GlobalType::new(Type::I32, Mutability::Const);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46109,"byte_end":46172,"line_start":372,"line_end":372,"column_start":5,"column_end":68}},{"value":"/ // An I64 mutable global","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46177,"byte_end":46205,"line_start":373,"line_end":373,"column_start":5,"column_end":33}},{"value":"/ let global = GlobalType::new(Type::I64, Mutability::Var);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46210,"byte_end":46271,"line_start":374,"line_end":374,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46276,"byte_end":46283,"line_start":375,"line_end":375,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2784},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46923,"byte_end":46931,"line_start":396,"line_end":396,"column_start":5,"column_end":13},"name":"I32Const","qualname":"::types::GlobalInit::I32Const","value":"GlobalInit::I32Const(i32)","parent":{"krate":0,"index":2783},"children":[],"decl_id":null,"docs":" An `i32.const`.\n","sig":null,"attributes":[{"value":"/ An `i32.const`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46899,"byte_end":46918,"line_start":395,"line_end":395,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2787},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46966,"byte_end":46974,"line_start":398,"line_end":398,"column_start":5,"column_end":13},"name":"I64Const","qualname":"::types::GlobalInit::I64Const","value":"GlobalInit::I64Const(i64)","parent":{"krate":0,"index":2783},"children":[],"decl_id":null,"docs":" An `i64.const`.\n","sig":null,"attributes":[{"value":"/ An `i64.const`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46942,"byte_end":46961,"line_start":397,"line_end":397,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2790},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47009,"byte_end":47017,"line_start":400,"line_end":400,"column_start":5,"column_end":13},"name":"F32Const","qualname":"::types::GlobalInit::F32Const","value":"GlobalInit::F32Const(f32)","parent":{"krate":0,"index":2783},"children":[],"decl_id":null,"docs":" An `f32.const`.\n","sig":null,"attributes":[{"value":"/ An `f32.const`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46985,"byte_end":47004,"line_start":399,"line_end":399,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2793},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47052,"byte_end":47060,"line_start":402,"line_end":402,"column_start":5,"column_end":13},"name":"F64Const","qualname":"::types::GlobalInit::F64Const","value":"GlobalInit::F64Const(f64)","parent":{"krate":0,"index":2783},"children":[],"decl_id":null,"docs":" An `f64.const`.\n","sig":null,"attributes":[{"value":"/ An `f64.const`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47028,"byte_end":47047,"line_start":401,"line_end":401,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2796},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47095,"byte_end":47104,"line_start":404,"line_end":404,"column_start":5,"column_end":14},"name":"V128Const","qualname":"::types::GlobalInit::V128Const","value":"GlobalInit::V128Const(V128)","parent":{"krate":0,"index":2783},"children":[],"decl_id":null,"docs":" A `v128.const`.\n","sig":null,"attributes":[{"value":"/ A `v128.const`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47071,"byte_end":47090,"line_start":403,"line_end":403,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2799},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47158,"byte_end":47167,"line_start":406,"line_end":406,"column_start":5,"column_end":14},"name":"GetGlobal","qualname":"::types::GlobalInit::GetGlobal","value":"GlobalInit::GetGlobal(GlobalIndex)","parent":{"krate":0,"index":2783},"children":[],"decl_id":null,"docs":" A `global.get` of another global.\n","sig":null,"attributes":[{"value":"/ A `global.get` of another global.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47116,"byte_end":47153,"line_start":405,"line_end":405,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2802},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47208,"byte_end":47220,"line_start":408,"line_end":408,"column_start":5,"column_end":17},"name":"RefNullConst","qualname":"::types::GlobalInit::RefNullConst","value":"GlobalInit::RefNullConst","parent":{"krate":0,"index":2783},"children":[],"decl_id":null,"docs":" A `ref.null`.\n","sig":null,"attributes":[{"value":"/ A `ref.null`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47186,"byte_end":47203,"line_start":407,"line_end":407,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2804},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47256,"byte_end":47263,"line_start":410,"line_end":410,"column_start":5,"column_end":12},"name":"RefFunc","qualname":"::types::GlobalInit::RefFunc","value":"GlobalInit::RefFunc(FunctionIndex)","parent":{"krate":0,"index":2783},"children":[],"decl_id":null,"docs":" A `ref.func <index>`.\n","sig":null,"attributes":[{"value":"/ A `ref.func <index>`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47226,"byte_end":47251,"line_start":409,"line_end":409,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2783},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46882,"byte_end":46892,"line_start":394,"line_end":394,"column_start":10,"column_end":20},"name":"GlobalInit","qualname":"::types::GlobalInit","value":"pub enum GlobalInit {\n\n    /// An `i32.const`.\n    I32Const(i32),\n\n    /// An `i64.const`.\n    I64Const(i64),\n\n    /// An `f32.const`.\n    F32Const(f32),\n\n    /// An `f64.const`.\n    F64Const(f64),\n\n    /// A `v128.const`.\n    V128Const(V128),\n\n    /// A `global.get` of another global.\n    GetGlobal(GlobalIndex),\n\n    /// A `ref.null`.\n    RefNullConst,\n\n    /// A `ref.func <index>`.\n    RefFunc(FunctionIndex),\n}","parent":null,"children":[{"krate":0,"index":2784},{"krate":0,"index":2787},{"krate":0,"index":2790},{"krate":0,"index":2793},{"krate":0,"index":2796},{"krate":0,"index":2799},{"krate":0,"index":2802},{"krate":0,"index":2804}],"decl_id":null,"docs":" Globals are initialized via the `const` operators or by referring to another import.\n","sig":null,"attributes":[{"value":"/ Globals are initialized via the `const` operators or by referring to another import.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46684,"byte_end":46772,"line_start":391,"line_end":391,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47362,"byte_end":47372,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"name":"from_value","qualname":"<GlobalInit>::from_value","value":"pub fn from_value<T>(Value<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Get the `GlobalInit` from a given `Value`\n","sig":null,"attributes":[{"value":"/ Get the `GlobalInit` from a given `Value`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47305,"byte_end":47350,"line_start":414,"line_end":414,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47769,"byte_end":47777,"line_start":425,"line_end":425,"column_start":12,"column_end":20},"name":"to_value","qualname":"<GlobalInit>::to_value","value":"pub fn to_value<T>(&Self) -> Value<T>","parent":null,"children":[],"decl_id":null,"docs":" Get the `Value` from the Global init value\n","sig":null,"attributes":[{"value":"/ Get the `Value` from the Global init value","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47711,"byte_end":47757,"line_start":424,"line_end":424,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":2869},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48529,"byte_end":48538,"line_start":445,"line_end":445,"column_start":12,"column_end":21},"name":"TableType","qualname":"::types::TableType","value":"TableType { ty, minimum, maximum }","parent":null,"children":[{"krate":0,"index":2870},{"krate":0,"index":2871},{"krate":0,"index":2872}],"decl_id":null,"docs":" A descriptor for a table in a WebAssembly module.","sig":null,"attributes":[{"value":"/ A descriptor for a table in a WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48125,"byte_end":48178,"line_start":438,"line_end":438,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48179,"byte_end":48182,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ Tables are contiguous chunks of a specific element, typically a `funcref` or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48183,"byte_end":48263,"line_start":440,"line_end":440,"column_start":1,"column_end":81}},{"value":"/ an `externref`. The most common use for tables is a function table through","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48264,"byte_end":48342,"line_start":441,"line_end":441,"column_start":1,"column_end":79}},{"value":"/ which `call_indirect` can invoke other functions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48343,"byte_end":48396,"line_start":442,"line_end":442,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2870},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48607,"byte_end":48609,"line_start":447,"line_end":447,"column_start":9,"column_end":11},"name":"ty","qualname":"::types::TableType::ty","value":"types::Type","parent":{"krate":0,"index":2869},"children":[],"decl_id":null,"docs":" The type of data stored in elements of the table.\n","sig":null,"attributes":[{"value":"/ The type of data stored in elements of the table.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48545,"byte_end":48598,"line_start":446,"line_end":446,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2871},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48678,"byte_end":48685,"line_start":449,"line_end":449,"column_start":9,"column_end":16},"name":"minimum","qualname":"::types::TableType::minimum","value":"u32","parent":{"krate":0,"index":2869},"children":[],"decl_id":null,"docs":" The minimum number of elements in the table.\n","sig":null,"attributes":[{"value":"/ The minimum number of elements in the table.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48621,"byte_end":48669,"line_start":448,"line_end":448,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":2872},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48753,"byte_end":48760,"line_start":451,"line_end":451,"column_start":9,"column_end":16},"name":"maximum","qualname":"::types::TableType::maximum","value":"std::option::Option<u32>","parent":{"krate":0,"index":2869},"children":[],"decl_id":null,"docs":" The maximum number of elements in the table.\n","sig":null,"attributes":[{"value":"/ The maximum number of elements in the table.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48696,"byte_end":48744,"line_start":450,"line_end":450,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48941,"byte_end":48944,"line_start":457,"line_end":457,"column_start":12,"column_end":15},"name":"new","qualname":"<TableType>::new","value":"pub fn new(Type, u32, Option<u32>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new table descriptor which will contain the specified\n `element` and have the `limits` applied to its length.\n","sig":null,"attributes":[{"value":"/ Creates a new table descriptor which will contain the specified","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48799,"byte_end":48866,"line_start":455,"line_end":455,"column_start":5,"column_end":72}},{"value":"/ `element` and have the `limits` applied to its length.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48871,"byte_end":48929,"line_start":456,"line_end":456,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2939},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49707,"byte_end":49717,"line_start":484,"line_end":484,"column_start":12,"column_end":22},"name":"MemoryType","qualname":"::types::MemoryType","value":"MemoryType { minimum, maximum, shared }","parent":null,"children":[{"krate":0,"index":2940},{"krate":0,"index":2941},{"krate":0,"index":2942}],"decl_id":null,"docs":" A descriptor for a WebAssembly memory type.","sig":null,"attributes":[{"value":"/ A descriptor for a WebAssembly memory type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49412,"byte_end":49459,"line_start":478,"line_end":478,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49460,"byte_end":49463,"line_start":479,"line_end":479,"column_start":1,"column_end":4}},{"value":"/ Memories are described in units of pages (64KB) and represent contiguous","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49464,"byte_end":49540,"line_start":480,"line_end":480,"column_start":1,"column_end":77}},{"value":"/ chunks of addressable memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49541,"byte_end":49574,"line_start":481,"line_end":481,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2940},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49779,"byte_end":49786,"line_start":486,"line_end":486,"column_start":9,"column_end":16},"name":"minimum","qualname":"::types::MemoryType::minimum","value":"units::Pages","parent":{"krate":0,"index":2939},"children":[],"decl_id":null,"docs":" The minimum number of pages in the memory.\n","sig":null,"attributes":[{"value":"/ The minimum number of pages in the memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49724,"byte_end":49770,"line_start":485,"line_end":485,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2941},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49854,"byte_end":49861,"line_start":488,"line_end":488,"column_start":9,"column_end":16},"name":"maximum","qualname":"::types::MemoryType::maximum","value":"std::option::Option<units::Pages>","parent":{"krate":0,"index":2939},"children":[],"decl_id":null,"docs":" The maximum number of pages in the memory.\n","sig":null,"attributes":[{"value":"/ The maximum number of pages in the memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49799,"byte_end":49845,"line_start":487,"line_end":487,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2942},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49953,"byte_end":49959,"line_start":490,"line_end":490,"column_start":9,"column_end":15},"name":"shared","qualname":"::types::MemoryType::shared","value":"bool","parent":{"krate":0,"index":2939},"children":[],"decl_id":null,"docs":" Whether the memory may be shared between multiple threads.\n","sig":null,"attributes":[{"value":"/ Whether the memory may be shared between multiple threads.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49882,"byte_end":49944,"line_start":489,"line_end":489,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":50107,"byte_end":50110,"line_start":496,"line_end":496,"column_start":12,"column_end":15},"name":"new","qualname":"<MemoryType>::new","value":"pub fn new<IntoPages>(IntoPages, Option<IntoPages>, bool) -> Self where\nIntoPages: Into<Pages>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new descriptor for a WebAssembly memory given the specified\n limits of the memory.\n","sig":null,"attributes":[{"value":"/ Creates a new descriptor for a WebAssembly memory given the specified","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49992,"byte_end":50065,"line_start":494,"line_end":494,"column_start":5,"column_end":78}},{"value":"/ limits of the memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":50070,"byte_end":50095,"line_start":495,"line_end":495,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":3009},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51197,"byte_end":51207,"line_start":529,"line_end":529,"column_start":12,"column_end":22},"name":"ImportType","qualname":"::types::ImportType","value":"ImportType {  }","parent":null,"children":[{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3013}],"decl_id":null,"docs":" A descriptor for an imported value into a wasm module.","sig":null,"attributes":[{"value":"/ A descriptor for an imported value into a wasm module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":50773,"byte_end":50831,"line_start":521,"line_end":521,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":50832,"byte_end":50835,"line_start":522,"line_end":522,"column_start":1,"column_end":4}},{"value":"/ This type is primarily accessed from the `Module::imports`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":50836,"byte_end":50898,"line_start":523,"line_end":523,"column_start":1,"column_end":63}},{"value":"/ API. Each `ImportType` describes an import into the wasm module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":50899,"byte_end":50966,"line_start":524,"line_end":524,"column_start":1,"column_end":68}},{"value":"/ with the module/name that it's imported from as well as the type","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":50967,"byte_end":51035,"line_start":525,"line_end":525,"column_start":1,"column_end":69}},{"value":"/ of item that's being imported.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51036,"byte_end":51070,"line_start":526,"line_end":526,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51419,"byte_end":51422,"line_start":538,"line_end":538,"column_start":12,"column_end":15},"name":"new","qualname":"<ImportType<T>>::new","value":"pub fn new(&str, &str, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new import descriptor which comes from `module` and `name` and\n is of type `ty`.\n","sig":null,"attributes":[{"value":"/ Creates a new import descriptor which comes from `module` and `name` and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51306,"byte_end":51382,"line_start":536,"line_end":536,"column_start":5,"column_end":81}},{"value":"/ is of type `ty`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51387,"byte_end":51407,"line_start":537,"line_end":537,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51674,"byte_end":51680,"line_start":547,"line_end":547,"column_start":12,"column_end":18},"name":"module","qualname":"<ImportType<T>>::module","value":"pub fn module(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the module name that this import is expected to come from.\n","sig":null,"attributes":[{"value":"/ Returns the module name that this import is expected to come from.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51592,"byte_end":51662,"line_start":546,"line_end":546,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51833,"byte_end":51837,"line_start":553,"line_end":553,"column_start":12,"column_end":16},"name":"name","qualname":"<ImportType<T>>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the field name of the module that this import is expected to\n come from.\n","sig":null,"attributes":[{"value":"/ Returns the field name of the module that this import is expected to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51730,"byte_end":51802,"line_start":551,"line_end":551,"column_start":5,"column_end":77}},{"value":"/ come from.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51807,"byte_end":51821,"line_start":552,"line_end":552,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51942,"byte_end":51944,"line_start":558,"line_end":558,"column_start":12,"column_end":14},"name":"ty","qualname":"<ImportType<T>>::ty","value":"pub fn ty(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns the expected type of this import.\n","sig":null,"attributes":[{"value":"/ Returns the expected type of this import.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51885,"byte_end":51930,"line_start":557,"line_end":557,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":3090},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52526,"byte_end":52536,"line_start":576,"line_end":576,"column_start":12,"column_end":22},"name":"ExportType","qualname":"::types::ExportType","value":"ExportType {  }","parent":null,"children":[{"krate":0,"index":3092},{"krate":0,"index":3093}],"decl_id":null,"docs":" A descriptor for an exported WebAssembly value.","sig":null,"attributes":[{"value":"/ A descriptor for an exported WebAssembly value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52003,"byte_end":52054,"line_start":565,"line_end":565,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52055,"byte_end":52058,"line_start":566,"line_end":566,"column_start":1,"column_end":4}},{"value":"/ This type is primarily accessed from the `Module::exports`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52059,"byte_end":52121,"line_start":567,"line_end":567,"column_start":1,"column_end":63}},{"value":"/ accessor and describes what names are exported from a wasm module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52122,"byte_end":52191,"line_start":568,"line_end":568,"column_start":1,"column_end":70}},{"value":"/ and the type of the item that is exported.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52192,"byte_end":52238,"line_start":569,"line_end":569,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52239,"byte_end":52242,"line_start":570,"line_end":570,"column_start":1,"column_end":4}},{"value":"/ The `<T>` refefers to `ExternType`, however it can also refer to use","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52243,"byte_end":52315,"line_start":571,"line_end":571,"column_start":1,"column_end":73}},{"value":"/ `MemoryType`, `TableType`, `FunctionType` and `GlobalType` for ease of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52316,"byte_end":52390,"line_start":572,"line_end":572,"column_start":1,"column_end":75}},{"value":"/ use.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52391,"byte_end":52399,"line_start":573,"line_end":573,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52723,"byte_end":52726,"line_start":584,"line_end":584,"column_start":12,"column_end":15},"name":"new","qualname":"<ExportType<T>>::new","value":"pub fn new(&str, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new export which is exported with the given `name` and has the\n given `ty`.\n","sig":null,"attributes":[{"value":"/ Creates a new export which is exported with the given `name` and has the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52615,"byte_end":52691,"line_start":582,"line_end":582,"column_start":5,"column_end":81}},{"value":"/ given `ty`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52696,"byte_end":52711,"line_start":583,"line_end":583,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52910,"byte_end":52914,"line_start":592,"line_end":592,"column_start":12,"column_end":16},"name":"name","qualname":"<ExportType<T>>::name","value":"pub fn name(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the name by which this export is known by.\n","sig":null,"attributes":[{"value":"/ Returns the name by which this export is known by.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52844,"byte_end":52898,"line_start":591,"line_end":591,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":53010,"byte_end":53012,"line_start":597,"line_end":597,"column_start":12,"column_end":14},"name":"ty","qualname":"<ExportType<T>>::ty","value":"pub fn ty(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns the type of this export.\n","sig":null,"attributes":[{"value":"/ Returns the type of this export.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52962,"byte_end":52998,"line_start":596,"line_end":596,"column_start":5,"column_end":41}}]},{"kind":"Const","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54735,"byte_end":54749,"line_start":13,"line_end":13,"column_start":11,"column_end":25},"name":"WASM_PAGE_SIZE","qualname":"::units::WASM_PAGE_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" WebAssembly page sizes are fixed to be 64KiB.\n Note: large page support may be added in an opt-in manner in the [future].","sig":null,"attributes":[{"value":"/ WebAssembly page sizes are fixed to be 64KiB.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54513,"byte_end":54562,"line_start":9,"line_end":9,"column_start":1,"column_end":50}},{"value":"/ Note: large page support may be added in an opt-in manner in the [future].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54563,"byte_end":54641,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54642,"byte_end":54645,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [future]: https://webassembly.org/docs/future-features/#large-page-support","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54646,"byte_end":54724,"line_start":12,"line_end":12,"column_start":1,"column_end":79}}]},{"kind":"Const","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54854,"byte_end":54868,"line_start":16,"line_end":16,"column_start":11,"column_end":25},"name":"WASM_MAX_PAGES","qualname":"::units::WASM_MAX_PAGES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The number of pages we can have before we run out of byte index space.\n","sig":null,"attributes":[{"value":"/ The number of pages we can have before we run out of byte index space.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54769,"byte_end":54843,"line_start":15,"line_end":15,"column_start":1,"column_end":75}}]},{"kind":"Const","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54937,"byte_end":54951,"line_start":19,"line_end":19,"column_start":11,"column_end":25},"name":"WASM_MIN_PAGES","qualname":"::units::WASM_MIN_PAGES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The minimum number of pages allowed.\n","sig":null,"attributes":[{"value":"/ The minimum number of pages allowed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54886,"byte_end":54926,"line_start":18,"line_end":18,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":3168},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55175,"byte_end":55180,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"Pages","qualname":"::units::Pages","value":"","parent":null,"children":[],"decl_id":null,"docs":" Units of WebAssembly pages (as specified to be 65,536 bytes).\n","sig":null,"attributes":[{"value":"/ Units of WebAssembly pages (as specified to be 65,536 bytes).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":54967,"byte_end":55032,"line_start":21,"line_end":21,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":3170},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55181,"byte_end":55188,"line_start":24,"line_end":24,"column_start":18,"column_end":25},"name":"0","qualname":"::units::Pages::0","value":"u32","parent":{"krate":0,"index":3168},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55398,"byte_end":55407,"line_start":31,"line_end":31,"column_start":18,"column_end":27},"name":"max_value","qualname":"<Pages>::max_value","value":"pub const fn max_value() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest value that can be represented by the Pages type.","sig":null,"attributes":[{"value":"/ Returns the largest value that can be represented by the Pages type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55209,"byte_end":55281,"line_start":27,"line_end":27,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55286,"byte_end":55289,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ This is defined by the WebAssembly standard as 65,536 pages.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55294,"byte_end":55358,"line_start":29,"line_end":29,"column_start":5,"column_end":69}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55363,"byte_end":55380,"line_start":30,"line_end":30,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55563,"byte_end":55574,"line_start":37,"line_end":37,"column_start":12,"column_end":23},"name":"checked_add","qualname":"<Pages>::checked_add","value":"pub fn checked_add(Self, Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Checked addition. Computes `self + rhs`,\n returning `None` if overflow occurred.\n","sig":null,"attributes":[{"value":"/ Checked addition. Computes `self + rhs`,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55460,"byte_end":55504,"line_start":35,"line_end":35,"column_start":5,"column_end":49}},{"value":"/ returning `None` if overflow occurred.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55509,"byte_end":55551,"line_start":36,"line_end":36,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55861,"byte_end":55866,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Pages>::bytes","value":"pub fn bytes(Self) -> Bytes","parent":null,"children":[],"decl_id":null,"docs":" Calculate number of bytes from pages.\n","sig":null,"attributes":[{"value":"/ Calculate number of bytes from pages.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55808,"byte_end":55849,"line_start":46,"line_end":46,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3217},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56336,"byte_end":56341,"line_start":67,"line_end":67,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::units::Bytes","value":"","parent":null,"children":[],"decl_id":null,"docs":" Units of WebAssembly memory in terms of 8-bit bytes.\n","sig":null,"attributes":[{"value":"/ Units of WebAssembly memory in terms of 8-bit bytes.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56137,"byte_end":56193,"line_start":64,"line_end":64,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":3219},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56342,"byte_end":56351,"line_start":67,"line_end":67,"column_start":18,"column_end":27},"name":"0","qualname":"::units::Bytes::0","value":"usize","parent":{"krate":0,"index":3217},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3266},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":57307,"byte_end":57326,"line_start":116,"line_end":116,"column_start":12,"column_end":31},"name":"PageCountOutOfRange","qualname":"::units::PageCountOutOfRange","value":"","parent":null,"children":[],"decl_id":null,"docs":" The only error that can happen when converting `Bytes` to `Pages`\n","sig":null,"attributes":[{"value":"/ The only error that can happen when converting `Bytes` to `Pages`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":57129,"byte_end":57198,"line_start":113,"line_end":113,"column_start":1,"column_end":70}},{"value":"error(\"Number of pages exceeds uint32 range\")","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":57247,"byte_end":57295,"line_start":115,"line_end":115,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3281},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59740,"byte_end":59743,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"I32","qualname":"::values::Value::I32","value":"Value::I32(i32)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" A 32-bit integer.","sig":null,"attributes":[{"value":"/ A 32-bit integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59618,"byte_end":59639,"line_start":12,"line_end":12,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59644,"byte_end":59647,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ In Wasm integers are sign-agnostic, i.e. this can either be signed or unsigned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59652,"byte_end":59735,"line_start":14,"line_end":14,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3284},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59877,"byte_end":59880,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"I64","qualname":"::values::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" A 64-bit integer.","sig":null,"attributes":[{"value":"/ A 64-bit integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59755,"byte_end":59776,"line_start":17,"line_end":17,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59781,"byte_end":59784,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ In Wasm integers are sign-agnostic, i.e. this can either be signed or unsigned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59789,"byte_end":59872,"line_start":19,"line_end":19,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3287},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59916,"byte_end":59919,"line_start":23,"line_end":23,"column_start":5,"column_end":8},"name":"F32","qualname":"::values::Value::F32","value":"Value::F32(f32)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" A 32-bit float.\n","sig":null,"attributes":[{"value":"/ A 32-bit float.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59892,"byte_end":59911,"line_start":22,"line_end":22,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3290},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59955,"byte_end":59958,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"F64","qualname":"::values::Value::F64","value":"Value::F64(f64)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" A 64-bit float.\n","sig":null,"attributes":[{"value":"/ A 64-bit float.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59931,"byte_end":59950,"line_start":25,"line_end":25,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3293},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60115,"byte_end":60124,"line_start":31,"line_end":31,"column_start":5,"column_end":14},"name":"ExternRef","qualname":"::values::Value::ExternRef","value":"Value::ExternRef(ExternRef)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" An `externref` value which can hold opaque data to the wasm instance itself.","sig":null,"attributes":[{"value":"/ An `externref` value which can hold opaque data to the wasm instance itself.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59970,"byte_end":60050,"line_start":28,"line_end":28,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60055,"byte_end":60058,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Note that this is a nullable value as well.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60063,"byte_end":60110,"line_start":30,"line_end":30,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3296},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60201,"byte_end":60208,"line_start":34,"line_end":34,"column_start":5,"column_end":12},"name":"FuncRef","qualname":"::values::Value::FuncRef","value":"Value::FuncRef(T)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" A first-class reference to a WebAssembly function.\n","sig":null,"attributes":[{"value":"/ A first-class reference to a WebAssembly function.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60142,"byte_end":60196,"line_start":33,"line_end":33,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3299},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60243,"byte_end":60247,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"V128","qualname":"::values::Value::V128","value":"Value::V128(u128)","parent":{"krate":0,"index":3279},"children":[],"decl_id":null,"docs":" A 128-bit number\n","sig":null,"attributes":[{"value":"/ A 128-bit number","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60218,"byte_end":60238,"line_start":36,"line_end":36,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":3279},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59603,"byte_end":59608,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Value","qualname":"::values::Value","value":"pub enum Value<T> {\n\n    /// A 32-bit integer.\n    ///\n    /// In Wasm integers are sign-agnostic, i.e. this can either be signed or unsigned.\n    I32(i32),\n\n    /// A 64-bit integer.\n    ///\n    /// In Wasm integers are sign-agnostic, i.e. this can either be signed or unsigned.\n    I64(i64),\n\n    /// A 32-bit float.\n    F32(f32),\n\n    /// A 64-bit float.\n    F64(f64),\n\n    /// An `externref` value which can hold opaque data to the wasm instance itself.\n    ///\n    /// Note that this is a nullable value as well.\n    ExternRef(ExternRef),\n\n    /// A first-class reference to a WebAssembly function.\n    FuncRef(T),\n\n    /// A 128-bit number\n    V128(u128),\n}","parent":null,"children":[{"krate":0,"index":3281},{"krate":0,"index":3284},{"krate":0,"index":3287},{"krate":0,"index":3290},{"krate":0,"index":3293},{"krate":0,"index":3296},{"krate":0,"index":3299}],"decl_id":null,"docs":" Possible runtime values that a WebAssembly module can either consume or\n produce.\n","sig":null,"attributes":[{"value":"/ Possible runtime values that a WebAssembly module can either consume or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59477,"byte_end":59552,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ produce.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":59553,"byte_end":59565,"line_start":9,"line_end":9,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61094,"byte_end":61098,"line_start":66,"line_end":66,"column_start":12,"column_end":16},"name":"null","qualname":"<Value<T>>::null","value":"pub fn null() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a null `externref` value.\n","sig":null,"attributes":[{"value":"/ Returns a null `externref` value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61045,"byte_end":61082,"line_start":65,"line_end":65,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61233,"byte_end":61235,"line_start":71,"line_end":71,"column_start":12,"column_end":14},"name":"ty","qualname":"<Value<T>>::ty","value":"pub fn ty(&Self) -> Type","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding [`Type`] for this `Value`.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding [`Type`] for this `Value`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61165,"byte_end":61221,"line_start":70,"line_end":70,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61829,"byte_end":61843,"line_start":89,"line_end":89,"column_start":19,"column_end":33},"name":"write_value_to","qualname":"<Value<T>>::write_value_to","value":"pub unsafe fn write_value_to(&Self, *mut i128)","parent":null,"children":[],"decl_id":null,"docs":" Writes it's value to a given pointer","sig":null,"attributes":[{"value":"/ Writes it's value to a given pointer","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61590,"byte_end":61630,"line_start":83,"line_end":83,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61635,"byte_end":61638,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61643,"byte_end":61655,"line_start":85,"line_end":85,"column_start":5,"column_end":17}},{"value":"/ `p` must be:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61660,"byte_end":61676,"line_start":86,"line_end":86,"column_start":5,"column_end":21}},{"value":"/ - Sufficiently aligned for the Rust equivalent of the type in `self`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61681,"byte_end":61753,"line_start":87,"line_end":87,"column_start":5,"column_end":77}},{"value":"/ - Non-null and pointing to valid, mutable memory","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61758,"byte_end":61810,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":62491,"byte_end":62506,"line_start":106,"line_end":106,"column_start":19,"column_end":34},"name":"read_value_from","qualname":"<Value<T>>::read_value_from","value":"pub unsafe fn read_value_from(*const i128, Type) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Gets a `Value` given a pointer and a `Type`","sig":null,"attributes":[{"value":"/ Gets a `Value` given a pointer and a `Type`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":62264,"byte_end":62311,"line_start":100,"line_end":100,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":62316,"byte_end":62319,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":62324,"byte_end":62336,"line_start":102,"line_end":102,"column_start":5,"column_end":17}},{"value":"/ `p` must be:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":62341,"byte_end":62357,"line_start":103,"line_end":103,"column_start":5,"column_end":21}},{"value":"/ - Properly aligned to the specified `ty`'s Rust equivalent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":62362,"byte_end":62424,"line_start":104,"line_end":104,"column_start":5,"column_end":67}},{"value":"/ - Non-null and pointing to valid memory","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":62429,"byte_end":62472,"line_start":105,"line_end":105,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":3311},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63006,"byte_end":63009,"line_start":119,"line_end":119,"column_start":19,"column_end":22},"name":"i32","qualname":"<Value<T>>::i32","value":"pub fn i32(&Self) -> Option<i32>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the underlying value of this `Value`, returning\n `None` if it is not the correct type.\n","sig":null,"attributes":[{"value":"/ Attempt to access the underlying value of this `Value`, returning","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60380,"byte_end":60449,"line_start":42,"line_end":42,"column_start":9,"column_end":78}},{"value":"/ `None` if it is not the correct type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60458,"byte_end":60499,"line_start":43,"line_end":43,"column_start":9,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3312},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63010,"byte_end":63020,"line_start":119,"line_end":119,"column_start":23,"column_end":33},"name":"unwrap_i32","qualname":"<Value<T>>::unwrap_i32","value":"pub fn unwrap_i32(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying value of this `Value`, panicking if it's the\n wrong type.","sig":null,"attributes":[{"value":"/ Returns the underlying value of this `Value`, panicking if it's the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60696,"byte_end":60767,"line_start":52,"line_end":52,"column_start":9,"column_end":80}},{"value":"/ wrong type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60776,"byte_end":60791,"line_start":53,"line_end":53,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60800,"byte_end":60803,"line_start":54,"line_end":54,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60812,"byte_end":60824,"line_start":55,"line_end":55,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60833,"byte_end":60836,"line_start":56,"line_end":56,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60845,"byte_end":60891,"line_start":57,"line_end":57,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3313},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63043,"byte_end":63046,"line_start":120,"line_end":120,"column_start":19,"column_end":22},"name":"i64","qualname":"<Value<T>>::i64","value":"pub fn i64(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the underlying value of this `Value`, returning\n `None` if it is not the correct type.\n","sig":null,"attributes":[{"value":"/ Attempt to access the underlying value of this `Value`, returning","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60380,"byte_end":60449,"line_start":42,"line_end":42,"column_start":9,"column_end":78}},{"value":"/ `None` if it is not the correct type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60458,"byte_end":60499,"line_start":43,"line_end":43,"column_start":9,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3314},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63047,"byte_end":63057,"line_start":120,"line_end":120,"column_start":23,"column_end":33},"name":"unwrap_i64","qualname":"<Value<T>>::unwrap_i64","value":"pub fn unwrap_i64(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying value of this `Value`, panicking if it's the\n wrong type.","sig":null,"attributes":[{"value":"/ Returns the underlying value of this `Value`, panicking if it's the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60696,"byte_end":60767,"line_start":52,"line_end":52,"column_start":9,"column_end":80}},{"value":"/ wrong type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60776,"byte_end":60791,"line_start":53,"line_end":53,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60800,"byte_end":60803,"line_start":54,"line_end":54,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60812,"byte_end":60824,"line_start":55,"line_end":55,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60833,"byte_end":60836,"line_start":56,"line_end":56,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60845,"byte_end":60891,"line_start":57,"line_end":57,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3315},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63080,"byte_end":63083,"line_start":121,"line_end":121,"column_start":19,"column_end":22},"name":"f32","qualname":"<Value<T>>::f32","value":"pub fn f32(&Self) -> Option<f32>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the underlying value of this `Value`, returning\n `None` if it is not the correct type.\n","sig":null,"attributes":[{"value":"/ Attempt to access the underlying value of this `Value`, returning","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60380,"byte_end":60449,"line_start":42,"line_end":42,"column_start":9,"column_end":78}},{"value":"/ `None` if it is not the correct type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60458,"byte_end":60499,"line_start":43,"line_end":43,"column_start":9,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3316},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63084,"byte_end":63094,"line_start":121,"line_end":121,"column_start":23,"column_end":33},"name":"unwrap_f32","qualname":"<Value<T>>::unwrap_f32","value":"pub fn unwrap_f32(&Self) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying value of this `Value`, panicking if it's the\n wrong type.","sig":null,"attributes":[{"value":"/ Returns the underlying value of this `Value`, panicking if it's the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60696,"byte_end":60767,"line_start":52,"line_end":52,"column_start":9,"column_end":80}},{"value":"/ wrong type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60776,"byte_end":60791,"line_start":53,"line_end":53,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60800,"byte_end":60803,"line_start":54,"line_end":54,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60812,"byte_end":60824,"line_start":55,"line_end":55,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60833,"byte_end":60836,"line_start":56,"line_end":56,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60845,"byte_end":60891,"line_start":57,"line_end":57,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3317},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63117,"byte_end":63120,"line_start":122,"line_end":122,"column_start":19,"column_end":22},"name":"f64","qualname":"<Value<T>>::f64","value":"pub fn f64(&Self) -> Option<f64>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the underlying value of this `Value`, returning\n `None` if it is not the correct type.\n","sig":null,"attributes":[{"value":"/ Attempt to access the underlying value of this `Value`, returning","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60380,"byte_end":60449,"line_start":42,"line_end":42,"column_start":9,"column_end":78}},{"value":"/ `None` if it is not the correct type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60458,"byte_end":60499,"line_start":43,"line_end":43,"column_start":9,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3318},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63121,"byte_end":63131,"line_start":122,"line_end":122,"column_start":23,"column_end":33},"name":"unwrap_f64","qualname":"<Value<T>>::unwrap_f64","value":"pub fn unwrap_f64(&Self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying value of this `Value`, panicking if it's the\n wrong type.","sig":null,"attributes":[{"value":"/ Returns the underlying value of this `Value`, panicking if it's the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60696,"byte_end":60767,"line_start":52,"line_end":52,"column_start":9,"column_end":80}},{"value":"/ wrong type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60776,"byte_end":60791,"line_start":53,"line_end":53,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60800,"byte_end":60803,"line_start":54,"line_end":54,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60812,"byte_end":60824,"line_start":55,"line_end":55,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60833,"byte_end":60836,"line_start":56,"line_end":56,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60845,"byte_end":60891,"line_start":57,"line_end":57,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3319},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63157,"byte_end":63164,"line_start":123,"line_end":123,"column_start":22,"column_end":29},"name":"funcref","qualname":"<Value<T>>::funcref","value":"pub fn funcref(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the underlying value of this `Value`, returning\n `None` if it is not the correct type.\n","sig":null,"attributes":[{"value":"/ Attempt to access the underlying value of this `Value`, returning","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60380,"byte_end":60449,"line_start":42,"line_end":42,"column_start":9,"column_end":78}},{"value":"/ `None` if it is not the correct type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60458,"byte_end":60499,"line_start":43,"line_end":43,"column_start":9,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3320},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63165,"byte_end":63179,"line_start":123,"line_end":123,"column_start":30,"column_end":44},"name":"unwrap_funcref","qualname":"<Value<T>>::unwrap_funcref","value":"pub fn unwrap_funcref(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying value of this `Value`, panicking if it's the\n wrong type.","sig":null,"attributes":[{"value":"/ Returns the underlying value of this `Value`, panicking if it's the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60696,"byte_end":60767,"line_start":52,"line_end":52,"column_start":9,"column_end":80}},{"value":"/ wrong type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60776,"byte_end":60791,"line_start":53,"line_end":53,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60800,"byte_end":60803,"line_start":54,"line_end":54,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60812,"byte_end":60824,"line_start":55,"line_end":55,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60833,"byte_end":60836,"line_start":56,"line_end":56,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60845,"byte_end":60891,"line_start":57,"line_end":57,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":3321},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63203,"byte_end":63207,"line_start":124,"line_end":124,"column_start":21,"column_end":25},"name":"v128","qualname":"<Value<T>>::v128","value":"pub fn v128(&Self) -> Option<u128>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the underlying value of this `Value`, returning\n `None` if it is not the correct type.\n","sig":null,"attributes":[{"value":"/ Attempt to access the underlying value of this `Value`, returning","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60380,"byte_end":60449,"line_start":42,"line_end":42,"column_start":9,"column_end":78}},{"value":"/ `None` if it is not the correct type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60458,"byte_end":60499,"line_start":43,"line_end":43,"column_start":9,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":3322},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63208,"byte_end":63219,"line_start":124,"line_end":124,"column_start":26,"column_end":37},"name":"unwrap_v128","qualname":"<Value<T>>::unwrap_v128","value":"pub fn unwrap_v128(&Self) -> u128","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying value of this `Value`, panicking if it's the\n wrong type.","sig":null,"attributes":[{"value":"/ Returns the underlying value of this `Value`, panicking if it's the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60696,"byte_end":60767,"line_start":52,"line_end":52,"column_start":9,"column_end":80}},{"value":"/ wrong type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60776,"byte_end":60791,"line_start":53,"line_end":53,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60800,"byte_end":60803,"line_start":54,"line_end":54,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60812,"byte_end":60824,"line_start":55,"line_end":55,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60833,"byte_end":60836,"line_start":56,"line_end":56,"column_start":9,"column_end":12}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":60845,"byte_end":60891,"line_start":57,"line_end":57,"column_start":9,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63448,"byte_end":63457,"line_start":131,"line_end":131,"column_start":12,"column_end":21},"name":"externref","qualname":"<Value<T>>::externref","value":"pub fn externref(&Self) -> Option<ExternRef>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to access the underlying value of this `Value`, returning\n `None` if it is not the correct type.","sig":null,"attributes":[{"value":"/ Attempt to access the underlying value of this `Value`, returning","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63235,"byte_end":63304,"line_start":127,"line_end":127,"column_start":5,"column_end":74}},{"value":"/ `None` if it is not the correct type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63309,"byte_end":63350,"line_start":128,"line_end":128,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63355,"byte_end":63358,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This will return `Some` for both the `ExternRef` and `FuncRef` types.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63363,"byte_end":63436,"line_start":130,"line_end":130,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63791,"byte_end":63807,"line_start":144,"line_end":144,"column_start":12,"column_end":28},"name":"unwrap_externref","qualname":"<Value<T>>::unwrap_externref","value":"pub fn unwrap_externref(&Self) -> ExternRef","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying value of this `Value`, panicking if it's the\n wrong type.","sig":null,"attributes":[{"value":"/ Returns the underlying value of this `Value`, panicking if it's the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63604,"byte_end":63675,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"/ wrong type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63680,"byte_end":63695,"line_start":139,"line_end":139,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63700,"byte_end":63703,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63708,"byte_end":63720,"line_start":141,"line_end":141,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63725,"byte_end":63728,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Panics if `self` is not of the right type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63733,"byte_end":63779,"line_start":143,"line_end":143,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1788,"byte_end":1794,"line_start":64,"line_end":64,"column_start":9,"column_end":15},"name":"entity","qualname":"::entity","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":453}],"decl_id":null,"docs":" The entity module, with common helpers for Rust structures\n","sig":null,"attributes":[{"value":"/ The entity module, with common helpers for Rust structures","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":1717,"byte_end":1779,"line_start":63,"line_end":63,"column_start":1,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":505},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2737,"byte_end":2744,"line_start":90,"line_end":90,"column_start":11,"column_end":18},"name":"VERSION","qualname":"::VERSION","value":"&str","parent":null,"children":[],"decl_id":null,"docs":" Version number of this crate.\n","sig":null,"attributes":[{"value":"/ Version number of this crate.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\lib.rs","byte_start":2693,"byte_end":2726,"line_start":89,"line_end":89,"column_start":1,"column_end":34}}]}],"impls":[{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3843,"byte_end":3851,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10908,"byte_end":10916,"line_start":228,"line_end":228,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19469,"byte_end":19489,"line_start":58,"line_end":58,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20635,"byte_end":20645,"line_start":42,"line_end":42,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20715,"byte_end":20728,"line_start":46,"line_end":46,"column_start":20,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20911,"byte_end":20921,"line_start":55,"line_end":55,"column_start":13,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":21236,"byte_end":21246,"line_start":69,"line_end":69,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":21547,"byte_end":21557,"line_start":80,"line_end":80,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":21876,"byte_end":21886,"line_start":89,"line_end":89,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28231,"byte_end":28242,"line_start":24,"line_end":24,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28673,"byte_end":28687,"line_start":42,"line_end":42,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29186,"byte_end":29195,"line_start":64,"line_end":64,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29275,"byte_end":29284,"line_start":68,"line_end":68,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29448,"byte_end":29457,"line_start":74,"line_end":74,"column_start":13,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29467,"byte_end":29476,"line_start":76,"line_end":76,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":31863,"byte_end":31872,"line_start":149,"line_end":149,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32277,"byte_end":32287,"line_start":165,"line_end":165,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32549,"byte_end":32556,"line_start":176,"line_end":176,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":34223,"byte_end":34230,"line_start":229,"line_end":229,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":34920,"byte_end":34927,"line_start":255,"line_end":255,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":35036,"byte_end":35043,"line_start":261,"line_end":261,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36149,"byte_end":36153,"line_start":37,"line_end":37,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36621,"byte_end":36625,"line_start":53,"line_end":53,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36923,"byte_end":36927,"line_start":64,"line_end":64,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37424,"byte_end":37428,"line_start":85,"line_end":85,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37520,"byte_end":37524,"line_start":91,"line_end":91,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40998,"byte_end":41008,"line_start":202,"line_end":202,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42329,"byte_end":42341,"line_start":237,"line_end":237,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42927,"byte_end":42939,"line_start":261,"line_end":261,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44424,"byte_end":44436,"line_start":306,"line_end":306,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44853,"byte_end":44863,"line_start":322,"line_end":322,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45021,"byte_end":45031,"line_start":329,"line_end":329,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45919,"byte_end":45929,"line_start":365,"line_end":365,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46406,"byte_end":46416,"line_start":381,"line_end":381,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47288,"byte_end":47298,"line_start":413,"line_end":413,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48783,"byte_end":48792,"line_start":454,"line_end":454,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49115,"byte_end":49124,"line_start":466,"line_end":466,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49975,"byte_end":49985,"line_start":493,"line_end":493,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":50399,"byte_end":50409,"line_start":508,"line_end":508,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51286,"byte_end":51296,"line_start":535,"line_end":535,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52595,"byte_end":52605,"line_start":581,"line_end":581,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55197,"byte_end":55202,"line_start":26,"line_end":26,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55933,"byte_end":55938,"line_start":52,"line_end":52,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56066,"byte_end":56071,"line_start":58,"line_end":58,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56375,"byte_end":56380,"line_start":69,"line_end":69,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56510,"byte_end":56515,"line_start":75,"line_end":75,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56634,"byte_end":56639,"line_start":81,"line_end":81,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56726,"byte_end":56731,"line_start":87,"line_end":87,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56836,"byte_end":56841,"line_start":93,"line_end":93,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56992,"byte_end":56997,"line_start":103,"line_end":103,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":57353,"byte_end":57358,"line_start":118,"line_end":118,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":57633,"byte_end":57638,"line_start":129,"line_end":129,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":57789,"byte_end":57794,"line_start":139,"line_end":139,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61030,"byte_end":61035,"line_start":64,"line_end":64,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":3311},{"krate":0,"index":3312},{"krate":0,"index":3313},{"krate":0,"index":3314},{"krate":0,"index":3315},{"krate":0,"index":3316},{"krate":0,"index":3317},{"krate":0,"index":3318},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3321},{"krate":0,"index":3322},{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63916,"byte_end":63921,"line_start":149,"line_end":149,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":397}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":64449,"byte_end":64454,"line_start":163,"line_end":163,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":64888,"byte_end":64893,"line_start":177,"line_end":177,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":64985,"byte_end":64990,"line_start":183,"line_end":183,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65224,"byte_end":65229,"line_start":190,"line_end":190,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65321,"byte_end":65326,"line_start":196,"line_end":196,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65561,"byte_end":65566,"line_start":203,"line_end":203,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65658,"byte_end":65663,"line_start":209,"line_end":209,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65761,"byte_end":65766,"line_start":215,"line_end":215,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":3843,"byte_end":3851,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\features.rs","byte_start":10908,"byte_end":10916,"line_start":228,"line_end":228,"column_start":18,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":506},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\initializers.rs","byte_start":19469,"byte_end":19489,"line_start":58,"line_end":58,"column_start":6,"column_end":26},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20635,"byte_end":20645,"line_start":42,"line_end":42,"column_start":20,"column_end":30},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":76},"to":{"krate":0,"index":75}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20715,"byte_end":20728,"line_start":46,"line_end":46,"column_start":20,"column_end":33},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":79},"to":{"krate":0,"index":75}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":20911,"byte_end":20921,"line_start":55,"line_end":55,"column_start":13,"column_end":23},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":82},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":21236,"byte_end":21246,"line_start":69,"line_end":69,"column_start":21,"column_end":31},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":82},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":21547,"byte_end":21557,"line_start":80,"line_end":80,"column_start":23,"column_end":33},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\memory_view.rs","byte_start":21876,"byte_end":21886,"line_start":89,"line_end":89,"column_start":23,"column_end":33},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":82},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":22757,"byte_end":22762,"line_start":23,"line_end":23,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":111}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\native.rs","byte_start":27381,"byte_end":27385,"line_start":226,"line_end":226,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":155}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":27927,"byte_end":27930,"line_start":14,"line_end":14,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2574},"to":{"krate":0,"index":170}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28231,"byte_end":28242,"line_start":24,"line_end":24,"column_start":6,"column_end":17},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1748},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":28673,"byte_end":28687,"line_start":42,"line_end":42,"column_start":15,"column_end":29},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":180},"to":{"krate":2,"index":2266}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29186,"byte_end":29195,"line_start":64,"line_end":64,"column_start":21,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1758},"to":{"krate":2,"index":6794}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29275,"byte_end":29284,"line_start":68,"line_end":68,"column_start":20,"column_end":29},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1758},"to":{"krate":2,"index":1770}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29448,"byte_end":29457,"line_start":74,"line_end":74,"column_start":13,"column_end":22},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1758},"to":{"krate":2,"index":1775}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":29467,"byte_end":29476,"line_start":76,"line_end":76,"column_start":6,"column_end":15},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1758},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":31863,"byte_end":31872,"line_start":149,"line_end":149,"column_start":21,"column_end":30},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1758},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32277,"byte_end":32287,"line_start":165,"line_end":165,"column_start":18,"column_end":28},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":203},"to":{"krate":2,"index":2266}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":32549,"byte_end":32556,"line_start":176,"line_end":176,"column_start":18,"column_end":25},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":211},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":34223,"byte_end":34230,"line_start":229,"line_end":229,"column_start":38,"column_end":45},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":211},"to":{"krate":0,"index":170}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":34920,"byte_end":34927,"line_start":255,"line_end":255,"column_start":19,"column_end":26},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":211},"to":{"krate":2,"index":1742}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\ref.rs","byte_start":35036,"byte_end":35043,"line_start":261,"line_end":261,"column_start":36,"column_end":43},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":211},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36149,"byte_end":36153,"line_start":37,"line_end":37,"column_start":6,"column_end":10},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36621,"byte_end":36625,"line_start":53,"line_end":53,"column_start":23,"column_end":27},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1769},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":36923,"byte_end":36927,"line_start":64,"line_end":64,"column_start":6,"column_end":10},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1853},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37424,"byte_end":37428,"line_start":85,"line_end":85,"column_start":25,"column_end":29},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1853},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":37520,"byte_end":37524,"line_start":91,"line_end":91,"column_start":22,"column_end":26},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1853},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":40998,"byte_end":41008,"line_start":202,"line_end":202,"column_start":6,"column_end":16},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42329,"byte_end":42341,"line_start":237,"line_end":237,"column_start":6,"column_end":18},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1986},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":42927,"byte_end":42939,"line_start":261,"line_end":261,"column_start":23,"column_end":35},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1986},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44424,"byte_end":44436,"line_start":306,"line_end":306,"column_start":30,"column_end":42},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1986},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":44853,"byte_end":44863,"line_start":322,"line_end":322,"column_start":6,"column_end":16},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2652},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45021,"byte_end":45031,"line_start":329,"line_end":329,"column_start":21,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2652},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":45919,"byte_end":45929,"line_start":365,"line_end":365,"column_start":6,"column_end":16},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":46406,"byte_end":46416,"line_start":381,"line_end":381,"column_start":23,"column_end":33},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2716},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":47288,"byte_end":47298,"line_start":413,"line_end":413,"column_start":6,"column_end":16},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":48783,"byte_end":48792,"line_start":454,"line_end":454,"column_start":6,"column_end":15},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2869},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49115,"byte_end":49124,"line_start":466,"line_end":466,"column_start":23,"column_end":32},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2869},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":49975,"byte_end":49985,"line_start":493,"line_end":493,"column_start":6,"column_end":16},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2939},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":50399,"byte_end":50409,"line_start":508,"line_end":508,"column_start":23,"column_end":33},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2939},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":51286,"byte_end":51296,"line_start":535,"line_end":535,"column_start":9,"column_end":19},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":3009},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\types.rs","byte_start":52595,"byte_end":52605,"line_start":581,"line_end":581,"column_start":9,"column_end":19},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":3090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55197,"byte_end":55202,"line_start":26,"line_end":26,"column_start":6,"column_end":11},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":3168},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":55933,"byte_end":55938,"line_start":52,"line_end":52,"column_start":21,"column_end":26},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":3168},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56066,"byte_end":56071,"line_start":58,"line_end":58,"column_start":20,"column_end":25},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":3168},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56375,"byte_end":56380,"line_start":69,"line_end":69,"column_start":21,"column_end":26},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":3217},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56510,"byte_end":56515,"line_start":75,"line_end":75,"column_start":22,"column_end":27},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3217},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56634,"byte_end":56639,"line_start":81,"line_end":81,"column_start":22,"column_end":27},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3217},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56726,"byte_end":56731,"line_start":87,"line_end":87,"column_start":20,"column_end":25},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3217},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56836,"byte_end":56841,"line_start":93,"line_end":93,"column_start":20,"column_end":25},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3168},"to":{"krate":2,"index":2115}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":56992,"byte_end":56997,"line_start":103,"line_end":103,"column_start":20,"column_end":25},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3168},"to":{"krate":2,"index":2110}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":57353,"byte_end":57358,"line_start":118,"line_end":118,"column_start":25,"column_end":30},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3168},"to":{"krate":2,"index":1970}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":57633,"byte_end":57638,"line_start":129,"line_end":129,"column_start":20,"column_end":25},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3217},"to":{"krate":2,"index":2115}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\units.rs","byte_start":57789,"byte_end":57794,"line_start":139,"line_end":139,"column_start":20,"column_end":25},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3217},"to":{"krate":2,"index":2110}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":61030,"byte_end":61035,"line_start":64,"line_end":64,"column_start":9,"column_end":14},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":63916,"byte_end":63921,"line_start":149,"line_end":149,"column_start":24,"column_end":29},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":64449,"byte_end":64454,"line_start":163,"line_end":163,"column_start":22,"column_end":27},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3279},"to":{"krate":5,"index":4275}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":64888,"byte_end":64893,"line_start":177,"line_end":177,"column_start":23,"column_end":28},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":64985,"byte_end":64990,"line_start":183,"line_end":183,"column_start":23,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65224,"byte_end":65229,"line_start":190,"line_end":190,"column_start":23,"column_end":28},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65321,"byte_end":65326,"line_start":196,"line_end":196,"column_start":23,"column_end":28},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65561,"byte_end":65566,"line_start":203,"line_end":203,"column_start":23,"column_end":28},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65658,"byte_end":65663,"line_start":209,"line_end":209,"column_start":23,"column_end":28},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wasmer-types-1.0.2\\src\\values.rs","byte_start":65761,"byte_end":65766,"line_start":215,"line_end":215,"column_start":29,"column_end":34},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3279},"to":{"krate":2,"index":1963}}]}