{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2","program":"C:\\Users\\Simon Palmer\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","wast","--edition=2018","C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"wasm-module\"","-C","metadata=c419cc07d5fa8017","-C","extra-filename=-c419cc07d5fa8017","--out-dir","c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","--extern","leb128=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libleb128-c3de27ad85246fd6.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Simon Palmer\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libwast-c419cc07d5fa8017.rmeta"},"prelude":{"crate_id":{"name":"wast","disambiguator":[2836159809512425877,13275389244983212898]},"crate_root":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src","external_crates":[{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2134305066550747688,1377703208702874155]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1322159461575500717,8297198428669169011]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2376346800744392852,12342541482992122530]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14946502858004023242,6637215598610016319]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5305136910335682758,6890491777619641650]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8079093424489733033,9678018066858265018]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8191054904896780843,65190916132359678]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17454577518104061478,8473922882117178851]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14702801963282246562,3385633331338644346]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4483555191844012602,617965746000623535]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6496369475756502088,8603909216288097824]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[8790568169648576788,8899032378407077408]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","num":13,"id":{"name":"leb128","disambiguator":[16768726093417008474,6204905460447709638]}}],"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":0,"byte_end":7428,"line_start":1,"line_end":235,"column_start":1,"column_end":2}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2490,"byte_end":2491,"line_start":59,"line_end":59,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"AssertExpression, V128Pattern, Span, NanPattern","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":0,"byte_end":7428,"line_start":1,"line_end":235,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":211},{"krate":0,"index":446},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":531},{"krate":0,"index":8164},{"krate":0,"index":8166},{"krate":0,"index":8168},{"krate":0,"index":8173},{"krate":0,"index":8175},{"krate":0,"index":8179},{"krate":0,"index":8181},{"krate":0,"index":8188},{"krate":0,"index":649},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":662}],"decl_id":null,"docs":" A crate for low-level parsing of the WebAssembly text formats: WAT and WAST.","sig":null,"attributes":[{"value":"/ A crate for low-level parsing of the WebAssembly text formats: WAT and WAST.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":0,"byte_end":80,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":81,"byte_end":84,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate is intended to be a low-level detail of the `wat` crate,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":85,"byte_end":156,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ providing a low-level parsing API for parsing WebAssembly text format","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":157,"byte_end":230,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ structures. The API provided by this crate is very similar to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":231,"byte_end":296,"line_start":5,"line_end":5,"column_start":1,"column_end":66}},{"value":"/ [`syn`](https://docs.rs/syn) and provides the ability to write customized","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":297,"byte_end":374,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ parsers which may be an extension to the core WebAssembly text format. For","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":375,"byte_end":453,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ more documentation see the [`parser`] module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":454,"byte_end":503,"line_start":8,"line_end":8,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":504,"byte_end":507,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # High-level Overview","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":508,"byte_end":533,"line_start":10,"line_end":10,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":534,"byte_end":537,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This crate provides a few major pieces of functionality","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":538,"byte_end":597,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":598,"byte_end":601,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ * [`lexer`] - this is a raw lexer for the wasm text format. This is not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":602,"byte_end":677,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/   customizable, but if you'd like to iterate over raw tokens this is the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":678,"byte_end":754,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/   module for you. You likely won't use this much.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":755,"byte_end":808,"line_start":16,"line_end":16,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":809,"byte_end":812,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ * [`parser`] - this is the workhorse of this crate. The [`parser`] module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":813,"byte_end":890,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/   provides the [`Parse`][] trait primarily and utilities","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":891,"byte_end":951,"line_start":19,"line_end":19,"column_start":1,"column_end":61}},{"value":"/   around working with a [`Parser`](`parser::Parser`) to parse streams of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":952,"byte_end":1028,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/   tokens.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1029,"byte_end":1042,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1043,"byte_end":1046,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ * [`Module`] - this contains an Abstract Syntax Tree (AST) of the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1047,"byte_end":1116,"line_start":23,"line_end":23,"column_start":1,"column_end":70}},{"value":"/   WebAssembly Text format (WAT) as well as the unofficial WAST format. This","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1117,"byte_end":1196,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/   also has a [`Module::encode`] method to emit a module in its binary form.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1197,"byte_end":1276,"line_start":25,"line_end":25,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1277,"byte_end":1280,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Stability and WebAssembly Features","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1281,"byte_end":1321,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1322,"byte_end":1325,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This crate provides support for many in-progress WebAssembly features such","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1326,"byte_end":1404,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ as reference types, multi-value, etc. Be sure to check out the documentation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1405,"byte_end":1485,"line_start":30,"line_end":30,"column_start":1,"column_end":81}},{"value":"/ of the [`wast` crate](https://docs.rs/wast) for policy information on crate","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1486,"byte_end":1565,"line_start":31,"line_end":31,"column_start":1,"column_end":80}},{"value":"/ stability vs WebAssembly Features. The tl;dr; version is that this crate","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1566,"byte_end":1642,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/ will issue semver-non-breaking releases which will break the parsing of the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1643,"byte_end":1722,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ text format. This crate, unlike `wast`, is expected to have numerous Rust","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1723,"byte_end":1800,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ public API changes, all of which will be accompanied with a semver-breaking","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1801,"byte_end":1880,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ release.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1881,"byte_end":1893,"line_start":36,"line_end":36,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1894,"byte_end":1897,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Compile-time Cargo features","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1898,"byte_end":1931,"line_start":38,"line_end":38,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1932,"byte_end":1935,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ This crate has a `wasm-module` feature which is turned on by default which","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":1936,"byte_end":2014,"line_start":40,"line_end":40,"column_start":1,"column_end":79}},{"value":"/ includes all necessary support to parse full WebAssembly modules. If you","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2015,"byte_end":2091,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ don't need this (for example you're parsing your own s-expression format)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2092,"byte_end":2169,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/ then this feature can be disabled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2170,"byte_end":2208,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2209,"byte_end":2212,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`Parse`]: parser::Parse","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2213,"byte_end":2241,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/ [`LexError`]: lexer::LexError","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2242,"byte_end":2275,"line_start":46,"line_end":46,"column_start":1,"column_end":34}},{"value":"deny(missing_docs, broken_intra_doc_links)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2277,"byte_end":2323,"line_start":48,"line_end":48,"column_start":1,"column_end":47}}]},{"kind":"Type","id":{"krate":0,"index":380},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":113558,"byte_end":113561,"line_start":273,"line_end":273,"column_start":10,"column_end":13},"name":"Key","qualname":"::resolve::types::TypeReference::Key","value":"type Key: TypeKey<'a>;","parent":{"krate":0,"index":378},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":793},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42650,"byte_end":42655,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"Names","qualname":"::resolve::Names","value":"Names {  }","parent":null,"children":[{"krate":0,"index":795}],"decl_id":null,"docs":" Representation of the results of name resolution for a module.","sig":null,"attributes":[{"value":"/ Representation of the results of name resolution for a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42380,"byte_end":42446,"line_start":83,"line_end":83,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42447,"byte_end":42450,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ This structure is returned from the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42451,"byte_end":42490,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ [`Module::resolve`](crate::Module::resolve) function and can be used to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42491,"byte_end":42566,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/ resolve your own name arguments if you have any.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42567,"byte_end":42619,"line_start":87,"line_end":87,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43011,"byte_end":43023,"line_start":99,"line_end":99,"column_start":12,"column_end":24},"name":"resolve_func","qualname":"<Names>::resolve_func","value":"pub fn resolve_func(&Self, &mut Index) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Resolves `idx` within the function namespace.","sig":null,"attributes":[{"value":"/ Resolves `idx` within the function namespace.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42725,"byte_end":42774,"line_start":94,"line_end":94,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42779,"byte_end":42782,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ If `idx` is a `Num`, it is ignored, but if it's an `Id` then it will be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42787,"byte_end":42862,"line_start":96,"line_end":96,"column_start":5,"column_end":80}},{"value":"/ looked up in the function namespace and converted to a `Num`. If the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42867,"byte_end":42939,"line_start":97,"line_end":97,"column_start":5,"column_end":77}},{"value":"/ `Id` is not defined then an error will be returned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42944,"byte_end":42999,"line_start":98,"line_end":98,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43430,"byte_end":43444,"line_start":109,"line_end":109,"column_start":12,"column_end":26},"name":"resolve_memory","qualname":"<Names>::resolve_memory","value":"pub fn resolve_memory(&Self, &mut Index) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Resolves `idx` within the memory namespace.","sig":null,"attributes":[{"value":"/ Resolves `idx` within the memory namespace.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43148,"byte_end":43195,"line_start":104,"line_end":104,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43200,"byte_end":43203,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ If `idx` is a `Num`, it is ignored, but if it's an `Id` then it will be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43208,"byte_end":43283,"line_start":106,"line_end":106,"column_start":5,"column_end":80}},{"value":"/ looked up in the memory namespace and converted to a `Num`. If the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43288,"byte_end":43358,"line_start":107,"line_end":107,"column_start":5,"column_end":75}},{"value":"/ `Id` is not defined then an error will be returned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43363,"byte_end":43418,"line_start":108,"line_end":108,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43851,"byte_end":43864,"line_start":119,"line_end":119,"column_start":12,"column_end":25},"name":"resolve_table","qualname":"<Names>::resolve_table","value":"pub fn resolve_table(&Self, &mut Index) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Resolves `idx` within the table namespace.","sig":null,"attributes":[{"value":"/ Resolves `idx` within the table namespace.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43571,"byte_end":43617,"line_start":114,"line_end":114,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43622,"byte_end":43625,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ If `idx` is a `Num`, it is ignored, but if it's an `Id` then it will be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43630,"byte_end":43705,"line_start":116,"line_end":116,"column_start":5,"column_end":80}},{"value":"/ looked up in the table namespace and converted to a `Num`. If the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43710,"byte_end":43779,"line_start":117,"line_end":117,"column_start":5,"column_end":74}},{"value":"/ `Id` is not defined then an error will be returned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43784,"byte_end":43839,"line_start":118,"line_end":118,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":44272,"byte_end":44286,"line_start":129,"line_end":129,"column_start":12,"column_end":26},"name":"resolve_global","qualname":"<Names>::resolve_global","value":"pub fn resolve_global(&Self, &mut Index) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Resolves `idx` within the global namespace.","sig":null,"attributes":[{"value":"/ Resolves `idx` within the global namespace.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":43990,"byte_end":44037,"line_start":124,"line_end":124,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":44042,"byte_end":44045,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ If `idx` is a `Num`, it is ignored, but if it's an `Id` then it will be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":44050,"byte_end":44125,"line_start":126,"line_end":126,"column_start":5,"column_end":80}},{"value":"/ looked up in the global namespace and converted to a `Num`. If the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":44130,"byte_end":44200,"line_start":127,"line_end":127,"column_start":5,"column_end":75}},{"value":"/ `Id` is not defined then an error will be returned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":44205,"byte_end":44260,"line_start":128,"line_end":128,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":8190},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8394618,"byte_end":8394622,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Span","qualname":"::ast::token::Span","value":"Span {  }","parent":null,"children":[{"krate":0,"index":8191}],"decl_id":null,"docs":" A position in the original source stream, used to render errors.\n","sig":null,"attributes":[{"value":"/ A position in the original source stream, used to render errors.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8394470,"byte_end":8394538,"line_start":8,"line_end":8,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8394747,"byte_end":8394758,"line_start":16,"line_end":16,"column_start":12,"column_end":23},"name":"from_offset","qualname":"<Span>::from_offset","value":"pub fn from_offset(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `Span` from a byte offset in the source file.\n","sig":null,"attributes":[{"value":"/ Construct a `Span` from a byte offset in the source file.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8394674,"byte_end":8394735,"line_start":15,"line_end":15,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395077,"byte_end":8395087,"line_start":24,"line_end":24,"column_start":12,"column_end":22},"name":"linecol_in","qualname":"<Span>::linecol_in","value":"pub fn linecol_in(&Self, &str) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Returns the line/column information of this span within `text`.\n Line and column numbers are 0-indexed. User presentation is typically\n 1-indexed, but 0-indexing is appropriate for internal use with\n iterators and slices.\n","sig":null,"attributes":[{"value":"/ Returns the line/column information of this span within `text`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8394819,"byte_end":8394886,"line_start":20,"line_end":20,"column_start":5,"column_end":72}},{"value":"/ Line and column numbers are 0-indexed. User presentation is typically","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8394891,"byte_end":8394964,"line_start":21,"line_end":21,"column_start":5,"column_end":78}},{"value":"/ 1-indexed, but 0-indexing is appropriate for internal use with","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8394969,"byte_end":8395035,"line_start":22,"line_end":22,"column_start":5,"column_end":71}},{"value":"/ iterators and slices.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395040,"byte_end":8395065,"line_start":23,"line_end":23,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395844,"byte_end":8395846,"line_start":45,"line_end":45,"column_start":12,"column_end":14},"name":"Id","qualname":"::ast::token::Id","value":"Id {  }","parent":null,"children":[{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920}],"decl_id":null,"docs":" An identifier in a WebAssembly module, prefixed by `$` in the textual\n format.","sig":null,"attributes":[{"value":"/ An identifier in a WebAssembly module, prefixed by `$` in the textual","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395605,"byte_end":8395678,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395679,"byte_end":8395690,"line_start":40,"line_end":40,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395691,"byte_end":8395694,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ An identifier is used to symbolically refer to items in a a wasm module,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395695,"byte_end":8395771,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/ typically via the [`Index`] type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395772,"byte_end":8395809,"line_start":43,"line_end":43,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396301,"byte_end":8396305,"line_start":67,"line_end":67,"column_start":12,"column_end":16},"name":"name","qualname":"<Id>::name","value":"pub fn name(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying name of this identifier.","sig":null,"attributes":[{"value":"/ Returns the underlying name of this identifier.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396170,"byte_end":8396221,"line_start":64,"line_end":64,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396226,"byte_end":8396229,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The name returned does not contain the leading `$`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396234,"byte_end":8396289,"line_start":66,"line_end":66,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396425,"byte_end":8396429,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"span","qualname":"<Id>::span","value":"pub fn span(&Self) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Returns span of this identifier in the original source\n","sig":null,"attributes":[{"value":"/ Returns span of this identifier in the original source","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396355,"byte_end":8396413,"line_start":71,"line_end":71,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":928},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398159,"byte_end":8398162,"line_start":139,"line_end":139,"column_start":5,"column_end":8},"name":"Num","qualname":"::ast::token::Index::Num","value":"Index::Num(u32, Span)","parent":{"krate":0,"index":926},"children":[],"decl_id":null,"docs":" A numerical index that this references. The index space this is\n referencing is implicit based on where this [`Index`] is stored.\n","sig":null,"attributes":[{"value":"/ A numerical index that this references. The index space this is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398014,"byte_end":8398081,"line_start":137,"line_end":137,"column_start":5,"column_end":72}},{"value":"/ referencing is implicit based on where this [`Index`] is stored.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398086,"byte_end":8398154,"line_start":138,"line_end":138,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":932},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398316,"byte_end":8398318,"line_start":142,"line_end":142,"column_start":5,"column_end":7},"name":"Id","qualname":"::ast::token::Index::Id","value":"Index::Id(Id)","parent":{"krate":0,"index":926},"children":[],"decl_id":null,"docs":" A human-readable identifier this references. Like `Num`, the namespace\n this references is based on where this is stored.\n","sig":null,"attributes":[{"value":"/ A human-readable identifier this references. Like `Num`, the namespace","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398179,"byte_end":8398253,"line_start":140,"line_end":140,"column_start":5,"column_end":79}},{"value":"/ this references is based on where this is stored.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398258,"byte_end":8398311,"line_start":141,"line_end":141,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":926},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397998,"byte_end":8398003,"line_start":136,"line_end":136,"column_start":10,"column_end":15},"name":"Index","qualname":"::ast::token::Index","value":"pub enum Index<'a> {\n\n    /// A numerical index that this references. The index space this is\n    /// referencing is implicit based on where this [`Index`] is stored.\n    Num(u32, Span),\n\n    /// A human-readable identifier this references. Like `Num`, the namespace\n    /// this references is based on where this is stored.\n    Id(Id),\n}","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":932}],"decl_id":null,"docs":" A reference to another item in a wasm module.","sig":null,"attributes":[{"value":"/ A reference to another item in a wasm module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397590,"byte_end":8397639,"line_start":127,"line_end":127,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397640,"byte_end":8397643,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This type is used for items referring to other items (such as `call $foo`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397644,"byte_end":8397721,"line_start":129,"line_end":129,"column_start":1,"column_end":78}},{"value":"/ referencing function `$foo`). References can be either an index (u32) or an","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397722,"byte_end":8397801,"line_start":130,"line_end":130,"column_start":1,"column_end":80}},{"value":"/ [`Id`] in the textual format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397802,"byte_end":8397835,"line_start":131,"line_end":131,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397836,"byte_end":8397839,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ The emission phase of a module will ensure that `Index::Id` is never used","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397840,"byte_end":8397917,"line_start":133,"line_end":133,"column_start":1,"column_end":78}},{"value":"/ and switch them all to `Index::Num`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397918,"byte_end":8397958,"line_start":134,"line_end":134,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398427,"byte_end":8398431,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"name":"span","qualname":"<Index>::span","value":"pub fn span(&Self) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Returns the source location where this `Index` was defined.\n","sig":null,"attributes":[{"value":"/ Returns the source location where this `Index` was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398352,"byte_end":8398415,"line_start":146,"line_end":146,"column_start":5,"column_end":68}}]},{"kind":"StructVariant","id":{"krate":0,"index":946},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400218,"byte_end":8400223,"line_start":226,"line_end":226,"column_start":5,"column_end":10},"name":"Outer","qualname":"::ast::token::ItemRef::Outer","value":"ItemRef::Outer { kind, module, idx }","parent":{"krate":0,"index":943},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":950},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400305,"byte_end":8400309,"line_start":231,"line_end":231,"column_start":5,"column_end":9},"name":"Item","qualname":"::ast::token::ItemRef::Item","value":"ItemRef::Item { kind, idx, exports }","parent":{"krate":0,"index":943},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400197,"byte_end":8400204,"line_start":225,"line_end":225,"column_start":10,"column_end":17},"name":"ItemRef","qualname":"::ast::token::ItemRef","value":"pub enum ItemRef<'a, K> {\n    Outer {\n        kind: K,\n        module: Index,\n        idx: Index,\n    },\n    Item {\n        kind: K,\n        idx: Index,\n        exports: Vec<&'a str>,\n    },\n}","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":950}],"decl_id":null,"docs":" Parses `(func $foo)`","sig":null,"attributes":[{"value":"/ Parses `(func $foo)`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400016,"byte_end":8400040,"line_start":219,"line_end":219,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400041,"byte_end":8400044,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ Optionally includes export strings for module-linking sugar syntax for alias","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400045,"byte_end":8400125,"line_start":221,"line_end":221,"column_start":1,"column_end":81}},{"value":"/ injection.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400126,"byte_end":8400140,"line_start":222,"line_end":222,"column_start":1,"column_end":15}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400165,"byte_end":8400187,"line_start":224,"line_end":224,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400594,"byte_end":8400606,"line_start":243,"line_end":243,"column_start":12,"column_end":24},"name":"unwrap_index","qualname":"<ItemRef>::unwrap_index","value":"pub fn unwrap_index(&Self) -> &Index","parent":null,"children":[],"decl_id":null,"docs":" Unwraps the underlying `Index` for `ItemRef::Item`.","sig":null,"attributes":[{"value":"/ Unwraps the underlying `Index` for `ItemRef::Item`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400427,"byte_end":8400482,"line_start":239,"line_end":239,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400487,"byte_end":8400490,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Panics if this is `ItemRef::Outer` or if exports haven't been expanded","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400495,"byte_end":8400569,"line_start":241,"line_end":241,"column_start":5,"column_end":79}},{"value":"/ yet.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400574,"byte_end":8400582,"line_start":242,"line_end":242,"column_start":5,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":962},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8401993,"byte_end":8402003,"line_start":290,"line_end":290,"column_start":12,"column_end":22},"name":"IndexOrRef","qualname":"::ast::token::IndexOrRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" Convenience structure to parse `$f` or `(item $f)`.\n","sig":null,"attributes":[{"value":"/ Convenience structure to parse `$f` or `(item $f)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8401902,"byte_end":8401957,"line_start":288,"line_end":288,"column_start":1,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":966},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402011,"byte_end":8402029,"line_start":290,"line_end":290,"column_start":30,"column_end":48},"name":"0","qualname":"::ast::token::IndexOrRef::0","value":"ast::token::ItemRef<'a, K>","parent":{"krate":0,"index":962},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":975},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402804,"byte_end":8402818,"line_start":321,"line_end":321,"column_start":12,"column_end":26},"name":"NameAnnotation","qualname":"::ast::token::NameAnnotation","value":"NameAnnotation { name }","parent":null,"children":[{"krate":0,"index":977}],"decl_id":null,"docs":" An `@name` annotation in source, currently of the form `@name \"foo\"`\n","sig":null,"attributes":[{"value":"/ An `@name` annotation in source, currently of the form `@name \"foo\"`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402679,"byte_end":8402751,"line_start":319,"line_end":319,"column_start":1,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402873,"byte_end":8402877,"line_start":323,"line_end":323,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::token::NameAnnotation::name","value":"&'a str","parent":{"krate":0,"index":975},"children":[],"decl_id":null,"docs":" The name specified for the item\n","sig":null,"attributes":[{"value":"/ The name specified for the item","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402829,"byte_end":8402864,"line_start":322,"line_end":322,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1104},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8416185,"byte_end":8416192,"line_start":681,"line_end":681,"column_start":5,"column_end":12},"name":"Float32","qualname":"::ast::token::Float32","value":"Float32 { bits }","parent":null,"children":[{"krate":0,"index":1105}],"decl_id":null,"docs":" A parsed floating-point type\n","sig":null,"attributes":[{"value":"/ A parsed floating-point type","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8406107,"byte_end":8406139,"line_start":443,"line_end":443,"column_start":9,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1108},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8416295,"byte_end":8416302,"line_start":687,"line_end":687,"column_start":5,"column_end":12},"name":"Float64","qualname":"::ast::token::Float64","value":"Float64 { bits }","parent":null,"children":[{"krate":0,"index":1109}],"decl_id":null,"docs":" A parsed floating-point type\n","sig":null,"attributes":[{"value":"/ A parsed floating-point type","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8406107,"byte_end":8406139,"line_start":443,"line_end":443,"column_start":9,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":910},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8416709,"byte_end":8416715,"line_start":705,"line_end":705,"column_start":12,"column_end":18},"name":"LParen","qualname":"::ast::token::LParen","value":"LParen {  }","parent":null,"children":[{"krate":0,"index":911}],"decl_id":null,"docs":" A convenience type to use with [`Parser::peek`](crate::parser::Parser::peek)\n to see if the next token is an s-expression.\n","sig":null,"attributes":[{"value":"/ A convenience type to use with [`Parser::peek`](crate::parser::Parser::peek)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8416568,"byte_end":8416648,"line_start":703,"line_end":703,"column_start":1,"column_end":81}},{"value":"/ to see if the next token is an s-expression.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8416649,"byte_end":8416697,"line_start":704,"line_end":704,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1794},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418635,"byte_end":8418640,"line_start":6,"line_end":6,"column_start":12,"column_end":17},"name":"Alias","qualname":"::ast::alias::Alias","value":"Alias { span, id, name, source, kind }","parent":null,"children":[{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799},{"krate":0,"index":1800}],"decl_id":null,"docs":" An `alias` statement used to juggle indices with nested modules.\n","sig":null,"attributes":[{"value":"/ An `alias` statement used to juggle indices with nested modules.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418538,"byte_end":8418606,"line_start":4,"line_end":4,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1796},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418695,"byte_end":8418699,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::alias::Alias::span","value":"ast::token::Span","parent":{"krate":0,"index":1794},"children":[],"decl_id":null,"docs":" Where this `alias` was defined.\n","sig":null,"attributes":[{"value":"/ Where this `alias` was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418651,"byte_end":8418686,"line_start":7,"line_end":7,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1797},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418817,"byte_end":8418819,"line_start":11,"line_end":11,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::alias::Alias::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":1794},"children":[],"decl_id":null,"docs":" An identifier that this alias is resolved with (optionally) for name\n resolution.\n","sig":null,"attributes":[{"value":"/ An identifier that this alias is resolved with (optionally) for name","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418716,"byte_end":8418788,"line_start":9,"line_end":9,"column_start":5,"column_end":77}},{"value":"/ resolution.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418793,"byte_end":8418808,"line_start":10,"line_end":10,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":1798},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418927,"byte_end":8418931,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::alias::Alias::name","value":"std::option::Option<ast::token::NameAnnotation<'a>>","parent":{"krate":0,"index":1794},"children":[],"decl_id":null,"docs":" An optional name for this alias stored in the custom `name` section.\n","sig":null,"attributes":[{"value":"/ An optional name for this alias stored in the custom `name` section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418846,"byte_end":8418918,"line_start":12,"line_end":12,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1799},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8419008,"byte_end":8419014,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"name":"source","qualname":"::ast::alias::Alias::source","value":"ast::alias::AliasSource<'a>","parent":{"krate":0,"index":1794},"children":[],"decl_id":null,"docs":" The source of this alias.\n","sig":null,"attributes":[{"value":"/ The source of this alias.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8418970,"byte_end":8418999,"line_start":14,"line_end":14,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":1800},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8419088,"byte_end":8419092,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::alias::Alias::kind","value":"ast::export::ExportKind","parent":{"krate":0,"index":1794},"children":[],"decl_id":null,"docs":" The kind of item that's being aliased.\n","sig":null,"attributes":[{"value":"/ The kind of item that's being aliased.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8419037,"byte_end":8419079,"line_start":16,"line_end":16,"column_start":5,"column_end":47}}]},{"kind":"StructVariant","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8419185,"byte_end":8419199,"line_start":23,"line_end":23,"column_start":5,"column_end":19},"name":"InstanceExport","qualname":"::ast::alias::AliasSource::InstanceExport","value":"AliasSource::InstanceExport { instance, export }","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1809},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8419288,"byte_end":8419293,"line_start":27,"line_end":27,"column_start":5,"column_end":10},"name":"Outer","qualname":"::ast::alias::AliasSource::Outer","value":"AliasSource::Outer { module, index }","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1804},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8419163,"byte_end":8419174,"line_start":22,"line_end":22,"column_start":10,"column_end":21},"name":"AliasSource","qualname":"::ast::alias::AliasSource","value":"pub enum AliasSource<'a> {\n    InstanceExport {\n        instance: ast::ItemRef,\n        export: &'a str,\n    },\n    Outer {\n        /// The index of the module that this reference is referring to.\n        module: ast::Index,\n        /// The index of the item within `module` that this alias is referering\n        /// to.\n        index: ast::Index,\n    },\n}","parent":null,"children":[{"krate":0,"index":1806},{"krate":0,"index":1809}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8419131,"byte_end":8419153,"line_start":21,"line_end":21,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1817},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420938,"byte_end":8420941,"line_start":14,"line_end":14,"column_start":5,"column_end":8},"name":"I32","qualname":"::ast::assert_expr::AssertExpression::I32","value":"AssertExpression::I32(i32)","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420952,"byte_end":8420955,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"I64","qualname":"::ast::assert_expr::AssertExpression::I64","value":"AssertExpression::I64(i64)","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1823},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420966,"byte_end":8420969,"line_start":16,"line_end":16,"column_start":5,"column_end":8},"name":"F32","qualname":"::ast::assert_expr::AssertExpression::F32","value":"AssertExpression::F32(NanPattern<Float32>)","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420996,"byte_end":8420999,"line_start":17,"line_end":17,"column_start":5,"column_end":8},"name":"F64","qualname":"::ast::assert_expr::AssertExpression::F64","value":"AssertExpression::F64(NanPattern<Float64>)","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1829},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8421026,"byte_end":8421030,"line_start":18,"line_end":18,"column_start":5,"column_end":9},"name":"V128","qualname":"::ast::assert_expr::AssertExpression::V128","value":"AssertExpression::V128(V128Pattern)","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1832},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8421050,"byte_end":8421057,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"RefNull","qualname":"::ast::assert_expr::AssertExpression::RefNull","value":"AssertExpression::RefNull(Option<HeapType>)","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1835},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8421085,"byte_end":8421094,"line_start":21,"line_end":21,"column_start":5,"column_end":14},"name":"RefExtern","qualname":"::ast::assert_expr::AssertExpression::RefExtern","value":"AssertExpression::RefExtern(u32)","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1838},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8421105,"byte_end":8421112,"line_start":22,"line_end":22,"column_start":5,"column_end":12},"name":"RefFunc","qualname":"::ast::assert_expr::AssertExpression::RefFunc","value":"AssertExpression::RefFunc(Option<Index>)","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1841},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8421204,"byte_end":8421223,"line_start":25,"line_end":25,"column_start":5,"column_end":24},"name":"LegacyArithmeticNaN","qualname":"::ast::assert_expr::AssertExpression::LegacyArithmeticNaN","value":"AssertExpression::LegacyArithmeticNaN","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1843},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8421293,"byte_end":8421311,"line_start":27,"line_end":27,"column_start":5,"column_end":23},"name":"LegacyCanonicalNaN","qualname":"::ast::assert_expr::AssertExpression::LegacyCanonicalNaN","value":"AssertExpression::LegacyCanonicalNaN","parent":{"krate":0,"index":1815},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1815},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420911,"byte_end":8420927,"line_start":13,"line_end":13,"column_start":10,"column_end":26},"name":"AssertExpression","qualname":"::ast::assert_expr::AssertExpression","value":"pub enum AssertExpression<'a> {\n    I32(i32),\n    I64(i64),\n    F32(NanPattern<Float32>),\n    F64(NanPattern<Float64>),\n    V128(V128Pattern),\n    RefNull(Option<HeapType>),\n    RefExtern(u32),\n    RefFunc(Option<Index>),\n    LegacyArithmeticNaN,\n    LegacyCanonicalNaN,\n}","parent":null,"children":[{"krate":0,"index":1817},{"krate":0,"index":1820},{"krate":0,"index":1823},{"krate":0,"index":1826},{"krate":0,"index":1829},{"krate":0,"index":1832},{"krate":0,"index":1835},{"krate":0,"index":1838},{"krate":0,"index":1841},{"krate":0,"index":1843}],"decl_id":null,"docs":" An expression that is valid inside an `assert_return` directive.","sig":null,"attributes":[{"value":"/ An expression that is valid inside an `assert_return` directive.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420393,"byte_end":8420461,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420462,"byte_end":8420465,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ As of https://github.com/WebAssembly/spec/pull/1104, spec tests may include `assert_return`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420466,"byte_end":8420561,"line_start":6,"line_end":6,"column_start":1,"column_end":96}},{"value":"/ directives that allow NaN patterns (`\"nan:canonical\"`, `\"nan:arithmetic\"`). Parsing an","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420562,"byte_end":8420652,"line_start":7,"line_end":7,"column_start":1,"column_end":91}},{"value":"/ `AssertExpression` means that:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420653,"byte_end":8420687,"line_start":8,"line_end":8,"column_start":1,"column_end":35}},{"value":"/ - only constant values (e.g. `i32.const 4`) are used in the `assert_return` directive","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420688,"byte_end":8420777,"line_start":9,"line_end":9,"column_start":1,"column_end":90}},{"value":"/ - the NaN patterns are allowed (they are not allowed in regular `Expression`s).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420778,"byte_end":8420861,"line_start":10,"line_end":10,"column_start":1,"column_end":84}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8420879,"byte_end":8420901,"line_start":12,"line_end":12,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1850},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8422442,"byte_end":8422454,"line_start":55,"line_end":55,"column_start":5,"column_end":17},"name":"CanonicalNan","qualname":"::ast::assert_expr::NanPattern::CanonicalNan","value":"NanPattern::CanonicalNan","parent":{"krate":0,"index":1848},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1852},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8422460,"byte_end":8422473,"line_start":56,"line_end":56,"column_start":5,"column_end":18},"name":"ArithmeticNan","qualname":"::ast::assert_expr::NanPattern::ArithmeticNan","value":"NanPattern::ArithmeticNan","parent":{"krate":0,"index":1848},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1854},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8422479,"byte_end":8422484,"line_start":57,"line_end":57,"column_start":5,"column_end":10},"name":"Value","qualname":"::ast::assert_expr::NanPattern::Value","value":"NanPattern::Value(T)","parent":{"krate":0,"index":1848},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1848},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8422422,"byte_end":8422432,"line_start":54,"line_end":54,"column_start":10,"column_end":20},"name":"NanPattern","qualname":"::ast::assert_expr::NanPattern","value":"pub enum NanPattern<T> { CanonicalNan, ArithmeticNan, Value(T), }","parent":null,"children":[{"krate":0,"index":1850},{"krate":0,"index":1852},{"krate":0,"index":1854}],"decl_id":null,"docs":" Either a NaN pattern (`nan:canonical`, `nan:arithmetic`) or a value of type `T`.\n","sig":null,"attributes":[{"value":"/ Either a NaN pattern (`nan:canonical`, `nan:arithmetic`) or a value of type `T`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8422277,"byte_end":8422361,"line_start":51,"line_end":51,"column_start":1,"column_end":85}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8422390,"byte_end":8422412,"line_start":53,"line_end":53,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1867},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423300,"byte_end":8423305,"line_start":85,"line_end":85,"column_start":5,"column_end":10},"name":"I8x16","qualname":"::ast::assert_expr::V128Pattern::I8x16","value":"V128Pattern::I8x16([i8; ])","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1871},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423321,"byte_end":8423326,"line_start":86,"line_end":86,"column_start":5,"column_end":10},"name":"I16x8","qualname":"::ast::assert_expr::V128Pattern::I16x8","value":"V128Pattern::I16x8([i16; ])","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1875},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423342,"byte_end":8423347,"line_start":87,"line_end":87,"column_start":5,"column_end":10},"name":"I32x4","qualname":"::ast::assert_expr::V128Pattern::I32x4","value":"V128Pattern::I32x4([i32; ])","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1879},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423363,"byte_end":8423368,"line_start":88,"line_end":88,"column_start":5,"column_end":10},"name":"I64x2","qualname":"::ast::assert_expr::V128Pattern::I64x2","value":"V128Pattern::I64x2([i64; ])","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1883},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423384,"byte_end":8423389,"line_start":89,"line_end":89,"column_start":5,"column_end":10},"name":"F32x4","qualname":"::ast::assert_expr::V128Pattern::F32x4","value":"V128Pattern::F32x4([NanPattern<Float32>; ])","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1887},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423421,"byte_end":8423426,"line_start":90,"line_end":90,"column_start":5,"column_end":10},"name":"F64x2","qualname":"::ast::assert_expr::V128Pattern::F64x2","value":"V128Pattern::F64x2([NanPattern<Float64>; ])","parent":{"krate":0,"index":1866},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1866},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423282,"byte_end":8423293,"line_start":84,"line_end":84,"column_start":10,"column_end":21},"name":"V128Pattern","qualname":"::ast::assert_expr::V128Pattern","value":"pub enum V128Pattern {\n    I8x16([i8; ]),\n    I16x8([i16; ]),\n    I32x4([i32; ]),\n    I64x2([i64; ]),\n    F32x4([NanPattern<Float32>; ]),\n    F64x2([NanPattern<Float64>; ]),\n}","parent":null,"children":[{"krate":0,"index":1867},{"krate":0,"index":1871},{"krate":0,"index":1875},{"krate":0,"index":1879},{"krate":0,"index":1883},{"krate":0,"index":1887}],"decl_id":null,"docs":" A version of `V128Const` that allows `NanPattern`s.","sig":null,"attributes":[{"value":"/ A version of `V128Const` that allows `NanPattern`s.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423011,"byte_end":8423066,"line_start":78,"line_end":78,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423067,"byte_end":8423070,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This implementation is necessary because only float types can include NaN patterns; otherwise","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423071,"byte_end":8423168,"line_start":80,"line_end":80,"column_start":1,"column_end":98}},{"value":"/ it is largely similar to the implementation of `V128Const`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423169,"byte_end":8423232,"line_start":81,"line_end":81,"column_start":1,"column_end":64}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423250,"byte_end":8423272,"line_start":83,"line_end":83,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1893},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425708,"byte_end":8425714,"line_start":6,"line_end":6,"column_start":12,"column_end":18},"name":"Custom","qualname":"::ast::custom::Custom","value":"Custom { span, name, place, data }","parent":null,"children":[{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1898}],"decl_id":null,"docs":" A wasm custom section within a module.\n","sig":null,"attributes":[{"value":"/ A wasm custom section within a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425637,"byte_end":8425679,"line_start":4,"line_end":4,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1895},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425771,"byte_end":8425775,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::custom::Custom::span","value":"ast::token::Span","parent":{"krate":0,"index":1893},"children":[],"decl_id":null,"docs":" Where this `@custom` was defined.\n","sig":null,"attributes":[{"value":"/ Where this `@custom` was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425725,"byte_end":8425762,"line_start":7,"line_end":7,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1896},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425833,"byte_end":8425837,"line_start":11,"line_end":11,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::custom::Custom::name","value":"&'a str","parent":{"krate":0,"index":1893},"children":[],"decl_id":null,"docs":" Name of the custom section.\n","sig":null,"attributes":[{"value":"/ Name of the custom section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425793,"byte_end":8425824,"line_start":10,"line_end":10,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1897},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425907,"byte_end":8425912,"line_start":14,"line_end":14,"column_start":9,"column_end":14},"name":"place","qualname":"::ast::custom::Custom::place","value":"ast::custom::CustomPlace","parent":{"krate":0,"index":1893},"children":[],"decl_id":null,"docs":" Where the custom section is being placed,\n","sig":null,"attributes":[{"value":"/ Where the custom section is being placed,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425853,"byte_end":8425898,"line_start":13,"line_end":13,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":1898},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425976,"byte_end":8425980,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"name":"data","qualname":"::ast::custom::Custom::data","value":"std::vec::Vec<&'a [u8]>","parent":{"krate":0,"index":1893},"children":[],"decl_id":null,"docs":" Payload of this custom section.\n","sig":null,"attributes":[{"value":"/ Payload of this custom section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8425932,"byte_end":8425967,"line_start":16,"line_end":16,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1903},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426214,"byte_end":8426225,"line_start":24,"line_end":24,"column_start":5,"column_end":16},"name":"BeforeFirst","qualname":"::ast::custom::CustomPlace::BeforeFirst","value":"CustomPlace::BeforeFirst","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" This custom section will appear before the first section in the module.\n","sig":null,"attributes":[{"value":"/ This custom section will appear before the first section in the module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426134,"byte_end":8426209,"line_start":23,"line_end":23,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1905},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426303,"byte_end":8426309,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Before","qualname":"::ast::custom::CustomPlace::Before","value":"CustomPlace::Before(CustomPlaceAnchor)","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" This custom section will be placed just before a known section.\n","sig":null,"attributes":[{"value":"/ This custom section will be placed just before a known section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426231,"byte_end":8426298,"line_start":25,"line_end":25,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1908},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426405,"byte_end":8426410,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"name":"After","qualname":"::ast::custom::CustomPlace::After","value":"CustomPlace::After(CustomPlaceAnchor)","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" This custom section will be placed just after a known section.\n","sig":null,"attributes":[{"value":"/ This custom section will be placed just after a known section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426334,"byte_end":8426400,"line_start":27,"line_end":27,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1911},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426513,"byte_end":8426522,"line_start":30,"line_end":30,"column_start":5,"column_end":14},"name":"AfterLast","qualname":"::ast::custom::CustomPlace::AfterLast","value":"CustomPlace::AfterLast","parent":{"krate":0,"index":1902},"children":[],"decl_id":null,"docs":" This custom section will appear after the last section in the module.\n","sig":null,"attributes":[{"value":"/ This custom section will appear after the last section in the module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426435,"byte_end":8426508,"line_start":29,"line_end":29,"column_start":5,"column_end":78}}]},{"kind":"Enum","id":{"krate":0,"index":1902},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426116,"byte_end":8426127,"line_start":22,"line_end":22,"column_start":10,"column_end":21},"name":"CustomPlace","qualname":"::ast::custom::CustomPlace","value":"pub enum CustomPlace {\n\n    /// This custom section will appear before the first section in the module.\n    BeforeFirst,\n\n    /// This custom section will be placed just before a known section.\n    Before(CustomPlaceAnchor),\n\n    /// This custom section will be placed just after a known section.\n    After(CustomPlaceAnchor),\n\n    /// This custom section will appear after the last section in the module.\n    AfterLast,\n}","parent":null,"children":[{"krate":0,"index":1903},{"krate":0,"index":1905},{"krate":0,"index":1908},{"krate":0,"index":1911}],"decl_id":null,"docs":" Possible locations to place a custom section within a module.\n","sig":null,"attributes":[{"value":"/ Possible locations to place a custom section within a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426000,"byte_end":8426065,"line_start":20,"line_end":20,"column_start":1,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1923},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426691,"byte_end":8426695,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Type","qualname":"::ast::custom::CustomPlaceAnchor::Type","value":"CustomPlaceAnchor::Type","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1925},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426701,"byte_end":8426707,"line_start":38,"line_end":38,"column_start":5,"column_end":11},"name":"Import","qualname":"::ast::custom::CustomPlaceAnchor::Import","value":"CustomPlaceAnchor::Import","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1927},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426713,"byte_end":8426719,"line_start":39,"line_end":39,"column_start":5,"column_end":11},"name":"Module","qualname":"::ast::custom::CustomPlaceAnchor::Module","value":"CustomPlaceAnchor::Module","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1929},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426725,"byte_end":8426733,"line_start":40,"line_end":40,"column_start":5,"column_end":13},"name":"Instance","qualname":"::ast::custom::CustomPlaceAnchor::Instance","value":"CustomPlaceAnchor::Instance","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426739,"byte_end":8426744,"line_start":41,"line_end":41,"column_start":5,"column_end":10},"name":"Alias","qualname":"::ast::custom::CustomPlaceAnchor::Alias","value":"CustomPlaceAnchor::Alias","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1933},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426750,"byte_end":8426754,"line_start":42,"line_end":42,"column_start":5,"column_end":9},"name":"Func","qualname":"::ast::custom::CustomPlaceAnchor::Func","value":"CustomPlaceAnchor::Func","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1935},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426760,"byte_end":8426765,"line_start":43,"line_end":43,"column_start":5,"column_end":10},"name":"Table","qualname":"::ast::custom::CustomPlaceAnchor::Table","value":"CustomPlaceAnchor::Table","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1937},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426771,"byte_end":8426777,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Memory","qualname":"::ast::custom::CustomPlaceAnchor::Memory","value":"CustomPlaceAnchor::Memory","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1939},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426783,"byte_end":8426789,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Global","qualname":"::ast::custom::CustomPlaceAnchor::Global","value":"CustomPlaceAnchor::Global","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1941},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426795,"byte_end":8426801,"line_start":46,"line_end":46,"column_start":5,"column_end":11},"name":"Export","qualname":"::ast::custom::CustomPlaceAnchor::Export","value":"CustomPlaceAnchor::Export","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1943},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426807,"byte_end":8426812,"line_start":47,"line_end":47,"column_start":5,"column_end":10},"name":"Start","qualname":"::ast::custom::CustomPlaceAnchor::Start","value":"CustomPlaceAnchor::Start","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426818,"byte_end":8426822,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"Elem","qualname":"::ast::custom::CustomPlaceAnchor::Elem","value":"CustomPlaceAnchor::Elem","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1947},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426828,"byte_end":8426832,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Code","qualname":"::ast::custom::CustomPlaceAnchor::Code","value":"CustomPlaceAnchor::Code","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1949},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426838,"byte_end":8426842,"line_start":50,"line_end":50,"column_start":5,"column_end":9},"name":"Data","qualname":"::ast::custom::CustomPlaceAnchor::Data","value":"CustomPlaceAnchor::Data","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1951},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426848,"byte_end":8426853,"line_start":51,"line_end":51,"column_start":5,"column_end":10},"name":"Event","qualname":"::ast::custom::CustomPlaceAnchor::Event","value":"CustomPlaceAnchor::Event","parent":{"krate":0,"index":1922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1922},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426667,"byte_end":8426684,"line_start":36,"line_end":36,"column_start":10,"column_end":27},"name":"CustomPlaceAnchor","qualname":"::ast::custom::CustomPlaceAnchor","value":"pub enum CustomPlaceAnchor {\n    Type,\n    Import,\n    Module,\n    Instance,\n    Alias,\n    Func,\n    Table,\n    Memory,\n    Global,\n    Export,\n    Start,\n    Elem,\n    Code,\n    Data,\n    Event,\n}","parent":null,"children":[{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1929},{"krate":0,"index":1931},{"krate":0,"index":1933},{"krate":0,"index":1935},{"krate":0,"index":1937},{"krate":0,"index":1939},{"krate":0,"index":1941},{"krate":0,"index":1943},{"krate":0,"index":1945},{"krate":0,"index":1947},{"krate":0,"index":1949},{"krate":0,"index":1951}],"decl_id":null,"docs":" Known sections that custom sections can be placed relative to.\n","sig":null,"attributes":[{"value":"/ Known sections that custom sections can be placed relative to.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426527,"byte_end":8426593,"line_start":33,"line_end":33,"column_start":1,"column_end":67}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426635,"byte_end":8426657,"line_start":35,"line_end":35,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1961},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8430703,"byte_end":8430708,"line_start":6,"line_end":6,"column_start":12,"column_end":17},"name":"Event","qualname":"::ast::event::Event","value":"Event { span, id, exports, ty }","parent":null,"children":[{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966}],"decl_id":null,"docs":" A WebAssembly event directive, part of the exception handling proposal.\n","sig":null,"attributes":[{"value":"/ A WebAssembly event directive, part of the exception handling proposal.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8430599,"byte_end":8430674,"line_start":4,"line_end":4,"column_start":1,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1963},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8430760,"byte_end":8430764,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::event::Event::span","value":"ast::token::Span","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Where this event was defined\n","sig":null,"attributes":[{"value":"/ Where this event was defined","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8430719,"byte_end":8430751,"line_start":7,"line_end":7,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1964},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8430862,"byte_end":8430864,"line_start":10,"line_end":10,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::event::Event::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" An optional name by which to refer to this event in name resolution.\n","sig":null,"attributes":[{"value":"/ An optional name by which to refer to this event in name resolution.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8430781,"byte_end":8430853,"line_start":9,"line_end":9,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1965},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8430946,"byte_end":8430953,"line_start":12,"line_end":12,"column_start":9,"column_end":16},"name":"exports","qualname":"::ast::event::Event::exports","value":"ast::export::InlineExport<'a>","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" Optional export directives for this event.\n","sig":null,"attributes":[{"value":"/ Optional export directives for this event.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8430891,"byte_end":8430937,"line_start":11,"line_end":11,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1966},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431029,"byte_end":8431031,"line_start":14,"line_end":14,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::event::Event::ty","value":"ast::event::EventType<'a>","parent":{"krate":0,"index":1961},"children":[],"decl_id":null,"docs":" The type of event that is defined.\n","sig":null,"attributes":[{"value":"/ The type of event that is defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8430982,"byte_end":8431020,"line_start":13,"line_end":13,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1972},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431301,"byte_end":8431310,"line_start":22,"line_end":22,"column_start":5,"column_end":14},"name":"Exception","qualname":"::ast::event::EventType::Exception","value":"EventType::Exception(ast::TypeUse)","parent":{"krate":0,"index":1970},"children":[],"decl_id":null,"docs":" An exception event, where the payload is the type signature of the event\n (constructor parameters, etc).\n","sig":null,"attributes":[{"value":"/ An exception event, where the payload is the type signature of the event","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431181,"byte_end":8431257,"line_start":20,"line_end":20,"column_start":5,"column_end":81}},{"value":"/ (constructor parameters, etc).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431262,"byte_end":8431296,"line_start":21,"line_end":21,"column_start":5,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":1970},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431161,"byte_end":8431170,"line_start":19,"line_end":19,"column_start":10,"column_end":19},"name":"EventType","qualname":"::ast::event::EventType","value":"pub enum EventType<'a> {\n\n    /// An exception event, where the payload is the type signature of the event\n    /// (constructor parameters, etc).\n    Exception(ast::TypeUse),\n}","parent":null,"children":[{"krate":0,"index":1972}],"decl_id":null,"docs":" Listing of various types of events that can be defined in a wasm module.\n","sig":null,"attributes":[{"value":"/ Listing of various types of events that can be defined in a wasm module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431051,"byte_end":8431127,"line_start":17,"line_end":17,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1981},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432028,"byte_end":8432034,"line_start":6,"line_end":6,"column_start":12,"column_end":18},"name":"Export","qualname":"::ast::export::Export","value":"Export { span, name, index }","parent":null,"children":[{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985}],"decl_id":null,"docs":" A entry in a WebAssembly module's export section.\n","sig":null,"attributes":[{"value":"/ A entry in a WebAssembly module's export section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8431946,"byte_end":8431999,"line_start":4,"line_end":4,"column_start":1,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":1983},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432088,"byte_end":8432092,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::export::Export::span","value":"ast::token::Span","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":" Where this export was defined.\n","sig":null,"attributes":[{"value":"/ Where this export was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432045,"byte_end":8432079,"line_start":7,"line_end":7,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1984},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432162,"byte_end":8432166,"line_start":10,"line_end":10,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::export::Export::name","value":"&'a str","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":" The name of this export from the module.\n","sig":null,"attributes":[{"value":"/ The name of this export from the module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432109,"byte_end":8432153,"line_start":9,"line_end":9,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1985},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432232,"byte_end":8432237,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"name":"index","qualname":"::ast::export::Export::index","value":"ast::token::ItemRef<'a, ast::export::ExportKind>","parent":{"krate":0,"index":1981},"children":[],"decl_id":null,"docs":" What's being exported from the module.\n","sig":null,"attributes":[{"value":"/ What's being exported from the module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432181,"byte_end":8432223,"line_start":11,"line_end":11,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1990},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432484,"byte_end":8432488,"line_start":20,"line_end":20,"column_start":5,"column_end":9},"name":"Func","qualname":"::ast::export::ExportKind::Func","value":"ExportKind::Func","parent":{"krate":0,"index":1989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1992},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432494,"byte_end":8432499,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"Table","qualname":"::ast::export::ExportKind::Table","value":"ExportKind::Table","parent":{"krate":0,"index":1989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1994},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432505,"byte_end":8432511,"line_start":22,"line_end":22,"column_start":5,"column_end":11},"name":"Memory","qualname":"::ast::export::ExportKind::Memory","value":"ExportKind::Memory","parent":{"krate":0,"index":1989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1996},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432517,"byte_end":8432523,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Global","qualname":"::ast::export::ExportKind::Global","value":"ExportKind::Global","parent":{"krate":0,"index":1989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1998},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432529,"byte_end":8432534,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Event","qualname":"::ast::export::ExportKind::Event","value":"ExportKind::Event","parent":{"krate":0,"index":1989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2000},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432540,"byte_end":8432546,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Module","qualname":"::ast::export::ExportKind::Module","value":"ExportKind::Module","parent":{"krate":0,"index":1989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2002},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432552,"byte_end":8432560,"line_start":26,"line_end":26,"column_start":5,"column_end":13},"name":"Instance","qualname":"::ast::export::ExportKind::Instance","value":"ExportKind::Instance","parent":{"krate":0,"index":1989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2004},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432566,"byte_end":8432570,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"Type","qualname":"::ast::export::ExportKind::Type","value":"ExportKind::Type","parent":{"krate":0,"index":1989},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1989},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432467,"byte_end":8432477,"line_start":19,"line_end":19,"column_start":10,"column_end":20},"name":"ExportKind","qualname":"::ast::export::ExportKind","value":"pub enum ExportKind {\n    Func,\n    Table,\n    Memory,\n    Global,\n    Event,\n    Module,\n    Instance,\n    Type,\n}","parent":null,"children":[{"krate":0,"index":1990},{"krate":0,"index":1992},{"krate":0,"index":1994},{"krate":0,"index":1996},{"krate":0,"index":1998},{"krate":0,"index":2000},{"krate":0,"index":2002},{"krate":0,"index":2004}],"decl_id":null,"docs":" Different kinds of elements that can be exported from a WebAssembly module,\n contained in an [`Export`].\n","sig":null,"attributes":[{"value":"/ Different kinds of elements that can be exported from a WebAssembly module,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432272,"byte_end":8432351,"line_start":15,"line_end":15,"column_start":1,"column_end":80}},{"value":"/ contained in an [`Export`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432352,"byte_end":8432383,"line_start":16,"line_end":16,"column_start":1,"column_end":32}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432435,"byte_end":8432457,"line_start":18,"line_end":18,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":2052},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8434663,"byte_end":8434675,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"name":"InlineExport","qualname":"::ast::export::InlineExport","value":"InlineExport { names }","parent":null,"children":[{"krate":0,"index":2054}],"decl_id":null,"docs":" A listing of inline `(export \"foo\")` statements on a WebAssembly item in\n its textual format.\n","sig":null,"attributes":[{"value":"/ A listing of inline `(export \"foo\")` statements on a WebAssembly item in","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8434534,"byte_end":8434610,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ its textual format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8434611,"byte_end":8434634,"line_start":101,"line_end":101,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2054},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8434744,"byte_end":8434749,"line_start":105,"line_end":105,"column_start":9,"column_end":14},"name":"names","qualname":"::ast::export::InlineExport::names","value":"std::vec::Vec<&'a str>","parent":{"krate":0,"index":2052},"children":[],"decl_id":null,"docs":" The extra names to export an item as, if any.\n","sig":null,"attributes":[{"value":"/ The extra names to export an item as, if any.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8434686,"byte_end":8434735,"line_start":104,"line_end":104,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2058},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8436164,"byte_end":8436174,"line_start":12,"line_end":12,"column_start":12,"column_end":22},"name":"Expression","qualname":"::ast::expr::Expression","value":"Expression { instrs }","parent":null,"children":[{"krate":0,"index":2060}],"decl_id":null,"docs":" An expression, or a list of instructions, in the WebAssembly text format.","sig":null,"attributes":[{"value":"/ An expression, or a list of instructions, in the WebAssembly text format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8435800,"byte_end":8435877,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8435878,"byte_end":8435881,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This expression type will parse s-expression-folded instructions into a flat","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8435882,"byte_end":8435962,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ list of instructions for emission later on. The implicit `end` instruction","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8435963,"byte_end":8436041,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ at the end of an expression is not included in the `instrs` field.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8436042,"byte_end":8436112,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8436130,"byte_end":8436152,"line_start":11,"line_end":11,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2060},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8436189,"byte_end":8436195,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"name":"instrs","qualname":"::ast::expr::Expression::instrs","value":"std::boxed::Box<[ast::expr::Instruction<'a>]>","parent":{"krate":0,"index":2058},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5585},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489551,"byte_end":8489560,"line_start":1147,"line_end":1147,"column_start":12,"column_end":21},"name":"BlockType","qualname":"::ast::expr::BlockType","value":"BlockType { label, ty }","parent":null,"children":[{"krate":0,"index":5587},{"krate":0,"index":5588}],"decl_id":null,"docs":" Extra information associated with block-related instructions.","sig":null,"attributes":[{"value":"/ Extra information associated with block-related instructions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489336,"byte_end":8489401,"line_start":1141,"line_end":1141,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489402,"byte_end":8489405,"line_start":1142,"line_end":1142,"column_start":1,"column_end":4}},{"value":"/ This is used to label blocks and also annotate what types are expected for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489406,"byte_end":8489484,"line_start":1143,"line_end":1143,"column_start":1,"column_end":79}},{"value":"/ the block.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489485,"byte_end":8489499,"line_start":1144,"line_end":1144,"column_start":1,"column_end":15}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489517,"byte_end":8489539,"line_start":1146,"line_end":1146,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":5587},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489575,"byte_end":8489580,"line_start":1148,"line_end":1148,"column_start":9,"column_end":14},"name":"label","qualname":"::ast::expr::BlockType::label","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5585},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5588},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489611,"byte_end":8489613,"line_start":1149,"line_end":1149,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::expr::BlockType::ty","value":"ast::types::TypeUse<'a, ast::types::FunctionType<'a>>","parent":{"krate":0,"index":5585},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5592},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490068,"byte_end":8490080,"line_start":1166,"line_end":1166,"column_start":12,"column_end":24},"name":"FuncBindType","qualname":"::ast::expr::FuncBindType","value":"FuncBindType { ty }","parent":null,"children":[{"krate":0,"index":5594}],"decl_id":null,"docs":" Extra information associated with the func.bind instruction.\n","sig":null,"attributes":[{"value":"/ Extra information associated with the func.bind instruction.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489952,"byte_end":8490016,"line_start":1163,"line_end":1163,"column_start":1,"column_end":65}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490034,"byte_end":8490056,"line_start":1165,"line_end":1165,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":5594},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490095,"byte_end":8490097,"line_start":1167,"line_end":1167,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::expr::FuncBindType::ty","value":"ast::types::TypeUse<'a, ast::types::FunctionType<'a>>","parent":{"krate":0,"index":5592},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5598},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490516,"byte_end":8490523,"line_start":1183,"line_end":1183,"column_start":12,"column_end":19},"name":"LetType","qualname":"::ast::expr::LetType","value":"LetType { block, locals }","parent":null,"children":[{"krate":0,"index":5600},{"krate":0,"index":5601}],"decl_id":null,"docs":" Extra information associated with the let instruction.\n","sig":null,"attributes":[{"value":"/ Extra information associated with the let instruction.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490406,"byte_end":8490464,"line_start":1180,"line_end":1180,"column_start":1,"column_end":59}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490482,"byte_end":8490504,"line_start":1182,"line_end":1182,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":5600},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490538,"byte_end":8490543,"line_start":1184,"line_end":1184,"column_start":9,"column_end":14},"name":"block","qualname":"::ast::expr::LetType::block","value":"ast::expr::BlockType<'a>","parent":{"krate":0,"index":5598},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5601},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490568,"byte_end":8490574,"line_start":1185,"line_end":1185,"column_start":9,"column_end":15},"name":"locals","qualname":"::ast::expr::LetType::locals","value":"std::vec::Vec<ast::func::Local<'a>>","parent":{"krate":0,"index":5598},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5605},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490940,"byte_end":8490954,"line_start":1200,"line_end":1200,"column_start":12,"column_end":26},"name":"BrTableIndices","qualname":"::ast::expr::BrTableIndices","value":"BrTableIndices { labels, default }","parent":null,"children":[{"krate":0,"index":5607},{"krate":0,"index":5608}],"decl_id":null,"docs":" Extra information associated with the `br_table` instruction.\n","sig":null,"attributes":[{"value":"/ Extra information associated with the `br_table` instruction.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490823,"byte_end":8490888,"line_start":1197,"line_end":1197,"column_start":1,"column_end":66}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490889,"byte_end":8490911,"line_start":1198,"line_end":1198,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":5607},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490969,"byte_end":8490975,"line_start":1201,"line_end":1201,"column_start":9,"column_end":15},"name":"labels","qualname":"::ast::expr::BrTableIndices::labels","value":"std::vec::Vec<ast::token::Index<'a>>","parent":{"krate":0,"index":5605},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5608},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8491006,"byte_end":8491013,"line_start":1202,"line_end":1202,"column_start":9,"column_end":16},"name":"default","qualname":"::ast::expr::BrTableIndices::default","value":"ast::token::Index<'a>","parent":{"krate":0,"index":5605},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5612},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8491499,"byte_end":8491506,"line_start":1219,"line_end":1219,"column_start":12,"column_end":19},"name":"LaneArg","qualname":"::ast::expr::LaneArg","value":"LaneArg { lane }","parent":null,"children":[{"krate":0,"index":5613}],"decl_id":null,"docs":" Payload for lane-related instructions. Unsigned with no + prefix.\n","sig":null,"attributes":[{"value":"/ Payload for lane-related instructions. Unsigned with no + prefix.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8491401,"byte_end":8491470,"line_start":1217,"line_end":1217,"column_start":1,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":5613},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8491544,"byte_end":8491548,"line_start":1221,"line_end":1221,"column_start":9,"column_end":13},"name":"lane","qualname":"::ast::expr::LaneArg::lane","value":"u8","parent":{"krate":0,"index":5612},"children":[],"decl_id":null,"docs":" The lane argument.\n","sig":null,"attributes":[{"value":"/ The lane argument.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8491513,"byte_end":8491535,"line_start":1220,"line_end":1220,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5616},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492344,"byte_end":8492350,"line_start":1247,"line_end":1247,"column_start":12,"column_end":18},"name":"MemArg","qualname":"::ast::expr::MemArg","value":"MemArg { align, offset, memory }","parent":null,"children":[{"krate":0,"index":5618},{"krate":0,"index":5619},{"krate":0,"index":5620}],"decl_id":null,"docs":" Payload for memory-related instructions indicating offset/alignment of\n memory accesses.\n","sig":null,"attributes":[{"value":"/ Payload for memory-related instructions indicating offset/alignment of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492220,"byte_end":8492294,"line_start":1244,"line_end":1244,"column_start":1,"column_end":75}},{"value":"/ memory accesses.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492295,"byte_end":8492315,"line_start":1245,"line_end":1245,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":5618},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492509,"byte_end":8492514,"line_start":1252,"line_end":1252,"column_start":9,"column_end":14},"name":"align","qualname":"::ast::expr::MemArg::align","value":"u32","parent":{"krate":0,"index":5616},"children":[],"decl_id":null,"docs":" The alignment of this access.","sig":null,"attributes":[{"value":"/ The alignment of this access.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492361,"byte_end":8492394,"line_start":1248,"line_end":1248,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492399,"byte_end":8492402,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ This is not stored as a log, this is the actual alignment (e.g. 1, 2, 4,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492407,"byte_end":8492483,"line_start":1250,"line_end":1250,"column_start":5,"column_end":81}},{"value":"/ 8, etc).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492488,"byte_end":8492500,"line_start":1251,"line_end":1251,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":5619},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492574,"byte_end":8492580,"line_start":1254,"line_end":1254,"column_start":9,"column_end":15},"name":"offset","qualname":"::ast::expr::MemArg::offset","value":"u32","parent":{"krate":0,"index":5616},"children":[],"decl_id":null,"docs":" The offset, in bytes of this access.\n","sig":null,"attributes":[{"value":"/ The offset, in bytes of this access.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492525,"byte_end":8492565,"line_start":1253,"line_end":1253,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5620},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492636,"byte_end":8492642,"line_start":1256,"line_end":1256,"column_start":9,"column_end":15},"name":"memory","qualname":"::ast::expr::MemArg::memory","value":"ast::token::ItemRef<'a, ast::kw::memory>","parent":{"krate":0,"index":5616},"children":[],"decl_id":null,"docs":" The memory index we're accessing\n","sig":null,"attributes":[{"value":"/ The memory index we're accessing","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492591,"byte_end":8492627,"line_start":1255,"line_end":1255,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5624},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8494775,"byte_end":8494790,"line_start":1319,"line_end":1319,"column_start":12,"column_end":27},"name":"LoadOrStoreLane","qualname":"::ast::expr::LoadOrStoreLane","value":"LoadOrStoreLane { memarg, lane }","parent":null,"children":[{"krate":0,"index":5626},{"krate":0,"index":5627}],"decl_id":null,"docs":" Extra data associated with the `loadN_lane` and `storeN_lane` instructions.\n","sig":null,"attributes":[{"value":"/ Extra data associated with the `loadN_lane` and `storeN_lane` instructions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8494667,"byte_end":8494746,"line_start":1317,"line_end":1317,"column_start":1,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":5626},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8494855,"byte_end":8494861,"line_start":1321,"line_end":1321,"column_start":9,"column_end":15},"name":"memarg","qualname":"::ast::expr::LoadOrStoreLane::memarg","value":"ast::expr::MemArg<'a>","parent":{"krate":0,"index":5624},"children":[],"decl_id":null,"docs":" The memory argument for this instruction.\n","sig":null,"attributes":[{"value":"/ The memory argument for this instruction.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8494801,"byte_end":8494846,"line_start":1320,"line_end":1320,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":5627},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8494931,"byte_end":8494935,"line_start":1323,"line_end":1323,"column_start":9,"column_end":13},"name":"lane","qualname":"::ast::expr::LoadOrStoreLane::lane","value":"ast::expr::LaneArg","parent":{"krate":0,"index":5624},"children":[],"decl_id":null,"docs":" The lane argument for this instruction.\n","sig":null,"attributes":[{"value":"/ The lane argument for this instruction.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8494879,"byte_end":8494922,"line_start":1322,"line_end":1322,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":5631},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8495294,"byte_end":8495306,"line_start":1337,"line_end":1337,"column_start":12,"column_end":24},"name":"CallIndirect","qualname":"::ast::expr::CallIndirect","value":"CallIndirect { table, ty }","parent":null,"children":[{"krate":0,"index":5633},{"krate":0,"index":5634}],"decl_id":null,"docs":" Extra data associated with the `call_indirect` instruction.\n","sig":null,"attributes":[{"value":"/ Extra data associated with the `call_indirect` instruction.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8495202,"byte_end":8495265,"line_start":1335,"line_end":1335,"column_start":1,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":5633},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8495379,"byte_end":8495384,"line_start":1339,"line_end":1339,"column_start":9,"column_end":14},"name":"table","qualname":"::ast::expr::CallIndirect::table","value":"ast::token::ItemRef<'a, ast::kw::table>","parent":{"krate":0,"index":5631},"children":[],"decl_id":null,"docs":" The table that this call is going to be indexing.\n","sig":null,"attributes":[{"value":"/ The table that this call is going to be indexing.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8495317,"byte_end":8495370,"line_start":1338,"line_end":1338,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":5634},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8495499,"byte_end":8495501,"line_start":1341,"line_end":1341,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::expr::CallIndirect::ty","value":"ast::types::TypeUse<'a, ast::types::FunctionType<'a>>","parent":{"krate":0,"index":5631},"children":[],"decl_id":null,"docs":" Type type signature that this `call_indirect` instruction is using.\n","sig":null,"attributes":[{"value":"/ Type type signature that this `call_indirect` instruction is using.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8495419,"byte_end":8495490,"line_start":1340,"line_end":1340,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":5638},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8496360,"byte_end":8496369,"line_start":1364,"line_end":1364,"column_start":12,"column_end":21},"name":"TableInit","qualname":"::ast::expr::TableInit","value":"TableInit { table, elem }","parent":null,"children":[{"krate":0,"index":5640},{"krate":0,"index":5641}],"decl_id":null,"docs":" Extra data associated with the `table.init` instruction\n","sig":null,"attributes":[{"value":"/ Extra data associated with the `table.init` instruction","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8496272,"byte_end":8496331,"line_start":1362,"line_end":1362,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":5640},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8496435,"byte_end":8496440,"line_start":1366,"line_end":1366,"column_start":9,"column_end":14},"name":"table","qualname":"::ast::expr::TableInit::table","value":"ast::token::ItemRef<'a, ast::kw::table>","parent":{"krate":0,"index":5638},"children":[],"decl_id":null,"docs":" The index of the table we're copying into.\n","sig":null,"attributes":[{"value":"/ The index of the table we're copying into.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8496380,"byte_end":8496426,"line_start":1365,"line_end":1365,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":5641},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8496548,"byte_end":8496552,"line_start":1368,"line_end":1368,"column_start":9,"column_end":13},"name":"elem","qualname":"::ast::expr::TableInit::elem","value":"ast::token::Index<'a>","parent":{"krate":0,"index":5638},"children":[],"decl_id":null,"docs":" The index of the element segment we're copying into a table.\n","sig":null,"attributes":[{"value":"/ The index of the element segment we're copying into a table.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8496475,"byte_end":8496539,"line_start":1367,"line_end":1367,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":5645},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497173,"byte_end":8497182,"line_start":1387,"line_end":1387,"column_start":12,"column_end":21},"name":"TableCopy","qualname":"::ast::expr::TableCopy","value":"TableCopy { dst, src }","parent":null,"children":[{"krate":0,"index":5647},{"krate":0,"index":5648}],"decl_id":null,"docs":" Extra data associated with the `table.copy` instruction.\n","sig":null,"attributes":[{"value":"/ Extra data associated with the `table.copy` instruction.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497084,"byte_end":8497144,"line_start":1385,"line_end":1385,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5647},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497254,"byte_end":8497257,"line_start":1389,"line_end":1389,"column_start":9,"column_end":12},"name":"dst","qualname":"::ast::expr::TableCopy::dst","value":"ast::token::ItemRef<'a, ast::kw::table>","parent":{"krate":0,"index":5645},"children":[],"decl_id":null,"docs":" The index of the destination table to copy into.\n","sig":null,"attributes":[{"value":"/ The index of the destination table to copy into.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497193,"byte_end":8497245,"line_start":1388,"line_end":1388,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":5648},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497348,"byte_end":8497351,"line_start":1391,"line_end":1391,"column_start":9,"column_end":12},"name":"src","qualname":"::ast::expr::TableCopy::src","value":"ast::token::ItemRef<'a, ast::kw::table>","parent":{"krate":0,"index":5645},"children":[],"decl_id":null,"docs":" The index of the source table to copy from.\n","sig":null,"attributes":[{"value":"/ The index of the source table to copy from.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497292,"byte_end":8497339,"line_start":1390,"line_end":1390,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5652},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497920,"byte_end":8497928,"line_start":1409,"line_end":1409,"column_start":12,"column_end":20},"name":"TableArg","qualname":"::ast::expr::TableArg","value":"TableArg { dst }","parent":null,"children":[{"krate":0,"index":5654}],"decl_id":null,"docs":" Extra data associated with unary table instructions.\n","sig":null,"attributes":[{"value":"/ Extra data associated with unary table instructions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497835,"byte_end":8497891,"line_start":1407,"line_end":1407,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":5654},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497984,"byte_end":8497987,"line_start":1411,"line_end":1411,"column_start":9,"column_end":12},"name":"dst","qualname":"::ast::expr::TableArg::dst","value":"ast::token::ItemRef<'a, ast::kw::table>","parent":{"krate":0,"index":5652},"children":[],"decl_id":null,"docs":" The index of the table argument.\n","sig":null,"attributes":[{"value":"/ The index of the table argument.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497939,"byte_end":8497975,"line_start":1410,"line_end":1410,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":5658},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498417,"byte_end":8498426,"line_start":1427,"line_end":1427,"column_start":12,"column_end":21},"name":"MemoryArg","qualname":"::ast::expr::MemoryArg","value":"MemoryArg { mem }","parent":null,"children":[{"krate":0,"index":5660}],"decl_id":null,"docs":" Extra data associated with unary memory instructions.\n","sig":null,"attributes":[{"value":"/ Extra data associated with unary memory instructions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498331,"byte_end":8498388,"line_start":1425,"line_end":1425,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":5660},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498480,"byte_end":8498483,"line_start":1429,"line_end":1429,"column_start":9,"column_end":12},"name":"mem","qualname":"::ast::expr::MemoryArg::mem","value":"ast::token::ItemRef<'a, ast::kw::memory>","parent":{"krate":0,"index":5658},"children":[],"decl_id":null,"docs":" The index of the memory space.\n","sig":null,"attributes":[{"value":"/ The index of the memory space.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498437,"byte_end":8498471,"line_start":1428,"line_end":1428,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":5664},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498920,"byte_end":8498930,"line_start":1445,"line_end":1445,"column_start":12,"column_end":22},"name":"MemoryInit","qualname":"::ast::expr::MemoryInit","value":"MemoryInit { data, mem }","parent":null,"children":[{"krate":0,"index":5666},{"krate":0,"index":5667}],"decl_id":null,"docs":" Extra data associated with the `memory.init` instruction\n","sig":null,"attributes":[{"value":"/ Extra data associated with the `memory.init` instruction","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498831,"byte_end":8498891,"line_start":1443,"line_end":1443,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5666},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499010,"byte_end":8499014,"line_start":1447,"line_end":1447,"column_start":9,"column_end":13},"name":"data","qualname":"::ast::expr::MemoryInit::data","value":"ast::token::Index<'a>","parent":{"krate":0,"index":5664},"children":[],"decl_id":null,"docs":" The index of the data segment we're copying into memory.\n","sig":null,"attributes":[{"value":"/ The index of the data segment we're copying into memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498941,"byte_end":8499001,"line_start":1446,"line_end":1446,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":5667},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499092,"byte_end":8499095,"line_start":1449,"line_end":1449,"column_start":9,"column_end":12},"name":"mem","qualname":"::ast::expr::MemoryInit::mem","value":"ast::token::ItemRef<'a, ast::kw::memory>","parent":{"krate":0,"index":5664},"children":[],"decl_id":null,"docs":" The index of the memory we're copying into,\n","sig":null,"attributes":[{"value":"/ The index of the memory we're copying into,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499036,"byte_end":8499083,"line_start":1448,"line_end":1448,"column_start":5,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5671},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499561,"byte_end":8499571,"line_start":1465,"line_end":1465,"column_start":12,"column_end":22},"name":"MemoryCopy","qualname":"::ast::expr::MemoryCopy","value":"MemoryCopy { src, dst }","parent":null,"children":[{"krate":0,"index":5673},{"krate":0,"index":5674}],"decl_id":null,"docs":" Extra data associated with the `memory.copy` instruction\n","sig":null,"attributes":[{"value":"/ Extra data associated with the `memory.copy` instruction","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499472,"byte_end":8499532,"line_start":1463,"line_end":1463,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5673},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499638,"byte_end":8499641,"line_start":1467,"line_end":1467,"column_start":9,"column_end":12},"name":"src","qualname":"::ast::expr::MemoryCopy::src","value":"ast::token::ItemRef<'a, ast::kw::memory>","parent":{"krate":0,"index":5671},"children":[],"decl_id":null,"docs":" The index of the memory we're copying from.\n","sig":null,"attributes":[{"value":"/ The index of the memory we're copying from.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499582,"byte_end":8499629,"line_start":1466,"line_end":1466,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":5674},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499731,"byte_end":8499734,"line_start":1469,"line_end":1469,"column_start":9,"column_end":12},"name":"dst","qualname":"::ast::expr::MemoryCopy::dst","value":"ast::token::ItemRef<'a, ast::kw::memory>","parent":{"krate":0,"index":5671},"children":[],"decl_id":null,"docs":" The index of the memory we're copying to.\n","sig":null,"attributes":[{"value":"/ The index of the memory we're copying to.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499677,"byte_end":8499722,"line_start":1468,"line_end":1468,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":5678},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500316,"byte_end":8500328,"line_start":1487,"line_end":1487,"column_start":12,"column_end":24},"name":"StructAccess","qualname":"::ast::expr::StructAccess","value":"StructAccess { r#struct, field }","parent":null,"children":[{"krate":0,"index":5680},{"krate":0,"index":5681}],"decl_id":null,"docs":" Extra data associated with the `struct.get/set` instructions\n","sig":null,"attributes":[{"value":"/ Extra data associated with the `struct.get/set` instructions","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500223,"byte_end":8500287,"line_start":1485,"line_end":1485,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":5680},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500397,"byte_end":8500405,"line_start":1489,"line_end":1489,"column_start":9,"column_end":17},"name":"r#struct","qualname":"::ast::expr::StructAccess::r#struct","value":"ast::token::Index<'a>","parent":{"krate":0,"index":5678},"children":[],"decl_id":null,"docs":" The index of the struct type we're accessing.\n","sig":null,"attributes":[{"value":"/ The index of the struct type we're accessing.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500339,"byte_end":8500388,"line_start":1488,"line_end":1488,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":5681},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500492,"byte_end":8500497,"line_start":1491,"line_end":1491,"column_start":9,"column_end":14},"name":"field","qualname":"::ast::expr::StructAccess::field","value":"ast::token::Index<'a>","parent":{"krate":0,"index":5678},"children":[],"decl_id":null,"docs":" The index of the field of the struct we're accessing\n","sig":null,"attributes":[{"value":"/ The index of the field of the struct we're accessing","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500427,"byte_end":8500483,"line_start":1490,"line_end":1490,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5686},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500871,"byte_end":8500876,"line_start":1508,"line_end":1508,"column_start":5,"column_end":10},"name":"I8x16","qualname":"::ast::expr::V128Const::I8x16","value":"V128Const::I8x16([i8; ])","parent":{"krate":0,"index":5685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5690},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500892,"byte_end":8500897,"line_start":1509,"line_end":1509,"column_start":5,"column_end":10},"name":"I16x8","qualname":"::ast::expr::V128Const::I16x8","value":"V128Const::I16x8([i16; ])","parent":{"krate":0,"index":5685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5694},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500913,"byte_end":8500918,"line_start":1510,"line_end":1510,"column_start":5,"column_end":10},"name":"I32x4","qualname":"::ast::expr::V128Const::I32x4","value":"V128Const::I32x4([i32; ])","parent":{"krate":0,"index":5685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5698},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500934,"byte_end":8500939,"line_start":1511,"line_end":1511,"column_start":5,"column_end":10},"name":"I64x2","qualname":"::ast::expr::V128Const::I64x2","value":"V128Const::I64x2([i64; ])","parent":{"krate":0,"index":5685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5702},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500955,"byte_end":8500960,"line_start":1512,"line_end":1512,"column_start":5,"column_end":10},"name":"F32x4","qualname":"::ast::expr::V128Const::F32x4","value":"V128Const::F32x4([ast::Float32; ])","parent":{"krate":0,"index":5685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5706},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500985,"byte_end":8500990,"line_start":1513,"line_end":1513,"column_start":5,"column_end":10},"name":"F64x2","qualname":"::ast::expr::V128Const::F64x2","value":"V128Const::F64x2([ast::Float64; ])","parent":{"krate":0,"index":5685},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5685},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500855,"byte_end":8500864,"line_start":1507,"line_end":1507,"column_start":10,"column_end":19},"name":"V128Const","qualname":"::ast::expr::V128Const","value":"pub enum V128Const {\n    I8x16([i8; ]),\n    I16x8([i16; ]),\n    I32x4([i32; ]),\n    I64x2([i64; ]),\n    F32x4([ast::Float32; ]),\n    F64x2([ast::Float64; ]),\n}","parent":null,"children":[{"krate":0,"index":5686},{"krate":0,"index":5690},{"krate":0,"index":5694},{"krate":0,"index":5698},{"krate":0,"index":5702},{"krate":0,"index":5706}],"decl_id":null,"docs":" Different ways to specify a `v128.const` instruction\n","sig":null,"attributes":[{"value":"/ Different ways to specify a `v128.const` instruction","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500732,"byte_end":8500788,"line_start":1503,"line_end":1503,"column_start":1,"column_end":57}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500823,"byte_end":8500845,"line_start":1506,"line_end":1506,"column_start":1,"column_end":23}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500806,"byte_end":8500822,"line_start":1505,"line_end":1505,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":5712},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8501274,"byte_end":8501285,"line_start":1523,"line_end":1523,"column_start":12,"column_end":23},"name":"to_le_bytes","qualname":"<V128Const>::to_le_bytes","value":"pub fn to_le_bytes(&Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw little-ended byte sequence used to represent this\n `v128` constant`","sig":null,"attributes":[{"value":"/ Returns the raw little-ended byte sequence used to represent this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8501035,"byte_end":8501104,"line_start":1517,"line_end":1517,"column_start":5,"column_end":74}},{"value":"/ `v128` constant`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8501109,"byte_end":8501129,"line_start":1518,"line_end":1518,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8501134,"byte_end":8501137,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ This is typically suitable for encoding as the payload of the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8501142,"byte_end":8501207,"line_start":1520,"line_end":1520,"column_start":5,"column_end":70}},{"value":"/ `v128.const` instruction.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8501212,"byte_end":8501241,"line_start":1521,"line_end":1521,"column_start":5,"column_end":34}},{"value":"rustfmt::skip","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8501246,"byte_end":8501262,"line_start":1522,"line_end":1522,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":5714},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8506431,"byte_end":8506443,"line_start":1672,"line_end":1672,"column_start":12,"column_end":24},"name":"I8x16Shuffle","qualname":"::ast::expr::I8x16Shuffle","value":"I8x16Shuffle { lanes }","parent":null,"children":[{"krate":0,"index":5715}],"decl_id":null,"docs":" Lanes being shuffled in the `i8x16.shuffle` instruction\n","sig":null,"attributes":[{"value":"/ Lanes being shuffled in the `i8x16.shuffle` instruction","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8506343,"byte_end":8506402,"line_start":1670,"line_end":1670,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":5715},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8506481,"byte_end":8506486,"line_start":1674,"line_end":1674,"column_start":9,"column_end":14},"name":"lanes","qualname":"::ast::expr::I8x16Shuffle::lanes","value":"[u8; 16]","parent":{"krate":0,"index":5714},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8506450,"byte_end":8506472,"line_start":1673,"line_end":1673,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5719},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8507269,"byte_end":8507280,"line_start":1704,"line_end":1704,"column_start":12,"column_end":23},"name":"SelectTypes","qualname":"::ast::expr::SelectTypes","value":"SelectTypes { tys }","parent":null,"children":[{"krate":0,"index":5721}],"decl_id":null,"docs":" Payload of the `select` instructions\n","sig":null,"attributes":[{"value":"/ Payload of the `select` instructions","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8507200,"byte_end":8507240,"line_start":1702,"line_end":1702,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":5721},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8507322,"byte_end":8507325,"line_start":1706,"line_end":1706,"column_start":9,"column_end":12},"name":"tys","qualname":"::ast::expr::SelectTypes::tys","value":"std::option::Option<std::vec::Vec<ast::types::ValType<'a>>>","parent":{"krate":0,"index":5719},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8507291,"byte_end":8507313,"line_start":1705,"line_end":1705,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":5725},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508082,"byte_end":8508086,"line_start":8,"line_end":8,"column_start":12,"column_end":16},"name":"Func","qualname":"::ast::func::Func","value":"Func { span, id, name, exports, kind, ty }","parent":null,"children":[{"krate":0,"index":5727},{"krate":0,"index":5728},{"krate":0,"index":5729},{"krate":0,"index":5730},{"krate":0,"index":5731},{"krate":0,"index":5732}],"decl_id":null,"docs":" A WebAssembly function to be inserted into a module.","sig":null,"attributes":[{"value":"/ A WebAssembly function to be inserted into a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8507932,"byte_end":8507988,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8507989,"byte_end":8507992,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This is a member of both the function and code sections.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8507993,"byte_end":8508053,"line_start":6,"line_end":6,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5727},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508140,"byte_end":8508144,"line_start":10,"line_end":10,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::func::Func::span","value":"ast::token::Span","parent":{"krate":0,"index":5725},"children":[],"decl_id":null,"docs":" Where this `func` was defined.\n","sig":null,"attributes":[{"value":"/ Where this `func` was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508097,"byte_end":8508131,"line_start":9,"line_end":9,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":5728},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508265,"byte_end":8508267,"line_start":13,"line_end":13,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::func::Func::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5725},"children":[],"decl_id":null,"docs":" An identifier that this function is resolved with (optionally) for name\n resolution.\n","sig":null,"attributes":[{"value":"/ An identifier that this function is resolved with (optionally) for name","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508161,"byte_end":8508236,"line_start":11,"line_end":11,"column_start":5,"column_end":80}},{"value":"/ resolution.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508241,"byte_end":8508256,"line_start":12,"line_end":12,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":5729},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508378,"byte_end":8508382,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::func::Func::name","value":"std::option::Option<ast::token::NameAnnotation<'a>>","parent":{"krate":0,"index":5725},"children":[],"decl_id":null,"docs":" An optional name for this function stored in the custom `name` section.\n","sig":null,"attributes":[{"value":"/ An optional name for this function stored in the custom `name` section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508294,"byte_end":8508369,"line_start":14,"line_end":14,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":5730},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508542,"byte_end":8508549,"line_start":18,"line_end":18,"column_start":9,"column_end":16},"name":"exports","qualname":"::ast::func::Func::exports","value":"ast::export::InlineExport<'a>","parent":{"krate":0,"index":5725},"children":[],"decl_id":null,"docs":" If present, inline export annotations which indicate names this\n definition should be exported under.\n","sig":null,"attributes":[{"value":"/ If present, inline export annotations which indicate names this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508421,"byte_end":8508488,"line_start":16,"line_end":16,"column_start":5,"column_end":72}},{"value":"/ definition should be exported under.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508493,"byte_end":8508533,"line_start":17,"line_end":17,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5731},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508675,"byte_end":8508679,"line_start":21,"line_end":21,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::func::Func::kind","value":"ast::func::FuncKind<'a>","parent":{"krate":0,"index":5725},"children":[],"decl_id":null,"docs":" What kind of function this is, be it an inline-defined or imported\n function.\n","sig":null,"attributes":[{"value":"/ What kind of function this is, be it an inline-defined or imported","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508578,"byte_end":8508648,"line_start":19,"line_end":19,"column_start":5,"column_end":75}},{"value":"/ function.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508653,"byte_end":8508666,"line_start":20,"line_end":20,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":5732},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508750,"byte_end":8508752,"line_start":23,"line_end":23,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::func::Func::ty","value":"ast::types::TypeUse<'a, ast::types::FunctionType<'a>>","parent":{"krate":0,"index":5725},"children":[],"decl_id":null,"docs":" The type that this function will have.\n","sig":null,"attributes":[{"value":"/ The type that this function will have.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508699,"byte_end":8508741,"line_start":22,"line_end":22,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5738},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8509051,"byte_end":8509057,"line_start":34,"line_end":34,"column_start":5,"column_end":11},"name":"Import","qualname":"::ast::func::FuncKind::Import","value":"FuncKind::Import(ast::InlineImport)","parent":{"krate":0,"index":5736},"children":[],"decl_id":null,"docs":" A function which is actually defined as an import, such as:","sig":null,"attributes":[{"value":"/ A function which is actually defined as an import, such as:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508902,"byte_end":8508965,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508970,"byte_end":8508973,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508978,"byte_end":8508989,"line_start":31,"line_end":31,"column_start":5,"column_end":16}},{"value":"/ (func (type 3) (import \"foo\" \"bar\"))","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508994,"byte_end":8509034,"line_start":32,"line_end":32,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8509039,"byte_end":8509046,"line_start":33,"line_end":33,"column_start":5,"column_end":12}}]},{"kind":"StructVariant","id":{"krate":0,"index":5741},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8509156,"byte_end":8509162,"line_start":37,"line_end":37,"column_start":5,"column_end":11},"name":"Inline","qualname":"::ast::func::FuncKind::Inline","value":"FuncKind::Inline { locals, expression }","parent":{"krate":0,"index":5736},"children":[],"decl_id":null,"docs":" Almost all functions, those defined inline in a wasm module.\n","sig":null,"attributes":[{"value":"/ Almost all functions, those defined inline in a wasm module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8509087,"byte_end":8509151,"line_start":36,"line_end":36,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":5736},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508883,"byte_end":8508891,"line_start":28,"line_end":28,"column_start":10,"column_end":18},"name":"FuncKind","qualname":"::ast::func::FuncKind","value":"pub enum FuncKind<'a> {\n\n    /// A function which is actually defined as an import, such as:\n    ///\n    /// ```text\n    /// (func (type 3) (import \"foo\" \"bar\"))\n    /// ```\n    Import(ast::InlineImport),\n\n    /// Almost all functions, those defined inline in a wasm module.\n    Inline {\n        /// The list of locals, if any, for this function.\n        locals: Vec<Local>,\n        /// The instructions of the function.\n        expression: ast::Expression,\n    },\n}","parent":null,"children":[{"krate":0,"index":5738},{"krate":0,"index":5741}],"decl_id":null,"docs":" Possible ways to define a function in the text format.\n","sig":null,"attributes":[{"value":"/ Possible ways to define a function in the text format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8508798,"byte_end":8508856,"line_start":26,"line_end":26,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":5747},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510381,"byte_end":8510386,"line_start":83,"line_end":83,"column_start":12,"column_end":17},"name":"Local","qualname":"::ast::func::Local","value":"Local { id, name, ty }","parent":null,"children":[{"krate":0,"index":5749},{"krate":0,"index":5750},{"krate":0,"index":5751}],"decl_id":null,"docs":" A local for a `func` or `let` instruction.","sig":null,"attributes":[{"value":"/ A local for a `func` or `let` instruction.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510169,"byte_end":8510215,"line_start":78,"line_end":78,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510216,"byte_end":8510219,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ Each local has an optional identifier for name resolution, an optional name","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510220,"byte_end":8510299,"line_start":80,"line_end":80,"column_start":1,"column_end":80}},{"value":"/ for the custom `name` section, and a value type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510300,"byte_end":8510352,"line_start":81,"line_end":81,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":5749},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510498,"byte_end":8510500,"line_start":86,"line_end":86,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::func::Local::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5747},"children":[],"decl_id":null,"docs":" An identifier that this local is resolved with (optionally) for name\n resolution.\n","sig":null,"attributes":[{"value":"/ An identifier that this local is resolved with (optionally) for name","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510397,"byte_end":8510469,"line_start":84,"line_end":84,"column_start":5,"column_end":77}},{"value":"/ resolution.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510474,"byte_end":8510489,"line_start":85,"line_end":85,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":5750},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510608,"byte_end":8510612,"line_start":88,"line_end":88,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::func::Local::name","value":"std::option::Option<ast::token::NameAnnotation<'a>>","parent":{"krate":0,"index":5747},"children":[],"decl_id":null,"docs":" An optional name for this local stored in the custom `name` section.\n","sig":null,"attributes":[{"value":"/ An optional name for this local stored in the custom `name` section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510527,"byte_end":8510599,"line_start":87,"line_end":87,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":5751},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510693,"byte_end":8510695,"line_start":90,"line_end":90,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::func::Local::ty","value":"ast::types::ValType<'a>","parent":{"krate":0,"index":5747},"children":[],"decl_id":null,"docs":" The value type of this local.\n","sig":null,"attributes":[{"value":"/ The value type of this local.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510651,"byte_end":8510684,"line_start":89,"line_end":89,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5755},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8511682,"byte_end":8511688,"line_start":6,"line_end":6,"column_start":12,"column_end":18},"name":"Global","qualname":"::ast::global::Global","value":"Global { span, id, exports, ty, kind }","parent":null,"children":[{"krate":0,"index":5757},{"krate":0,"index":5758},{"krate":0,"index":5759},{"krate":0,"index":5760},{"krate":0,"index":5761}],"decl_id":null,"docs":" A WebAssembly global in a module\n","sig":null,"attributes":[{"value":"/ A WebAssembly global in a module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8511617,"byte_end":8511653,"line_start":4,"line_end":4,"column_start":1,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5757},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8511744,"byte_end":8511748,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::global::Global::span","value":"ast::token::Span","parent":{"krate":0,"index":5755},"children":[],"decl_id":null,"docs":" Where this `global` was defined.\n","sig":null,"attributes":[{"value":"/ Where this `global` was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8511699,"byte_end":8511735,"line_start":7,"line_end":7,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":5758},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8511822,"byte_end":8511824,"line_start":10,"line_end":10,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::global::Global::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5755},"children":[],"decl_id":null,"docs":" An optional name to reference this global by\n","sig":null,"attributes":[{"value":"/ An optional name to reference this global by","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8511765,"byte_end":8511813,"line_start":9,"line_end":9,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":5759},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8511972,"byte_end":8511979,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"name":"exports","qualname":"::ast::global::Global::exports","value":"ast::export::InlineExport<'a>","parent":{"krate":0,"index":5755},"children":[],"decl_id":null,"docs":" If present, inline export annotations which indicate names this\n definition should be exported under.\n","sig":null,"attributes":[{"value":"/ If present, inline export annotations which indicate names this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8511851,"byte_end":8511918,"line_start":11,"line_end":11,"column_start":5,"column_end":72}},{"value":"/ definition should be exported under.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8511923,"byte_end":8511963,"line_start":12,"line_end":12,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5760},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512091,"byte_end":8512093,"line_start":15,"line_end":15,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::global::Global::ty","value":"ast::types::GlobalType<'a>","parent":{"krate":0,"index":5755},"children":[],"decl_id":null,"docs":" The type of this global, both its value type and whether it's mutable.\n","sig":null,"attributes":[{"value":"/ The type of this global, both its value type and whether it's mutable.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512008,"byte_end":8512082,"line_start":14,"line_end":14,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":5761},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512169,"byte_end":8512173,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::global::Global::kind","value":"ast::global::GlobalKind<'a>","parent":{"krate":0,"index":5755},"children":[],"decl_id":null,"docs":" What kind of global this defined as.\n","sig":null,"attributes":[{"value":"/ What kind of global this defined as.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512120,"byte_end":8512160,"line_start":16,"line_end":16,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5767},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512449,"byte_end":8512455,"line_start":28,"line_end":28,"column_start":5,"column_end":11},"name":"Import","qualname":"::ast::global::GlobalKind::Import","value":"GlobalKind::Import(ast::InlineImport)","parent":{"krate":0,"index":5765},"children":[],"decl_id":null,"docs":" A global which is actually defined as an import, such as:","sig":null,"attributes":[{"value":"/ A global which is actually defined as an import, such as:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512305,"byte_end":8512366,"line_start":23,"line_end":23,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512371,"byte_end":8512374,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512379,"byte_end":8512390,"line_start":25,"line_end":25,"column_start":5,"column_end":16}},{"value":"/ (global i32 (import \"foo\" \"bar\"))","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512395,"byte_end":8512432,"line_start":26,"line_end":26,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512437,"byte_end":8512444,"line_start":27,"line_end":27,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5770},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512538,"byte_end":8512544,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"Inline","qualname":"::ast::global::GlobalKind::Inline","value":"GlobalKind::Inline(ast::Expression)","parent":{"krate":0,"index":5765},"children":[],"decl_id":null,"docs":" A global defined inline in the module itself\n","sig":null,"attributes":[{"value":"/ A global defined inline in the module itself","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512485,"byte_end":8512533,"line_start":30,"line_end":30,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":5765},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512284,"byte_end":8512294,"line_start":22,"line_end":22,"column_start":10,"column_end":20},"name":"GlobalKind","qualname":"::ast::global::GlobalKind","value":"pub enum GlobalKind<'a> {\n\n    /// A global which is actually defined as an import, such as:\n    ///\n    /// ```text\n    /// (global i32 (import \"foo\" \"bar\"))\n    /// ```\n    Import(ast::InlineImport),\n\n    /// A global defined inline in the module itself\n    Inline(ast::Expression),\n}","parent":null,"children":[{"krate":0,"index":5767},{"krate":0,"index":5770}],"decl_id":null,"docs":" Different kinds of globals that can be defined in a module.\n","sig":null,"attributes":[{"value":"/ Different kinds of globals that can be defined in a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512194,"byte_end":8512257,"line_start":20,"line_end":20,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5776},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513313,"byte_end":8513319,"line_start":6,"line_end":6,"column_start":12,"column_end":18},"name":"Import","qualname":"::ast::import::Import","value":"Import { span, module, field, item }","parent":null,"children":[{"krate":0,"index":5778},{"krate":0,"index":5779},{"krate":0,"index":5780},{"krate":0,"index":5781}],"decl_id":null,"docs":" An `import` statement and entry in a WebAssembly module.\n","sig":null,"attributes":[{"value":"/ An `import` statement and entry in a WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513217,"byte_end":8513277,"line_start":4,"line_end":4,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":5778},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513374,"byte_end":8513378,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::import::Import::span","value":"ast::token::Span","parent":{"krate":0,"index":5776},"children":[],"decl_id":null,"docs":" Where this `import` was defined\n","sig":null,"attributes":[{"value":"/ Where this `import` was defined","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513330,"byte_end":8513365,"line_start":7,"line_end":7,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":5779},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513456,"byte_end":8513462,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"name":"module","qualname":"::ast::import::Import::module","value":"&'a str","parent":{"krate":0,"index":5776},"children":[],"decl_id":null,"docs":" The module that this statement is importing from\n","sig":null,"attributes":[{"value":"/ The module that this statement is importing from","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513395,"byte_end":8513447,"line_start":9,"line_end":9,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":5780},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513554,"byte_end":8513559,"line_start":12,"line_end":12,"column_start":9,"column_end":14},"name":"field","qualname":"::ast::import::Import::field","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":5776},"children":[],"decl_id":null,"docs":" The name of the field in the module this statement imports from.\n","sig":null,"attributes":[{"value":"/ The name of the field in the module this statement imports from.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513477,"byte_end":8513545,"line_start":11,"line_end":11,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":5781},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513626,"byte_end":8513630,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"name":"item","qualname":"::ast::import::Import::item","value":"ast::import::ItemSig<'a>","parent":{"krate":0,"index":5776},"children":[],"decl_id":null,"docs":" The item that's being imported.\n","sig":null,"attributes":[{"value":"/ The item that's being imported.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513582,"byte_end":8513617,"line_start":13,"line_end":13,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":5788},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514085,"byte_end":8514092,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"ItemSig","qualname":"::ast::import::ItemSig","value":"ItemSig { span, id, name, kind }","parent":null,"children":[{"krate":0,"index":5790},{"krate":0,"index":5791},{"krate":0,"index":5792},{"krate":0,"index":5793}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514051,"byte_end":8514073,"line_start":33,"line_end":33,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":5790},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514157,"byte_end":8514161,"line_start":36,"line_end":36,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::import::ItemSig::span","value":"ast::token::Span","parent":{"krate":0,"index":5788},"children":[],"decl_id":null,"docs":" Where this item is defined in the source.\n","sig":null,"attributes":[{"value":"/ Where this item is defined in the source.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514103,"byte_end":8514148,"line_start":35,"line_end":35,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":5791},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514300,"byte_end":8514302,"line_start":39,"line_end":39,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::import::ItemSig::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5788},"children":[],"decl_id":null,"docs":" An optional identifier used during name resolution to refer to this item\n from the rest of the module.\n","sig":null,"attributes":[{"value":"/ An optional identifier used during name resolution to refer to this item","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514178,"byte_end":8514254,"line_start":37,"line_end":37,"column_start":5,"column_end":81}},{"value":"/ from the rest of the module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514259,"byte_end":8514291,"line_start":38,"line_end":38,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":5792},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514433,"byte_end":8514437,"line_start":42,"line_end":42,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::import::ItemSig::name","value":"std::option::Option<ast::token::NameAnnotation<'a>>","parent":{"krate":0,"index":5788},"children":[],"decl_id":null,"docs":" An optional name which, for functions, will be stored in the\n custom `name` section.\n","sig":null,"attributes":[{"value":"/ An optional name which, for functions, will be stored in the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514329,"byte_end":8514393,"line_start":40,"line_end":40,"column_start":5,"column_end":69}},{"value":"/ custom `name` section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514398,"byte_end":8514424,"line_start":41,"line_end":41,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":5793},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514515,"byte_end":8514519,"line_start":44,"line_end":44,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::import::ItemSig::kind","value":"ast::import::ItemKind<'a>","parent":{"krate":0,"index":5788},"children":[],"decl_id":null,"docs":" What kind of item this is.\n","sig":null,"attributes":[{"value":"/ What kind of item this is.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514476,"byte_end":8514506,"line_start":43,"line_end":43,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5802},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514613,"byte_end":8514617,"line_start":50,"line_end":50,"column_start":5,"column_end":9},"name":"Func","qualname":"::ast::import::ItemKind::Func","value":"ItemKind::Func(ast::TypeUse)","parent":{"krate":0,"index":5800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5805},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514664,"byte_end":8514669,"line_start":51,"line_end":51,"column_start":5,"column_end":10},"name":"Table","qualname":"::ast::import::ItemKind::Table","value":"ItemKind::Table(ast::TableType)","parent":{"krate":0,"index":5800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5808},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514695,"byte_end":8514701,"line_start":52,"line_end":52,"column_start":5,"column_end":11},"name":"Memory","qualname":"::ast::import::ItemKind::Memory","value":"ItemKind::Memory(ast::MemoryType)","parent":{"krate":0,"index":5800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5811},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514724,"byte_end":8514730,"line_start":53,"line_end":53,"column_start":5,"column_end":11},"name":"Global","qualname":"::ast::import::ItemKind::Global","value":"ItemKind::Global(ast::GlobalType)","parent":{"krate":0,"index":5800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5814},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514757,"byte_end":8514762,"line_start":54,"line_end":54,"column_start":5,"column_end":10},"name":"Event","qualname":"::ast::import::ItemKind::Event","value":"ItemKind::Event(ast::EventType)","parent":{"krate":0,"index":5800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5817},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514788,"byte_end":8514794,"line_start":55,"line_end":55,"column_start":5,"column_end":11},"name":"Module","qualname":"::ast::import::ItemKind::Module","value":"ItemKind::Module(ast::TypeUse)","parent":{"krate":0,"index":5800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5820},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514839,"byte_end":8514847,"line_start":56,"line_end":56,"column_start":5,"column_end":13},"name":"Instance","qualname":"::ast::import::ItemKind::Instance","value":"ItemKind::Instance(ast::TypeUse)","parent":{"krate":0,"index":5800},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5800},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514594,"byte_end":8514602,"line_start":49,"line_end":49,"column_start":10,"column_end":18},"name":"ItemKind","qualname":"::ast::import::ItemKind","value":"pub enum ItemKind<'a> {\n    Func(ast::TypeUse),\n    Table(ast::TableType),\n    Memory(ast::MemoryType),\n    Global(ast::GlobalType),\n    Event(ast::EventType),\n    Module(ast::TypeUse),\n    Instance(ast::TypeUse),\n}","parent":null,"children":[{"krate":0,"index":5802},{"krate":0,"index":5805},{"krate":0,"index":5808},{"krate":0,"index":5811},{"krate":0,"index":5814},{"krate":0,"index":5817},{"krate":0,"index":5820}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514562,"byte_end":8514584,"line_start":48,"line_end":48,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5829},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517453,"byte_end":8517465,"line_start":132,"line_end":132,"column_start":12,"column_end":24},"name":"InlineImport","qualname":"::ast::import::InlineImport","value":"InlineImport { module, field }","parent":null,"children":[{"krate":0,"index":5831},{"krate":0,"index":5832}],"decl_id":null,"docs":" A listing of a inline `(import \"foo\")` statement.","sig":null,"attributes":[{"value":"/ A listing of a inline `(import \"foo\")` statement.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517064,"byte_end":8517117,"line_start":124,"line_end":124,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517118,"byte_end":8517121,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ Note that when parsing this type it is somewhat unconventional that it","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517122,"byte_end":8517196,"line_start":126,"line_end":126,"column_start":1,"column_end":75}},{"value":"/ parses its own surrounding parentheses. This is typically an optional type,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517197,"byte_end":8517276,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ so it's so far been a bit nicer to have the optionality handled through","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517277,"byte_end":8517352,"line_start":128,"line_end":128,"column_start":1,"column_end":76}},{"value":"/ `Peek` rather than `Option<T>`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517353,"byte_end":8517388,"line_start":129,"line_end":129,"column_start":1,"column_end":36}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517419,"byte_end":8517441,"line_start":131,"line_end":131,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":5831},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517480,"byte_end":8517486,"line_start":133,"line_end":133,"column_start":9,"column_end":15},"name":"module","qualname":"::ast::import::InlineImport::module","value":"&'a str","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5832},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517505,"byte_end":8517510,"line_start":134,"line_end":134,"column_start":9,"column_end":14},"name":"field","qualname":"::ast::import::InlineImport::field","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":5829},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5841},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8518727,"byte_end":8518735,"line_start":6,"line_end":6,"column_start":12,"column_end":20},"name":"Instance","qualname":"::ast::instance::Instance","value":"Instance { span, id, exports, kind }","parent":null,"children":[{"krate":0,"index":5843},{"krate":0,"index":5844},{"krate":0,"index":5845},{"krate":0,"index":5846}],"decl_id":null,"docs":" A nested WebAssembly instance to be created as part of a module.\n","sig":null,"attributes":[{"value":"/ A nested WebAssembly instance to be created as part of a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8518630,"byte_end":8518698,"line_start":4,"line_end":4,"column_start":1,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":5843},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8518793,"byte_end":8518797,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::instance::Instance::span","value":"ast::token::Span","parent":{"krate":0,"index":5841},"children":[],"decl_id":null,"docs":" Where this `instance` was defined.\n","sig":null,"attributes":[{"value":"/ Where this `instance` was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8518746,"byte_end":8518784,"line_start":7,"line_end":7,"column_start":5,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":5844},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8518918,"byte_end":8518920,"line_start":11,"line_end":11,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::instance::Instance::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5841},"children":[],"decl_id":null,"docs":" An identifier that this instance is resolved with (optionally) for name\n resolution.\n","sig":null,"attributes":[{"value":"/ An identifier that this instance is resolved with (optionally) for name","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8518814,"byte_end":8518889,"line_start":9,"line_end":9,"column_start":5,"column_end":80}},{"value":"/ resolution.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8518894,"byte_end":8518909,"line_start":10,"line_end":10,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":5845},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519068,"byte_end":8519075,"line_start":14,"line_end":14,"column_start":9,"column_end":16},"name":"exports","qualname":"::ast::instance::Instance::exports","value":"ast::export::InlineExport<'a>","parent":{"krate":0,"index":5841},"children":[],"decl_id":null,"docs":" If present, inline export annotations which indicate names this\n definition should be exported under.\n","sig":null,"attributes":[{"value":"/ If present, inline export annotations which indicate names this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8518947,"byte_end":8519014,"line_start":12,"line_end":12,"column_start":5,"column_end":72}},{"value":"/ definition should be exported under.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519019,"byte_end":8519059,"line_start":13,"line_end":13,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5846},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519188,"byte_end":8519192,"line_start":16,"line_end":16,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::instance::Instance::kind","value":"ast::instance::InstanceKind<'a>","parent":{"krate":0,"index":5841},"children":[],"decl_id":null,"docs":" What kind of instance this is, be it an inline-defined or imported one.\n","sig":null,"attributes":[{"value":"/ What kind of instance this is, be it an inline-defined or imported one.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519104,"byte_end":8519179,"line_start":15,"line_end":15,"column_start":5,"column_end":80}}]},{"kind":"StructVariant","id":{"krate":0,"index":5852},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519392,"byte_end":8519398,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Import","qualname":"::ast::instance::InstanceKind::Import","value":"InstanceKind::Import { import, ty }","parent":{"krate":0,"index":5850},"children":[],"decl_id":null,"docs":" An instance which is actually defined as an import, such as:\n","sig":null,"attributes":[{"value":"/ An instance which is actually defined as an import, such as:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519323,"byte_end":8519387,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"StructVariant","id":{"krate":0,"index":5855},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519652,"byte_end":8519658,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"Inline","qualname":"::ast::instance::InstanceKind::Inline","value":"InstanceKind::Inline { module, args }","parent":{"krate":0,"index":5850},"children":[],"decl_id":null,"docs":" Instances whose instantiation is defined inline.\n","sig":null,"attributes":[{"value":"/ Instances whose instantiation is defined inline.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519595,"byte_end":8519647,"line_start":30,"line_end":30,"column_start":5,"column_end":57}}]},{"kind":"Enum","id":{"krate":0,"index":5850},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519300,"byte_end":8519312,"line_start":21,"line_end":21,"column_start":10,"column_end":22},"name":"InstanceKind","qualname":"::ast::instance::InstanceKind","value":"pub enum InstanceKind<'a> {\n\n    /// An instance which is actually defined as an import, such as:\n    Import {\n        /// Where we're importing from\n        import: ast::InlineImport,\n        /// The type that this instance will have.\n        ty: ast::TypeUse,\n    },\n\n    /// Instances whose instantiation is defined inline.\n    Inline {\n        /// Module that we're instantiating\n        module: ast::ItemRef,\n        /// Arguments used to instantiate the instance\n        args: Vec<InstanceArg>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5852},{"krate":0,"index":5855}],"decl_id":null,"docs":" Possible ways to define a instance in the text format.\n","sig":null,"attributes":[{"value":"/ Possible ways to define a instance in the text format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519215,"byte_end":8519273,"line_start":19,"line_end":19,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":5861},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519950,"byte_end":8519961,"line_start":42,"line_end":42,"column_start":12,"column_end":23},"name":"InstanceArg","qualname":"::ast::instance::InstanceArg","value":"InstanceArg { name, index }","parent":null,"children":[{"krate":0,"index":5863},{"krate":0,"index":5864}],"decl_id":null,"docs":" Arguments to the `instantiate` instruction\n","sig":null,"attributes":[{"value":"/ Arguments to the `instantiate` instruction","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519852,"byte_end":8519898,"line_start":39,"line_end":39,"column_start":1,"column_end":47}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519916,"byte_end":8519938,"line_start":41,"line_end":41,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":5863},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519976,"byte_end":8519980,"line_start":43,"line_end":43,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::instance::InstanceArg::name","value":"&'a str","parent":{"krate":0,"index":5861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":5864},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8519999,"byte_end":8520004,"line_start":44,"line_end":44,"column_start":9,"column_end":14},"name":"index","qualname":"::ast::instance::InstanceArg::index","value":"ast::token::ItemRef<'a, ast::export::ExportKind>","parent":{"krate":0,"index":5861},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5868},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521376,"byte_end":8521382,"line_start":6,"line_end":6,"column_start":12,"column_end":18},"name":"Memory","qualname":"::ast::memory::Memory","value":"Memory { span, id, exports, kind }","parent":null,"children":[{"krate":0,"index":5870},{"krate":0,"index":5871},{"krate":0,"index":5872},{"krate":0,"index":5873}],"decl_id":null,"docs":" A defined WebAssembly memory instance inside of a module.\n","sig":null,"attributes":[{"value":"/ A defined WebAssembly memory instance inside of a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521286,"byte_end":8521347,"line_start":4,"line_end":4,"column_start":1,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":5870},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521437,"byte_end":8521441,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::memory::Memory::span","value":"ast::token::Span","parent":{"krate":0,"index":5868},"children":[],"decl_id":null,"docs":" Where this `memory` was defined\n","sig":null,"attributes":[{"value":"/ Where this `memory` was defined","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521393,"byte_end":8521428,"line_start":7,"line_end":7,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":5871},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521515,"byte_end":8521517,"line_start":10,"line_end":10,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::memory::Memory::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5868},"children":[],"decl_id":null,"docs":" An optional name to refer to this memory by.\n","sig":null,"attributes":[{"value":"/ An optional name to refer to this memory by.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521458,"byte_end":8521506,"line_start":9,"line_end":9,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":5872},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521665,"byte_end":8521672,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"name":"exports","qualname":"::ast::memory::Memory::exports","value":"ast::export::InlineExport<'a>","parent":{"krate":0,"index":5868},"children":[],"decl_id":null,"docs":" If present, inline export annotations which indicate names this\n definition should be exported under.\n","sig":null,"attributes":[{"value":"/ If present, inline export annotations which indicate names this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521544,"byte_end":8521611,"line_start":11,"line_end":11,"column_start":5,"column_end":72}},{"value":"/ definition should be exported under.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521616,"byte_end":8521656,"line_start":12,"line_end":12,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5873},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521755,"byte_end":8521759,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::memory::Memory::kind","value":"ast::memory::MemoryKind<'a>","parent":{"krate":0,"index":5868},"children":[],"decl_id":null,"docs":" How this memory is defined in the module.\n","sig":null,"attributes":[{"value":"/ How this memory is defined in the module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521701,"byte_end":8521746,"line_start":14,"line_end":14,"column_start":5,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":5879},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521984,"byte_end":8521990,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Import","qualname":"::ast::memory::MemoryKind::Import","value":"MemoryKind::Import { import, ty }","parent":{"krate":0,"index":5877},"children":[],"decl_id":null,"docs":" This memory is actually an inlined import definition.\n","sig":null,"attributes":[{"value":"/ This memory is actually an inlined import definition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521895,"byte_end":8521952,"line_start":21,"line_end":21,"column_start":5,"column_end":62}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521957,"byte_end":8521979,"line_start":22,"line_end":22,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5882},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8522152,"byte_end":8522158,"line_start":29,"line_end":29,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ast::memory::MemoryKind::Normal","value":"MemoryKind::Normal(ast::MemoryType)","parent":{"krate":0,"index":5877},"children":[],"decl_id":null,"docs":" A typical memory definition which simply says the limits of the memory\n","sig":null,"attributes":[{"value":"/ A typical memory definition which simply says the limits of the memory","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8522073,"byte_end":8522147,"line_start":28,"line_end":28,"column_start":5,"column_end":79}}]},{"kind":"StructVariant","id":{"krate":0,"index":5885},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8522250,"byte_end":8522256,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Inline","qualname":"::ast::memory::MemoryKind::Inline","value":"MemoryKind::Inline { is_32, data }","parent":{"krate":0,"index":5877},"children":[],"decl_id":null,"docs":" The data of this memory, starting from 0, explicitly listed\n","sig":null,"attributes":[{"value":"/ The data of this memory, starting from 0, explicitly listed","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8522182,"byte_end":8522245,"line_start":31,"line_end":31,"column_start":5,"column_end":68}}]},{"kind":"Enum","id":{"krate":0,"index":5877},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521874,"byte_end":8521884,"line_start":20,"line_end":20,"column_start":10,"column_end":20},"name":"MemoryKind","qualname":"::ast::memory::MemoryKind","value":"pub enum MemoryKind<'a> {\n\n    /// This memory is actually an inlined import definition.\n    #[allow(missing_docs)]\n    Import {\n        import: ast::InlineImport,\n        ty: ast::MemoryType,\n    },\n\n    /// A typical memory definition which simply says the limits of the memory\n    Normal(ast::MemoryType),\n\n    /// The data of this memory, starting from 0, explicitly listed\n    Inline {\n        /// Whether or not this will be creating a 32-bit memory\n        is_32: bool,\n        /// The inline data specified for this memory\n        data: Vec<DataVal>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5879},{"krate":0,"index":5882},{"krate":0,"index":5885}],"decl_id":null,"docs":" Different syntactical ways a memory can be defined in a module.\n","sig":null,"attributes":[{"value":"/ Different syntactical ways a memory can be defined in a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8521780,"byte_end":8521847,"line_start":18,"line_end":18,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":5891},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524067,"byte_end":8524071,"line_start":90,"line_end":90,"column_start":12,"column_end":16},"name":"Data","qualname":"::ast::memory::Data","value":"Data { span, id, kind, data }","parent":null,"children":[{"krate":0,"index":5893},{"krate":0,"index":5894},{"krate":0,"index":5895},{"krate":0,"index":5896}],"decl_id":null,"docs":" A `data` directive in a WebAssembly module.\n","sig":null,"attributes":[{"value":"/ A `data` directive in a WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8523991,"byte_end":8524038,"line_start":88,"line_end":88,"column_start":1,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":5893},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524124,"byte_end":8524128,"line_start":92,"line_end":92,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::memory::Data::span","value":"ast::token::Span","parent":{"krate":0,"index":5891},"children":[],"decl_id":null,"docs":" Where this `data` was defined\n","sig":null,"attributes":[{"value":"/ Where this `data` was defined","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524082,"byte_end":8524115,"line_start":91,"line_end":91,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":5894},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524197,"byte_end":8524199,"line_start":95,"line_end":95,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::memory::Data::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5891},"children":[],"decl_id":null,"docs":" The optional name of this data segment\n","sig":null,"attributes":[{"value":"/ The optional name of this data segment","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524146,"byte_end":8524188,"line_start":94,"line_end":94,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":5895},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524286,"byte_end":8524290,"line_start":98,"line_end":98,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::memory::Data::kind","value":"ast::memory::DataKind<'a>","parent":{"krate":0,"index":5891},"children":[],"decl_id":null,"docs":" Whether this data segment is passive or active\n","sig":null,"attributes":[{"value":"/ Whether this data segment is passive or active","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524227,"byte_end":8524277,"line_start":97,"line_end":97,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":5896},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524419,"byte_end":8524423,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"name":"data","qualname":"::ast::memory::Data::data","value":"std::vec::Vec<ast::memory::DataVal<'a>>","parent":{"krate":0,"index":5891},"children":[],"decl_id":null,"docs":" Bytes for this `Data` segment, viewed as the concatenation of all the\n contained slices.\n","sig":null,"attributes":[{"value":"/ Bytes for this `Data` segment, viewed as the concatenation of all the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524311,"byte_end":8524384,"line_start":100,"line_end":100,"column_start":5,"column_end":78}},{"value":"/ contained slices.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524389,"byte_end":8524410,"line_start":101,"line_end":101,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5902},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524676,"byte_end":8524683,"line_start":110,"line_end":110,"column_start":5,"column_end":12},"name":"Passive","qualname":"::ast::memory::DataKind::Passive","value":"DataKind::Passive","parent":{"krate":0,"index":5900},"children":[],"decl_id":null,"docs":" A passive data segment which isn't associated with a memory and is\n referenced from various instructions.\n","sig":null,"attributes":[{"value":"/ A passive data segment which isn't associated with a memory and is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524555,"byte_end":8524625,"line_start":108,"line_end":108,"column_start":5,"column_end":75}},{"value":"/ referenced from various instructions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524630,"byte_end":8524671,"line_start":109,"line_end":109,"column_start":5,"column_end":46}}]},{"kind":"StructVariant","id":{"krate":0,"index":5904},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524810,"byte_end":8524816,"line_start":114,"line_end":114,"column_start":5,"column_end":11},"name":"Active","qualname":"::ast::memory::DataKind::Active","value":"DataKind::Active { memory, offset }","parent":{"krate":0,"index":5900},"children":[],"decl_id":null,"docs":" An active data segment which is associated and loaded into a particular\n memory on module instantiation.\n","sig":null,"attributes":[{"value":"/ An active data segment which is associated and loaded into a particular","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524690,"byte_end":8524765,"line_start":112,"line_end":112,"column_start":5,"column_end":80}},{"value":"/ memory on module instantiation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524770,"byte_end":8524805,"line_start":113,"line_end":113,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":5900},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524536,"byte_end":8524544,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"DataKind","qualname":"::ast::memory::DataKind","value":"pub enum DataKind<'a> {\n\n    /// A passive data segment which isn't associated with a memory and is\n    /// referenced from various instructions.\n    Passive,\n\n    /// An active data segment which is associated and loaded into a particular\n    /// memory on module instantiation.\n    Active {\n        /// The memory that this `Data` will be associated with.\n        memory: ast::ItemRef,\n        /// Initial offset to load this data segment at\n        offset: ast::Expression,\n    },\n}","parent":null,"children":[{"krate":0,"index":5902},{"krate":0,"index":5904}],"decl_id":null,"docs":" Different kinds of data segments, either passive or active.\n","sig":null,"attributes":[{"value":"/ Different kinds of data segments, either passive or active.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8524446,"byte_end":8524509,"line_start":105,"line_end":105,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5912},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526763,"byte_end":8526769,"line_start":176,"line_end":176,"column_start":5,"column_end":11},"name":"String","qualname":"::ast::memory::DataVal::String","value":"DataVal::String(&'a [u8])","parent":{"krate":0,"index":5910},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5915},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526785,"byte_end":8526793,"line_start":177,"line_end":177,"column_start":5,"column_end":13},"name":"Integral","qualname":"::ast::memory::DataVal::Integral","value":"DataVal::Integral(Vec<u8>)","parent":{"krate":0,"index":5910},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5910},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526745,"byte_end":8526752,"line_start":175,"line_end":175,"column_start":10,"column_end":17},"name":"DataVal","qualname":"::ast::memory::DataVal","value":"pub enum DataVal<'a> { String(&'a [u8]), Integral(Vec<u8>), }","parent":null,"children":[{"krate":0,"index":5912},{"krate":0,"index":5915}],"decl_id":null,"docs":" Differnet ways the value of a data segment can be defined.\n","sig":null,"attributes":[{"value":"/ Differnet ways the value of a data segment can be defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526633,"byte_end":8526695,"line_start":172,"line_end":172,"column_start":1,"column_end":63}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526713,"byte_end":8526735,"line_start":174,"line_end":174,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526932,"byte_end":8526935,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"len","qualname":"<DataVal>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length, in bytes, of the memory used to represent this data\n value.\n","sig":null,"attributes":[{"value":"/ Returns the length, in bytes, of the memory used to represent this data","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526830,"byte_end":8526905,"line_start":181,"line_end":181,"column_start":5,"column_end":80}},{"value":"/ value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526910,"byte_end":8526920,"line_start":182,"line_end":182,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8527168,"byte_end":8527177,"line_start":191,"line_end":191,"column_start":12,"column_end":21},"name":"push_onto","qualname":"<DataVal>::push_onto","value":"pub fn push_onto(&Self, &mut Vec<u8>)","parent":null,"children":[],"decl_id":null,"docs":" Pushes the value of this data value onto the provided list of bytes.\n","sig":null,"attributes":[{"value":"/ Pushes the value of this data value onto the provided list of bytes.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8527084,"byte_end":8527156,"line_start":190,"line_end":190,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1459},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529664,"byte_end":8529667,"line_start":11,"line_end":11,"column_start":12,"column_end":15},"name":"Wat","qualname":"::ast::module::Wat","value":"Wat { module }","parent":null,"children":[{"krate":0,"index":1461}],"decl_id":null,"docs":" A `*.wat` file parser, or a parser for one parenthesized module.","sig":null,"attributes":[{"value":"/ A `*.wat` file parser, or a parser for one parenthesized module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529375,"byte_end":8529443,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529444,"byte_end":8529447,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This is the top-level type which you'll frequently parse when working with","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529448,"byte_end":8529526,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ this crate. A `*.wat` file is either one `module` s-expression or a sequence","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529527,"byte_end":8529607,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ of s-expressions that are module fields.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529608,"byte_end":8529652,"line_start":10,"line_end":10,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529709,"byte_end":8529715,"line_start":13,"line_end":13,"column_start":9,"column_end":15},"name":"module","qualname":"::ast::module::Wat::module","value":"ast::module::Module<'a>","parent":{"krate":0,"index":1459},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529678,"byte_end":8529700,"line_start":12,"line_end":12,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530500,"byte_end":8530506,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"Module","qualname":"::ast::module::Module","value":"Module { span, id, name, kind }","parent":null,"children":[{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471}],"decl_id":null,"docs":" A parsed WebAssembly module.\n","sig":null,"attributes":[{"value":"/ A parsed WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530456,"byte_end":8530488,"line_start":38,"line_end":38,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1468},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530561,"byte_end":8530565,"line_start":41,"line_end":41,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::module::Module::span","value":"ast::token::Span","parent":{"krate":0,"index":1466},"children":[],"decl_id":null,"docs":" Where this `module` was defined\n","sig":null,"attributes":[{"value":"/ Where this `module` was defined","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530517,"byte_end":8530552,"line_start":40,"line_end":40,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1469},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530641,"byte_end":8530643,"line_start":43,"line_end":43,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::module::Module::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":1466},"children":[],"decl_id":null,"docs":" An optional identifier this module is known by\n","sig":null,"attributes":[{"value":"/ An optional identifier this module is known by","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530582,"byte_end":8530632,"line_start":42,"line_end":42,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1470},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530729,"byte_end":8530733,"line_start":45,"line_end":45,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::module::Module::name","value":"std::option::Option<ast::token::NameAnnotation<'a>>","parent":{"krate":0,"index":1466},"children":[],"decl_id":null,"docs":" An optional `@name` annotation for this module\n","sig":null,"attributes":[{"value":"/ An optional `@name` annotation for this module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530670,"byte_end":8530720,"line_start":44,"line_end":44,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1471},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530824,"byte_end":8530828,"line_start":47,"line_end":47,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::module::Module::kind","value":"ast::module::ModuleKind<'a>","parent":{"krate":0,"index":1466},"children":[],"decl_id":null,"docs":" What kind of module this was parsed as.\n","sig":null,"attributes":[{"value":"/ What kind of module this was parsed as.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530772,"byte_end":8530815,"line_start":46,"line_end":46,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1474},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530992,"byte_end":8530996,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"Text","qualname":"::ast::module::ModuleKind::Text","value":"ModuleKind::Text(Vec<ModuleField>)","parent":{"krate":0,"index":1472},"children":[],"decl_id":null,"docs":" A module defined in the textual s-expression format.\n","sig":null,"attributes":[{"value":"/ A module defined in the textual s-expression format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530931,"byte_end":8530987,"line_start":52,"line_end":52,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1477},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531115,"byte_end":8531121,"line_start":56,"line_end":56,"column_start":5,"column_end":11},"name":"Binary","qualname":"::ast::module::ModuleKind::Binary","value":"ModuleKind::Binary(Vec<&'a [u8]>)","parent":{"krate":0,"index":1472},"children":[],"decl_id":null,"docs":" A module that had its raw binary bytes defined via the `binary`\n directive.\n","sig":null,"attributes":[{"value":"/ A module that had its raw binary bytes defined via the `binary`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531024,"byte_end":8531091,"line_start":54,"line_end":54,"column_start":5,"column_end":72}},{"value":"/ directive.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531096,"byte_end":8531110,"line_start":55,"line_end":55,"column_start":5,"column_end":19}}]},{"kind":"Enum","id":{"krate":0,"index":1472},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530910,"byte_end":8530920,"line_start":51,"line_end":51,"column_start":10,"column_end":20},"name":"ModuleKind","qualname":"::ast::module::ModuleKind","value":"pub enum ModuleKind<'a> {\n\n    /// A module defined in the textual s-expression format.\n    Text(Vec<ModuleField>),\n\n    /// A module that had its raw binary bytes defined via the `binary`\n    /// directive.\n    Binary(Vec<&'a [u8]>),\n}","parent":null,"children":[{"krate":0,"index":1474},{"krate":0,"index":1477}],"decl_id":null,"docs":" The different kinds of ways to define a module.\n","sig":null,"attributes":[{"value":"/ The different kinds of ways to define a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8530849,"byte_end":8530900,"line_start":50,"line_end":50,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1482},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532414,"byte_end":8532421,"line_start":83,"line_end":83,"column_start":12,"column_end":19},"name":"resolve","qualname":"<Module>::resolve","value":"pub fn resolve(&mut Self) -> std::result::Result<Names, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Performs a name resolution pass on this [`Module`], resolving all\n symbolic names to indices.","sig":null,"attributes":[{"value":"/ Performs a name resolution pass on this [`Module`], resolving all","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531167,"byte_end":8531236,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"/ symbolic names to indices.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531241,"byte_end":8531271,"line_start":61,"line_end":61,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531276,"byte_end":8531279,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ The WAT format contains a number of shorthands to make it easier to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531284,"byte_end":8531355,"line_start":63,"line_end":63,"column_start":5,"column_end":76}},{"value":"/ write, such as inline exports, inline imports, inline type definitions,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531360,"byte_end":8531435,"line_start":64,"line_end":64,"column_start":5,"column_end":80}},{"value":"/ etc. Additionally it allows using symbolic names such as `$foo` instead","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531440,"byte_end":8531515,"line_start":65,"line_end":65,"column_start":5,"column_end":80}},{"value":"/ of using indices. This module will postprocess an AST to remove all of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531520,"byte_end":8531594,"line_start":66,"line_end":66,"column_start":5,"column_end":79}},{"value":"/ this syntactic sugar, preparing the AST for binary emission.  This is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531599,"byte_end":8531672,"line_start":67,"line_end":67,"column_start":5,"column_end":78}},{"value":"/ where expansion and name resolution happens.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531677,"byte_end":8531725,"line_start":68,"line_end":68,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531730,"byte_end":8531733,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This function will mutate the AST of this [`Module`] and replace all","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531738,"byte_end":8531810,"line_start":70,"line_end":70,"column_start":5,"column_end":77}},{"value":"/ [`super::Index`] arguments with `Index::Num`. This will also expand inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531815,"byte_end":8531893,"line_start":71,"line_end":71,"column_start":5,"column_end":83}},{"value":"/ exports/imports listed on fields and handle various other shorthands of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531898,"byte_end":8531973,"line_start":72,"line_end":72,"column_start":5,"column_end":80}},{"value":"/ the text format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531978,"byte_end":8531998,"line_start":73,"line_end":73,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532003,"byte_end":8532006,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ If successful the AST was modified to be ready for binary encoding. A","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532011,"byte_end":8532084,"line_start":75,"line_end":75,"column_start":5,"column_end":78}},{"value":"/ [`Names`] structure is also returned so if you'd like to do your own","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532089,"byte_end":8532161,"line_start":76,"line_end":76,"column_start":5,"column_end":77}},{"value":"/ name lookups on the result you can do so as well.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532166,"byte_end":8532219,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532224,"byte_end":8532227,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532232,"byte_end":8532244,"line_start":79,"line_end":79,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532249,"byte_end":8532252,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ If an error happens during resolution, such a name resolution error or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532257,"byte_end":8532331,"line_start":81,"line_end":81,"column_start":5,"column_end":79}},{"value":"/ items are found in the wrong order, then an error is returned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532336,"byte_end":8532402,"line_start":82,"line_end":82,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533602,"byte_end":8533608,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"name":"encode","qualname":"<Module>::encode","value":"pub fn encode(&mut Self) -> std::result::Result<Vec<u8>, crate::Error>","parent":null,"children":[],"decl_id":null,"docs":" Encodes this [`Module`] to its binary form.","sig":null,"attributes":[{"value":"/ Encodes this [`Module`] to its binary form.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532532,"byte_end":8532579,"line_start":87,"line_end":87,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532584,"byte_end":8532587,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ This function will take the textual representation in [`Module`] and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532592,"byte_end":8532664,"line_start":89,"line_end":89,"column_start":5,"column_end":77}},{"value":"/ perform all steps necessary to convert it to a binary WebAssembly","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532669,"byte_end":8532738,"line_start":90,"line_end":90,"column_start":5,"column_end":74}},{"value":"/ module, suitable for writing to a `*.wasm` file. This function may","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532743,"byte_end":8532813,"line_start":91,"line_end":91,"column_start":5,"column_end":75}},{"value":"/ internally modify the [`Module`], for example:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532818,"byte_end":8532868,"line_start":92,"line_end":92,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532873,"byte_end":8532876,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ * Name resolution is performed to ensure that `Index::Id` isn't present","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532881,"byte_end":8532956,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/   anywhere in the AST.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532961,"byte_end":8532987,"line_start":95,"line_end":95,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8532992,"byte_end":8532995,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ * Inline shorthands such as imports/exports/types are all expanded to be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533000,"byte_end":8533076,"line_start":97,"line_end":97,"column_start":5,"column_end":81}},{"value":"/   dedicated fields of the module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533081,"byte_end":8533118,"line_start":98,"line_end":98,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533123,"byte_end":8533126,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ * Module fields may be shuffled around to preserve index ordering from","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533131,"byte_end":8533205,"line_start":100,"line_end":100,"column_start":5,"column_end":79}},{"value":"/   expansions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533210,"byte_end":8533227,"line_start":101,"line_end":101,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533232,"byte_end":8533235,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ After all of this expansion has happened the module will be converted to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533240,"byte_end":8533316,"line_start":103,"line_end":103,"column_start":5,"column_end":81}},{"value":"/ its binary form and returned as a `Vec<u8>`. This is then suitable to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533321,"byte_end":8533394,"line_start":104,"line_end":104,"column_start":5,"column_end":78}},{"value":"/ hand off to other wasm runtimes and such.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533399,"byte_end":8533444,"line_start":105,"line_end":105,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533449,"byte_end":8533452,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533457,"byte_end":8533469,"line_start":107,"line_end":107,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533474,"byte_end":8533477,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ This function can return an error for name resolution errors and other","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533482,"byte_end":8533556,"line_start":109,"line_end":109,"column_start":5,"column_end":79}},{"value":"/ expansion-related errors.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8533561,"byte_end":8533590,"line_start":110,"line_end":110,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5923},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535066,"byte_end":8535070,"line_start":162,"line_end":162,"column_start":5,"column_end":9},"name":"Type","qualname":"::ast::module::ModuleField::Type","value":"ModuleField::Type(ast::Type)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5926},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535091,"byte_end":8535097,"line_start":163,"line_end":163,"column_start":5,"column_end":11},"name":"Import","qualname":"::ast::module::ModuleField::Import","value":"ModuleField::Import(ast::Import)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5929},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535120,"byte_end":8535124,"line_start":164,"line_end":164,"column_start":5,"column_end":9},"name":"Func","qualname":"::ast::module::ModuleField::Func","value":"ModuleField::Func(ast::Func)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5932},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535145,"byte_end":8535150,"line_start":165,"line_end":165,"column_start":5,"column_end":10},"name":"Table","qualname":"::ast::module::ModuleField::Table","value":"ModuleField::Table(ast::Table)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5935},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535172,"byte_end":8535178,"line_start":166,"line_end":166,"column_start":5,"column_end":11},"name":"Memory","qualname":"::ast::module::ModuleField::Memory","value":"ModuleField::Memory(ast::Memory)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5938},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535201,"byte_end":8535207,"line_start":167,"line_end":167,"column_start":5,"column_end":11},"name":"Global","qualname":"::ast::module::ModuleField::Global","value":"ModuleField::Global(ast::Global)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5941},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535230,"byte_end":8535236,"line_start":168,"line_end":168,"column_start":5,"column_end":11},"name":"Export","qualname":"::ast::module::ModuleField::Export","value":"ModuleField::Export(ast::Export)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5944},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535259,"byte_end":8535264,"line_start":169,"line_end":169,"column_start":5,"column_end":10},"name":"Start","qualname":"::ast::module::ModuleField::Start","value":"ModuleField::Start(ast::ItemRef)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5947},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535298,"byte_end":8535302,"line_start":170,"line_end":170,"column_start":5,"column_end":9},"name":"Elem","qualname":"::ast::module::ModuleField::Elem","value":"ModuleField::Elem(ast::Elem)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5950},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535323,"byte_end":8535327,"line_start":171,"line_end":171,"column_start":5,"column_end":9},"name":"Data","qualname":"::ast::module::ModuleField::Data","value":"ModuleField::Data(ast::Data)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5953},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535348,"byte_end":8535353,"line_start":172,"line_end":172,"column_start":5,"column_end":10},"name":"Event","qualname":"::ast::module::ModuleField::Event","value":"ModuleField::Event(ast::Event)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5956},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535375,"byte_end":8535381,"line_start":173,"line_end":173,"column_start":5,"column_end":11},"name":"Custom","qualname":"::ast::module::ModuleField::Custom","value":"ModuleField::Custom(ast::Custom)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5959},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535404,"byte_end":8535412,"line_start":174,"line_end":174,"column_start":5,"column_end":13},"name":"Instance","qualname":"::ast::module::ModuleField::Instance","value":"ModuleField::Instance(ast::Instance)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5962},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535437,"byte_end":8535449,"line_start":175,"line_end":175,"column_start":5,"column_end":17},"name":"NestedModule","qualname":"::ast::module::ModuleField::NestedModule","value":"ModuleField::NestedModule(ast::NestedModule)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":5965},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535478,"byte_end":8535483,"line_start":176,"line_end":176,"column_start":5,"column_end":10},"name":"Alias","qualname":"::ast::module::ModuleField::Alias","value":"ModuleField::Alias(ast::Alias)","parent":{"krate":0,"index":5921},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5921},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535044,"byte_end":8535055,"line_start":161,"line_end":161,"column_start":10,"column_end":21},"name":"ModuleField","qualname":"::ast::module::ModuleField","value":"pub enum ModuleField<'a> {\n    Type(ast::Type),\n    Import(ast::Import),\n    Func(ast::Func),\n    Table(ast::Table),\n    Memory(ast::Memory),\n    Global(ast::Global),\n    Export(ast::Export),\n    Start(ast::ItemRef),\n    Elem(ast::Elem),\n    Data(ast::Data),\n    Event(ast::Event),\n    Custom(ast::Custom),\n    Instance(ast::Instance),\n    NestedModule(ast::NestedModule),\n    Alias(ast::Alias),\n}","parent":null,"children":[{"krate":0,"index":5923},{"krate":0,"index":5926},{"krate":0,"index":5929},{"krate":0,"index":5932},{"krate":0,"index":5935},{"krate":0,"index":5938},{"krate":0,"index":5941},{"krate":0,"index":5944},{"krate":0,"index":5947},{"krate":0,"index":5950},{"krate":0,"index":5953},{"krate":0,"index":5956},{"krate":0,"index":5959},{"krate":0,"index":5962},{"krate":0,"index":5965}],"decl_id":null,"docs":" A listing of all possible fields that can make up a WebAssembly module.\n","sig":null,"attributes":[{"value":"/ A listing of all possible fields that can make up a WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8534919,"byte_end":8534994,"line_start":158,"line_end":158,"column_start":1,"column_end":76}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8534995,"byte_end":8535017,"line_start":159,"line_end":159,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":5971},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8537864,"byte_end":8537876,"line_start":6,"line_end":6,"column_start":12,"column_end":24},"name":"NestedModule","qualname":"::ast::nested_module::NestedModule","value":"NestedModule { span, id, name, exports, kind }","parent":null,"children":[{"krate":0,"index":5973},{"krate":0,"index":5974},{"krate":0,"index":5975},{"krate":0,"index":5976},{"krate":0,"index":5977}],"decl_id":null,"docs":" A nested WebAssembly nested module to be created as part of a module.\n","sig":null,"attributes":[{"value":"/ A nested WebAssembly nested module to be created as part of a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8537762,"byte_end":8537835,"line_start":4,"line_end":4,"column_start":1,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":5973},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8537939,"byte_end":8537943,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::nested_module::NestedModule::span","value":"ast::token::Span","parent":{"krate":0,"index":5971},"children":[],"decl_id":null,"docs":" Where this `nested module` was defined.\n","sig":null,"attributes":[{"value":"/ Where this `nested module` was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8537887,"byte_end":8537930,"line_start":7,"line_end":7,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":5974},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538069,"byte_end":8538071,"line_start":11,"line_end":11,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::nested_module::NestedModule::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5971},"children":[],"decl_id":null,"docs":" An identifier that this nested module is resolved with (optionally) for name\n resolution.\n","sig":null,"attributes":[{"value":"/ An identifier that this nested module is resolved with (optionally) for name","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8537960,"byte_end":8538040,"line_start":9,"line_end":9,"column_start":5,"column_end":85}},{"value":"/ resolution.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538045,"byte_end":8538060,"line_start":10,"line_end":10,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":5975},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538180,"byte_end":8538184,"line_start":13,"line_end":13,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::nested_module::NestedModule::name","value":"std::option::Option<ast::token::NameAnnotation<'a>>","parent":{"krate":0,"index":5971},"children":[],"decl_id":null,"docs":" An optional name for this module stored in the custom `name` section.\n","sig":null,"attributes":[{"value":"/ An optional name for this module stored in the custom `name` section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538098,"byte_end":8538171,"line_start":12,"line_end":12,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":5976},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538344,"byte_end":8538351,"line_start":16,"line_end":16,"column_start":9,"column_end":16},"name":"exports","qualname":"::ast::nested_module::NestedModule::exports","value":"ast::export::InlineExport<'a>","parent":{"krate":0,"index":5971},"children":[],"decl_id":null,"docs":" If present, inline export annotations which indicate names this\n definition should be exported under.\n","sig":null,"attributes":[{"value":"/ If present, inline export annotations which indicate names this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538223,"byte_end":8538290,"line_start":14,"line_end":14,"column_start":5,"column_end":72}},{"value":"/ definition should be exported under.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538295,"byte_end":8538335,"line_start":15,"line_end":15,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5977},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538469,"byte_end":8538473,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::nested_module::NestedModule::kind","value":"ast::nested_module::NestedModuleKind<'a>","parent":{"krate":0,"index":5971},"children":[],"decl_id":null,"docs":" What kind of nested module this is, be it an inline-defined or imported one.\n","sig":null,"attributes":[{"value":"/ What kind of nested module this is, be it an inline-defined or imported one.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538380,"byte_end":8538460,"line_start":17,"line_end":17,"column_start":5,"column_end":85}}]},{"kind":"StructVariant","id":{"krate":0,"index":5983},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538691,"byte_end":8538697,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Import","qualname":"::ast::nested_module::NestedModuleKind::Import","value":"NestedModuleKind::Import { import, ty }","parent":{"krate":0,"index":5981},"children":[],"decl_id":null,"docs":" An nested module which is actually defined as an import, such as:\n","sig":null,"attributes":[{"value":"/ An nested module which is actually defined as an import, such as:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538617,"byte_end":8538686,"line_start":24,"line_end":24,"column_start":5,"column_end":74}}]},{"kind":"StructVariant","id":{"krate":0,"index":5986},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538974,"byte_end":8538980,"line_start":33,"line_end":33,"column_start":5,"column_end":11},"name":"Inline","qualname":"::ast::nested_module::NestedModuleKind::Inline","value":"NestedModuleKind::Inline { fields }","parent":{"krate":0,"index":5981},"children":[],"decl_id":null,"docs":" Nested modules whose instantiation is defined inline.\n","sig":null,"attributes":[{"value":"/ Nested modules whose instantiation is defined inline.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538912,"byte_end":8538969,"line_start":32,"line_end":32,"column_start":5,"column_end":62}}]},{"kind":"Enum","id":{"krate":0,"index":5981},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538590,"byte_end":8538606,"line_start":23,"line_end":23,"column_start":10,"column_end":26},"name":"NestedModuleKind","qualname":"::ast::nested_module::NestedModuleKind","value":"pub enum NestedModuleKind<'a> {\n\n    /// An nested module which is actually defined as an import, such as:\n    Import {\n        /// Where this nested module is imported from\n        import: ast::InlineImport,\n        /// The type that this nested module will have.\n        ty: ast::TypeUse,\n    },\n\n    /// Nested modules whose instantiation is defined inline.\n    Inline {\n        /// Fields in the nested module.\n        fields: Vec<ast::ModuleField>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5983},{"krate":0,"index":5986}],"decl_id":null,"docs":" Possible ways to define a nested module in the text format.\n","sig":null,"attributes":[{"value":"/ Possible ways to define a nested module in the text format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8538500,"byte_end":8538563,"line_start":21,"line_end":21,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":5991},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8541868,"byte_end":8541873,"line_start":6,"line_end":6,"column_start":12,"column_end":17},"name":"Table","qualname":"::ast::table::Table","value":"Table { span, id, exports, kind }","parent":null,"children":[{"krate":0,"index":5993},{"krate":0,"index":5994},{"krate":0,"index":5995},{"krate":0,"index":5996}],"decl_id":null,"docs":" A WebAssembly `table` directive in a module.\n","sig":null,"attributes":[{"value":"/ A WebAssembly `table` directive in a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8541791,"byte_end":8541839,"line_start":4,"line_end":4,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":5993},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8541926,"byte_end":8541930,"line_start":8,"line_end":8,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::table::Table::span","value":"ast::token::Span","parent":{"krate":0,"index":5991},"children":[],"decl_id":null,"docs":" Where this table was defined.\n","sig":null,"attributes":[{"value":"/ Where this table was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8541884,"byte_end":8541917,"line_start":7,"line_end":7,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":5994},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542003,"byte_end":8542005,"line_start":10,"line_end":10,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::table::Table::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":5991},"children":[],"decl_id":null,"docs":" An optional name to refer to this table by.\n","sig":null,"attributes":[{"value":"/ An optional name to refer to this table by.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8541947,"byte_end":8541994,"line_start":9,"line_end":9,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":5995},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542153,"byte_end":8542160,"line_start":13,"line_end":13,"column_start":9,"column_end":16},"name":"exports","qualname":"::ast::table::Table::exports","value":"ast::export::InlineExport<'a>","parent":{"krate":0,"index":5991},"children":[],"decl_id":null,"docs":" If present, inline export annotations which indicate names this\n definition should be exported under.\n","sig":null,"attributes":[{"value":"/ If present, inline export annotations which indicate names this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542032,"byte_end":8542099,"line_start":11,"line_end":11,"column_start":5,"column_end":72}},{"value":"/ definition should be exported under.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542104,"byte_end":8542144,"line_start":12,"line_end":12,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":5996},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542252,"byte_end":8542256,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::table::Table::kind","value":"ast::table::TableKind<'a>","parent":{"krate":0,"index":5991},"children":[],"decl_id":null,"docs":" How this table is textually defined in the module.\n","sig":null,"attributes":[{"value":"/ How this table is textually defined in the module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542189,"byte_end":8542243,"line_start":14,"line_end":14,"column_start":5,"column_end":59}}]},{"kind":"StructVariant","id":{"krate":0,"index":6002},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542458,"byte_end":8542464,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Import","qualname":"::ast::table::TableKind::Import","value":"TableKind::Import { import, ty }","parent":{"krate":0,"index":6000},"children":[],"decl_id":null,"docs":" This table is actually an inlined import definition.\n","sig":null,"attributes":[{"value":"/ This table is actually an inlined import definition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542370,"byte_end":8542426,"line_start":21,"line_end":21,"column_start":5,"column_end":61}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542431,"byte_end":8542453,"line_start":22,"line_end":22,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6005},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542628,"byte_end":8542634,"line_start":29,"line_end":29,"column_start":5,"column_end":11},"name":"Normal","qualname":"::ast::table::TableKind::Normal","value":"TableKind::Normal(ast::TableType)","parent":{"krate":0,"index":6000},"children":[],"decl_id":null,"docs":" A typical memory definition which simply says the limits of the table\n","sig":null,"attributes":[{"value":"/ A typical memory definition which simply says the limits of the table","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542550,"byte_end":8542623,"line_start":28,"line_end":28,"column_start":5,"column_end":78}}]},{"kind":"StructVariant","id":{"krate":0,"index":6008},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542737,"byte_end":8542743,"line_start":32,"line_end":32,"column_start":5,"column_end":11},"name":"Inline","qualname":"::ast::table::TableKind::Inline","value":"TableKind::Inline { elem, payload }","parent":{"krate":0,"index":6000},"children":[],"decl_id":null,"docs":" The elem segments of this table, starting from 0, explicitly listed\n","sig":null,"attributes":[{"value":"/ The elem segments of this table, starting from 0, explicitly listed","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542661,"byte_end":8542732,"line_start":31,"line_end":31,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":6000},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542350,"byte_end":8542359,"line_start":20,"line_end":20,"column_start":10,"column_end":19},"name":"TableKind","qualname":"::ast::table::TableKind","value":"pub enum TableKind<'a> {\n\n    /// This table is actually an inlined import definition.\n    #[allow(missing_docs)]\n    Import {\n        import: ast::InlineImport,\n        ty: ast::TableType,\n    },\n\n    /// A typical memory definition which simply says the limits of the table\n    Normal(ast::TableType),\n\n    /// The elem segments of this table, starting from 0, explicitly listed\n    Inline {\n        /// The element type of this table.\n        elem: ast::RefType,\n        /// The element table entries to have, and the length of this list is\n        /// the limits of the table as well.\n        payload: ElemPayload,\n    },\n}","parent":null,"children":[{"krate":0,"index":6002},{"krate":0,"index":6005},{"krate":0,"index":6008}],"decl_id":null,"docs":" Different ways to textually define a table.\n","sig":null,"attributes":[{"value":"/ Different ways to textually define a table.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8542276,"byte_end":8542323,"line_start":18,"line_end":18,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6014},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544365,"byte_end":8544369,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"Elem","qualname":"::ast::table::Elem","value":"Elem { span, id, kind, payload }","parent":null,"children":[{"krate":0,"index":6016},{"krate":0,"index":6017},{"krate":0,"index":6018},{"krate":0,"index":6019}],"decl_id":null,"docs":" An `elem` segment in a WebAssembly module.\n","sig":null,"attributes":[{"value":"/ An `elem` segment in a WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544290,"byte_end":8544336,"line_start":84,"line_end":84,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6016},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544423,"byte_end":8544427,"line_start":88,"line_end":88,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::table::Elem::span","value":"ast::token::Span","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" Where this `elem` was defined.\n","sig":null,"attributes":[{"value":"/ Where this `elem` was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544380,"byte_end":8544414,"line_start":87,"line_end":87,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":6017},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544508,"byte_end":8544510,"line_start":90,"line_end":90,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::table::Elem::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" An optional name by which to refer to this segment.\n","sig":null,"attributes":[{"value":"/ An optional name by which to refer to this segment.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544444,"byte_end":8544499,"line_start":89,"line_end":89,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":6018},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544597,"byte_end":8544601,"line_start":92,"line_end":92,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::table::Elem::kind","value":"ast::table::ElemKind<'a>","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" The way this segment was defined in the module.\n","sig":null,"attributes":[{"value":"/ The way this segment was defined in the module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544537,"byte_end":8544588,"line_start":91,"line_end":91,"column_start":5,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":6019},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544701,"byte_end":8544708,"line_start":94,"line_end":94,"column_start":9,"column_end":16},"name":"payload","qualname":"::ast::table::Elem::payload","value":"ast::table::ElemPayload<'a>","parent":{"krate":0,"index":6014},"children":[],"decl_id":null,"docs":" The payload of this element segment, typically a list of functions.\n","sig":null,"attributes":[{"value":"/ The payload of this element segment, typically a list of functions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544621,"byte_end":8544692,"line_start":93,"line_end":93,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6025},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544959,"byte_end":8544966,"line_start":102,"line_end":102,"column_start":5,"column_end":12},"name":"Passive","qualname":"::ast::table::ElemKind::Passive","value":"ElemKind::Passive","parent":{"krate":0,"index":6023},"children":[],"decl_id":null,"docs":" A passive segment that isn't associated with a table and can be used in\n various bulk-memory instructions.\n","sig":null,"attributes":[{"value":"/ A passive segment that isn't associated with a table and can be used in","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544837,"byte_end":8544912,"line_start":100,"line_end":100,"column_start":5,"column_end":80}},{"value":"/ various bulk-memory instructions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544917,"byte_end":8544954,"line_start":101,"line_end":101,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6027},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545068,"byte_end":8545076,"line_start":106,"line_end":106,"column_start":5,"column_end":13},"name":"Declared","qualname":"::ast::table::ElemKind::Declared","value":"ElemKind::Declared","parent":{"krate":0,"index":6023},"children":[],"decl_id":null,"docs":" A declared element segment that is purely used to declare function\n references.\n","sig":null,"attributes":[{"value":"/ A declared element segment that is purely used to declare function","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544973,"byte_end":8545043,"line_start":104,"line_end":104,"column_start":5,"column_end":75}},{"value":"/ references.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545048,"byte_end":8545063,"line_start":105,"line_end":105,"column_start":5,"column_end":20}}]},{"kind":"StructVariant","id":{"krate":0,"index":6029},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545134,"byte_end":8545140,"line_start":109,"line_end":109,"column_start":5,"column_end":11},"name":"Active","qualname":"::ast::table::ElemKind::Active","value":"ElemKind::Active { table, offset }","parent":{"krate":0,"index":6023},"children":[],"decl_id":null,"docs":" An active segment associated with a table.\n","sig":null,"attributes":[{"value":"/ An active segment associated with a table.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545083,"byte_end":8545129,"line_start":108,"line_end":108,"column_start":5,"column_end":51}}]},{"kind":"Enum","id":{"krate":0,"index":6023},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544818,"byte_end":8544826,"line_start":99,"line_end":99,"column_start":10,"column_end":18},"name":"ElemKind","qualname":"::ast::table::ElemKind","value":"pub enum ElemKind<'a> {\n\n    /// A passive segment that isn't associated with a table and can be used in\n    /// various bulk-memory instructions.\n    Passive,\n\n    /// A declared element segment that is purely used to declare function\n    /// references.\n    Declared,\n\n    /// An active segment associated with a table.\n    Active {\n        /// The table this `elem` is initializing.\n        table: ast::ItemRef,\n        /// The offset within `table` that we'll initialize at.\n        offset: ast::Expression,\n    },\n}","parent":null,"children":[{"krate":0,"index":6025},{"krate":0,"index":6027},{"krate":0,"index":6029}],"decl_id":null,"docs":" Different ways to define an element segment in an mdoule.\n","sig":null,"attributes":[{"value":"/ Different ways to define an element segment in an mdoule.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8544730,"byte_end":8544791,"line_start":97,"line_end":97,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6037},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545545,"byte_end":8545552,"line_start":121,"line_end":121,"column_start":5,"column_end":12},"name":"Indices","qualname":"::ast::table::ElemPayload::Indices","value":"ElemPayload::Indices(Vec<ast::ItemRef>)","parent":{"krate":0,"index":6035},"children":[],"decl_id":null,"docs":" This element segment has a contiguous list of function indices\n","sig":null,"attributes":[{"value":"/ This element segment has a contiguous list of function indices","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545474,"byte_end":8545540,"line_start":120,"line_end":120,"column_start":5,"column_end":71}}]},{"kind":"StructVariant","id":{"krate":0,"index":6040},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545730,"byte_end":8545735,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Exprs","qualname":"::ast::table::ElemPayload::Exprs","value":"ElemPayload::Exprs { ty, exprs }","parent":{"krate":0,"index":6035},"children":[],"decl_id":null,"docs":" This element segment has a list of optional function indices,\n represented as expressions using `ref.func` and `ref.null`.\n","sig":null,"attributes":[{"value":"/ This element segment has a list of optional function indices,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545592,"byte_end":8545657,"line_start":123,"line_end":123,"column_start":5,"column_end":70}},{"value":"/ represented as expressions using `ref.func` and `ref.null`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545662,"byte_end":8545725,"line_start":124,"line_end":124,"column_start":5,"column_end":68}}]},{"kind":"Enum","id":{"krate":0,"index":6035},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545452,"byte_end":8545463,"line_start":119,"line_end":119,"column_start":10,"column_end":21},"name":"ElemPayload","qualname":"::ast::table::ElemPayload","value":"pub enum ElemPayload<'a> {\n\n    /// This element segment has a contiguous list of function indices\n    Indices(Vec<ast::ItemRef>),\n\n    /// This element segment has a list of optional function indices,\n    /// represented as expressions using `ref.func` and `ref.null`.\n    Exprs {\n        /// The desired type of each expression below.\n        ty: ast::RefType,\n        /// The expressions, currently optional function indices, in this\n        /// segment.\n        exprs: Vec<Option<ast::ItemRef>>,\n    },\n}","parent":null,"children":[{"krate":0,"index":6037},{"krate":0,"index":6040}],"decl_id":null,"docs":" Different ways to define the element segment payload in a module.\n","sig":null,"attributes":[{"value":"/ Different ways to define the element segment payload in a module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8545349,"byte_end":8545418,"line_start":117,"line_end":117,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6051},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549515,"byte_end":8549518,"line_start":9,"line_end":9,"column_start":5,"column_end":8},"name":"I32","qualname":"::ast::types::ValType::I32","value":"ValType::I32","parent":{"krate":0,"index":6049},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6053},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549524,"byte_end":8549527,"line_start":10,"line_end":10,"column_start":5,"column_end":8},"name":"I64","qualname":"::ast::types::ValType::I64","value":"ValType::I64","parent":{"krate":0,"index":6049},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6055},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549533,"byte_end":8549536,"line_start":11,"line_end":11,"column_start":5,"column_end":8},"name":"F32","qualname":"::ast::types::ValType::F32","value":"ValType::F32","parent":{"krate":0,"index":6049},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6057},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549542,"byte_end":8549545,"line_start":12,"line_end":12,"column_start":5,"column_end":8},"name":"F64","qualname":"::ast::types::ValType::F64","value":"ValType::F64","parent":{"krate":0,"index":6049},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6059},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549551,"byte_end":8549555,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"V128","qualname":"::ast::types::ValType::V128","value":"ValType::V128","parent":{"krate":0,"index":6049},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6061},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549561,"byte_end":8549564,"line_start":14,"line_end":14,"column_start":5,"column_end":8},"name":"Ref","qualname":"::ast::types::ValType::Ref","value":"ValType::Ref(RefType)","parent":{"krate":0,"index":6049},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6064},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549583,"byte_end":8549586,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"Rtt","qualname":"::ast::types::ValType::Rtt","value":"ValType::Rtt(Option<u32>, ast::Index)","parent":{"krate":0,"index":6049},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6049},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549497,"byte_end":8549504,"line_start":8,"line_end":8,"column_start":10,"column_end":17},"name":"ValType","qualname":"::ast::types::ValType","value":"pub enum ValType<'a> {\n    I32,\n    I64,\n    F32,\n    F64,\n    V128,\n    Ref(RefType),\n    Rtt(Option<u32>, ast::Index),\n}","parent":null,"children":[{"krate":0,"index":6051},{"krate":0,"index":6053},{"krate":0,"index":6055},{"krate":0,"index":6057},{"krate":0,"index":6059},{"krate":0,"index":6061},{"krate":0,"index":6064}],"decl_id":null,"docs":" The value types for a wasm module.\n","sig":null,"attributes":[{"value":"/ The value types for a wasm module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549375,"byte_end":8549413,"line_start":5,"line_end":5,"column_start":1,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549414,"byte_end":8549436,"line_start":6,"line_end":6,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6093},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551465,"byte_end":8551469,"line_start":75,"line_end":75,"column_start":5,"column_end":9},"name":"Func","qualname":"::ast::types::HeapType::Func","value":"HeapType::Func","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" An untyped function reference: funcref. This is part of the reference\n types proposal.\n","sig":null,"attributes":[{"value":"/ An untyped function reference: funcref. This is part of the reference","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551363,"byte_end":8551436,"line_start":73,"line_end":73,"column_start":5,"column_end":78}},{"value":"/ types proposal.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551441,"byte_end":8551460,"line_start":74,"line_end":74,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6095},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551579,"byte_end":8551585,"line_start":78,"line_end":78,"column_start":5,"column_end":11},"name":"Extern","qualname":"::ast::types::HeapType::Extern","value":"HeapType::Extern","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" A reference to any host value: externref. This is part of the reference\n types proposal.\n","sig":null,"attributes":[{"value":"/ A reference to any host value: externref. This is part of the reference","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551475,"byte_end":8551550,"line_start":76,"line_end":76,"column_start":5,"column_end":80}},{"value":"/ types proposal.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551555,"byte_end":8551574,"line_start":77,"line_end":77,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6097},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551684,"byte_end":8551687,"line_start":81,"line_end":81,"column_start":5,"column_end":8},"name":"Any","qualname":"::ast::types::HeapType::Any","value":"HeapType::Any","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" A reference to any reference value: anyref. This is part of the GC\n proposal.\n","sig":null,"attributes":[{"value":"/ A reference to any reference value: anyref. This is part of the GC","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551591,"byte_end":8551661,"line_start":79,"line_end":79,"column_start":5,"column_end":75}},{"value":"/ proposal.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551666,"byte_end":8551679,"line_start":80,"line_end":80,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6099},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551804,"byte_end":8551806,"line_start":84,"line_end":84,"column_start":5,"column_end":7},"name":"Eq","qualname":"::ast::types::HeapType::Eq","value":"HeapType::Eq","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" A reference that has an identity that can be compared: eqref. This is\n part of the GC proposal.\n","sig":null,"attributes":[{"value":"/ A reference that has an identity that can be compared: eqref. This is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551693,"byte_end":8551766,"line_start":82,"line_end":82,"column_start":5,"column_end":78}},{"value":"/ part of the GC proposal.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551771,"byte_end":8551799,"line_start":83,"line_end":83,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6101},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551881,"byte_end":8551885,"line_start":86,"line_end":86,"column_start":5,"column_end":9},"name":"Data","qualname":"::ast::types::HeapType::Data","value":"HeapType::Data","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" A reference to a GC object. This is part of the GC proposal.\n","sig":null,"attributes":[{"value":"/ A reference to a GC object. This is part of the GC proposal.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551812,"byte_end":8551876,"line_start":85,"line_end":85,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6103},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8552046,"byte_end":8552049,"line_start":89,"line_end":89,"column_start":5,"column_end":8},"name":"I31","qualname":"::ast::types::HeapType::I31","value":"HeapType::I31","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" An unboxed 31-bit integer: i31ref. This may be going away if there is no common\n supertype of all reference types. Part of the GC proposal.\n","sig":null,"attributes":[{"value":"/ An unboxed 31-bit integer: i31ref. This may be going away if there is no common","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551891,"byte_end":8551974,"line_start":87,"line_end":87,"column_start":5,"column_end":88}},{"value":"/ supertype of all reference types. Part of the GC proposal.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551979,"byte_end":8552041,"line_start":88,"line_end":88,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6105},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8552156,"byte_end":8552161,"line_start":92,"line_end":92,"column_start":5,"column_end":10},"name":"Index","qualname":"::ast::types::HeapType::Index","value":"HeapType::Index(ast::Index)","parent":{"krate":0,"index":6091},"children":[],"decl_id":null,"docs":" A reference to a function, struct, or array: ref T. This is part of the\n GC proposal.\n","sig":null,"attributes":[{"value":"/ A reference to a function, struct, or array: ref T. This is part of the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8552055,"byte_end":8552130,"line_start":90,"line_end":90,"column_start":5,"column_end":80}},{"value":"/ GC proposal.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8552135,"byte_end":8552151,"line_start":91,"line_end":91,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":6091},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551344,"byte_end":8551352,"line_start":72,"line_end":72,"column_start":10,"column_end":18},"name":"HeapType","qualname":"::ast::types::HeapType","value":"pub enum HeapType<'a> {\n\n    /// An untyped function reference: funcref. This is part of the reference\n    /// types proposal.\n    Func,\n\n    /// A reference to any host value: externref. This is part of the reference\n    /// types proposal.\n    Extern,\n\n    /// A reference to any reference value: anyref. This is part of the GC\n    /// proposal.\n    Any,\n\n    /// A reference that has an identity that can be compared: eqref. This is\n    /// part of the GC proposal.\n    Eq,\n\n    /// A reference to a GC object. This is part of the GC proposal.\n    Data,\n\n    /// An unboxed 31-bit integer: i31ref. This may be going away if there is no common\n    /// supertype of all reference types. Part of the GC proposal.\n    I31,\n\n    /// A reference to a function, struct, or array: ref T. This is part of the\n    /// GC proposal.\n    Index(ast::Index),\n}","parent":null,"children":[{"krate":0,"index":6093},{"krate":0,"index":6095},{"krate":0,"index":6097},{"krate":0,"index":6099},{"krate":0,"index":6101},{"krate":0,"index":6103},{"krate":0,"index":6105}],"decl_id":null,"docs":" A heap type for a reference type\n","sig":null,"attributes":[{"value":"/ A heap type for a reference type","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551224,"byte_end":8551260,"line_start":69,"line_end":69,"column_start":1,"column_end":37}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8551261,"byte_end":8551283,"line_start":70,"line_end":70,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6131},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553701,"byte_end":8553708,"line_start":142,"line_end":142,"column_start":12,"column_end":19},"name":"RefType","qualname":"::ast::types::RefType","value":"RefType { nullable, heap }","parent":null,"children":[{"krate":0,"index":6133},{"krate":0,"index":6134}],"decl_id":null,"docs":" A reference type in a wasm module.\n","sig":null,"attributes":[{"value":"/ A reference type in a wasm module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553577,"byte_end":8553615,"line_start":139,"line_end":139,"column_start":1,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553616,"byte_end":8553638,"line_start":140,"line_end":140,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":6133},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553723,"byte_end":8553731,"line_start":143,"line_end":143,"column_start":9,"column_end":17},"name":"nullable","qualname":"::ast::types::RefType::nullable","value":"bool","parent":{"krate":0,"index":6131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":6134},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553747,"byte_end":8553751,"line_start":144,"line_end":144,"column_start":9,"column_end":13},"name":"heap","qualname":"::ast::types::RefType::heap","value":"ast::types::HeapType<'a>","parent":{"krate":0,"index":6131},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1570},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553866,"byte_end":8553870,"line_start":149,"line_end":149,"column_start":12,"column_end":16},"name":"func","qualname":"<RefType>::func","value":"pub fn func() -> Self","parent":null,"children":[],"decl_id":null,"docs":" A `funcref` as an abbreviation for `(ref null func)`.\n","sig":null,"attributes":[{"value":"/ A `funcref` as an abbreviation for `(ref null func)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553797,"byte_end":8553854,"line_start":148,"line_end":148,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554058,"byte_end":8554066,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"extern","qualname":"<RefType>::extern","value":"pub fn r#extern() -> Self","parent":null,"children":[],"decl_id":null,"docs":" An `externref` as an abbreviation for `(ref null extern)`.\n","sig":null,"attributes":[{"value":"/ An `externref` as an abbreviation for `(ref null extern)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553984,"byte_end":8554046,"line_start":156,"line_end":156,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1572},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554250,"byte_end":8554253,"line_start":165,"line_end":165,"column_start":12,"column_end":15},"name":"any","qualname":"<RefType>::any","value":"pub fn any() -> Self","parent":null,"children":[],"decl_id":null,"docs":" An `anyref` as an abbreviation for `(ref null any)`.\n","sig":null,"attributes":[{"value":"/ An `anyref` as an abbreviation for `(ref null any)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554182,"byte_end":8554238,"line_start":164,"line_end":164,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1573},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554432,"byte_end":8554434,"line_start":173,"line_end":173,"column_start":12,"column_end":14},"name":"eq","qualname":"<RefType>::eq","value":"pub fn eq() -> Self","parent":null,"children":[],"decl_id":null,"docs":" An `eqref` as an abbreviation for `(ref null eq)`.\n","sig":null,"attributes":[{"value":"/ An `eqref` as an abbreviation for `(ref null eq)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554366,"byte_end":8554420,"line_start":172,"line_end":172,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554616,"byte_end":8554620,"line_start":181,"line_end":181,"column_start":12,"column_end":16},"name":"data","qualname":"<RefType>::data","value":"pub fn data() -> Self","parent":null,"children":[],"decl_id":null,"docs":" An `dataref` as an abbreviation for `(ref null data)`.\n","sig":null,"attributes":[{"value":"/ An `dataref` as an abbreviation for `(ref null data)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554546,"byte_end":8554604,"line_start":180,"line_end":180,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1575},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554802,"byte_end":8554805,"line_start":189,"line_end":189,"column_start":12,"column_end":15},"name":"i31","qualname":"<RefType>::i31","value":"pub fn i31() -> Self","parent":null,"children":[],"decl_id":null,"docs":" An `i31ref` as an abbreviation for `(ref null i31)`.\n","sig":null,"attributes":[{"value":"/ An `i31ref` as an abbreviation for `(ref null i31)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554734,"byte_end":8554790,"line_start":188,"line_end":188,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6160},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557267,"byte_end":8557269,"line_start":267,"line_end":267,"column_start":5,"column_end":7},"name":"I8","qualname":"::ast::types::StorageType::I8","value":"StorageType::I8","parent":{"krate":0,"index":6158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6162},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557275,"byte_end":8557278,"line_start":268,"line_end":268,"column_start":5,"column_end":8},"name":"I16","qualname":"::ast::types::StorageType::I16","value":"StorageType::I16","parent":{"krate":0,"index":6158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":6164},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557284,"byte_end":8557287,"line_start":269,"line_end":269,"column_start":5,"column_end":8},"name":"Val","qualname":"::ast::types::StorageType::Val","value":"StorageType::Val(ValType)","parent":{"krate":0,"index":6158},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":6158},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557245,"byte_end":8557256,"line_start":266,"line_end":266,"column_start":10,"column_end":21},"name":"StorageType","qualname":"::ast::types::StorageType","value":"pub enum StorageType<'a> { I8, I16, Val(ValType), }","parent":null,"children":[{"krate":0,"index":6160},{"krate":0,"index":6162},{"krate":0,"index":6164}],"decl_id":null,"docs":" The types of values that may be used in a struct or array.\n","sig":null,"attributes":[{"value":"/ The types of values that may be used in a struct or array.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557099,"byte_end":8557161,"line_start":263,"line_end":263,"column_start":1,"column_end":63}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557162,"byte_end":8557184,"line_start":264,"line_end":264,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":6190},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557910,"byte_end":8557920,"line_start":291,"line_end":291,"column_start":12,"column_end":22},"name":"GlobalType","qualname":"::ast::types::GlobalType","value":"GlobalType { ty, mutable }","parent":null,"children":[{"krate":0,"index":6192},{"krate":0,"index":6193}],"decl_id":null,"docs":" Type for a `global` in a wasm module\n","sig":null,"attributes":[{"value":"/ Type for a `global` in a wasm module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557807,"byte_end":8557847,"line_start":289,"line_end":289,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":6192},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557977,"byte_end":8557979,"line_start":293,"line_end":293,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::types::GlobalType::ty","value":"ast::types::ValType<'a>","parent":{"krate":0,"index":6190},"children":[],"decl_id":null,"docs":" The element type of this `global`\n","sig":null,"attributes":[{"value":"/ The element type of this `global`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557931,"byte_end":8557968,"line_start":292,"line_end":292,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":6193},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558055,"byte_end":8558062,"line_start":295,"line_end":295,"column_start":9,"column_end":16},"name":"mutable","qualname":"::ast::types::GlobalType::mutable","value":"bool","parent":{"krate":0,"index":6190},"children":[],"decl_id":null,"docs":" Whether or not the global is mutable or not.\n","sig":null,"attributes":[{"value":"/ Whether or not the global is mutable or not.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557998,"byte_end":8558046,"line_start":294,"line_end":294,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6217},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558675,"byte_end":8558681,"line_start":319,"line_end":319,"column_start":12,"column_end":18},"name":"Limits","qualname":"::ast::types::Limits","value":"Limits { min, max }","parent":null,"children":[{"krate":0,"index":6218},{"krate":0,"index":6219}],"decl_id":null,"docs":" Min/max limits used for tables/memories.\n","sig":null,"attributes":[{"value":"/ Min/max limits used for tables/memories.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558568,"byte_end":8558612,"line_start":317,"line_end":317,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6218},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558743,"byte_end":8558746,"line_start":321,"line_end":321,"column_start":9,"column_end":12},"name":"min","qualname":"::ast::types::Limits::min","value":"u32","parent":{"krate":0,"index":6217},"children":[],"decl_id":null,"docs":" The minimum number of units for this type.\n","sig":null,"attributes":[{"value":"/ The minimum number of units for this type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558688,"byte_end":8558734,"line_start":320,"line_end":320,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":6219},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558820,"byte_end":8558823,"line_start":323,"line_end":323,"column_start":9,"column_end":12},"name":"max","qualname":"::ast::types::Limits::max","value":"std::option::Option<u32>","parent":{"krate":0,"index":6217},"children":[],"decl_id":null,"docs":" An optional maximum number of units for this type.\n","sig":null,"attributes":[{"value":"/ An optional maximum number of units for this type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558757,"byte_end":8558811,"line_start":322,"line_end":322,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":6235},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559229,"byte_end":8559237,"line_start":340,"line_end":340,"column_start":12,"column_end":20},"name":"Limits64","qualname":"::ast::types::Limits64","value":"Limits64 { min, max }","parent":null,"children":[{"krate":0,"index":6236},{"krate":0,"index":6237}],"decl_id":null,"docs":" Min/max limits used for 64-bit memories\n","sig":null,"attributes":[{"value":"/ Min/max limits used for 64-bit memories","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559123,"byte_end":8559166,"line_start":338,"line_end":338,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":6236},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559299,"byte_end":8559302,"line_start":342,"line_end":342,"column_start":9,"column_end":12},"name":"min","qualname":"::ast::types::Limits64::min","value":"u64","parent":{"krate":0,"index":6235},"children":[],"decl_id":null,"docs":" The minimum number of units for this type.\n","sig":null,"attributes":[{"value":"/ The minimum number of units for this type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559244,"byte_end":8559290,"line_start":341,"line_end":341,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":6237},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559376,"byte_end":8559379,"line_start":344,"line_end":344,"column_start":9,"column_end":12},"name":"max","qualname":"::ast::types::Limits64::max","value":"std::option::Option<u64>","parent":{"krate":0,"index":6235},"children":[],"decl_id":null,"docs":" An optional maximum number of units for this type.\n","sig":null,"attributes":[{"value":"/ An optional maximum number of units for this type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559313,"byte_end":8559367,"line_start":343,"line_end":343,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":6253},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559792,"byte_end":8559801,"line_start":361,"line_end":361,"column_start":12,"column_end":21},"name":"TableType","qualname":"::ast::types::TableType","value":"TableType { limits, elem }","parent":null,"children":[{"krate":0,"index":6255},{"krate":0,"index":6256}],"decl_id":null,"docs":" Configuration for a table of a wasm mdoule\n","sig":null,"attributes":[{"value":"/ Configuration for a table of a wasm mdoule","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559683,"byte_end":8559729,"line_start":359,"line_end":359,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6255},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559866,"byte_end":8559872,"line_start":363,"line_end":363,"column_start":9,"column_end":15},"name":"limits","qualname":"::ast::types::TableType::limits","value":"ast::types::Limits","parent":{"krate":0,"index":6253},"children":[],"decl_id":null,"docs":" Limits on the element sizes of this table\n","sig":null,"attributes":[{"value":"/ Limits on the element sizes of this table","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559812,"byte_end":8559857,"line_start":362,"line_end":362,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6256},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559939,"byte_end":8559943,"line_start":365,"line_end":365,"column_start":9,"column_end":13},"name":"elem","qualname":"::ast::types::TableType::elem","value":"ast::types::RefType<'a>","parent":{"krate":0,"index":6253},"children":[],"decl_id":null,"docs":" The type of element stored in this table\n","sig":null,"attributes":[{"value":"/ The type of element stored in this table","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559886,"byte_end":8559930,"line_start":364,"line_end":364,"column_start":5,"column_end":49}}]},{"kind":"StructVariant","id":{"krate":0,"index":6281},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8560315,"byte_end":8560318,"line_start":381,"line_end":381,"column_start":5,"column_end":8},"name":"B32","qualname":"::ast::types::MemoryType::B32","value":"MemoryType::B32 { limits, shared }","parent":{"krate":0,"index":6280},"children":[],"decl_id":null,"docs":" A 32-bit memory\n","sig":null,"attributes":[{"value":"/ A 32-bit memory","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8560291,"byte_end":8560310,"line_start":380,"line_end":380,"column_start":5,"column_end":24}}]},{"kind":"StructVariant","id":{"krate":0,"index":6284},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8560519,"byte_end":8560522,"line_start":388,"line_end":388,"column_start":5,"column_end":8},"name":"B64","qualname":"::ast::types::MemoryType::B64","value":"MemoryType::B64 { limits, shared }","parent":{"krate":0,"index":6280},"children":[],"decl_id":null,"docs":" A 64-bit memory\n","sig":null,"attributes":[{"value":"/ A 64-bit memory","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8560495,"byte_end":8560514,"line_start":387,"line_end":387,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":6280},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8560274,"byte_end":8560284,"line_start":379,"line_end":379,"column_start":10,"column_end":20},"name":"MemoryType","qualname":"::ast::types::MemoryType","value":"pub enum MemoryType {\n\n    /// A 32-bit memory\n    B32 {\n        /// Limits on the page sizes of this memory\n        limits: Limits,\n        /// Whether or not this is a shared (atomic) memory type\n        shared: bool,\n    },\n\n    /// A 64-bit memory\n    B64 {\n        /// Limits on the page sizes of this memory\n        limits: Limits64,\n        /// Whether or not this is a shared (atomic) memory type\n        shared: bool,\n    },\n}","parent":null,"children":[{"krate":0,"index":6281},{"krate":0,"index":6284}],"decl_id":null,"docs":" Configuration for a memory of a wasm module\n","sig":null,"attributes":[{"value":"/ Configuration for a memory of a wasm module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8560166,"byte_end":8560213,"line_start":377,"line_end":377,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":6302},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8561376,"byte_end":8561388,"line_start":414,"line_end":414,"column_start":12,"column_end":24},"name":"FunctionType","qualname":"::ast::types::FunctionType","value":"FunctionType { params, results }","parent":null,"children":[{"krate":0,"index":6304},{"krate":0,"index":6305}],"decl_id":null,"docs":" A function type with parameters and results.\n","sig":null,"attributes":[{"value":"/ A function type with parameters and results.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8561283,"byte_end":8561331,"line_start":412,"line_end":412,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":6304},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8561548,"byte_end":8561554,"line_start":417,"line_end":417,"column_start":9,"column_end":15},"name":"params","qualname":"::ast::types::FunctionType::params","value":"std::boxed::Box<[(std::option::Option<ast::token::Id<'a>>, std::option::Option<ast::token::NameAnnotation<'a>>, ast::types::ValType<'a>)]>","parent":{"krate":0,"index":6302},"children":[],"decl_id":null,"docs":" The parameters of a function, optionally each having an identifier for\n name resolution and a name for the custom `name` section.\n","sig":null,"attributes":[{"value":"/ The parameters of a function, optionally each having an identifier for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8561399,"byte_end":8561473,"line_start":415,"line_end":415,"column_start":5,"column_end":79}},{"value":"/ name resolution and a name for the custom `name` section.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8561478,"byte_end":8561539,"line_start":416,"line_end":416,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":6305},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8561743,"byte_end":8561750,"line_start":425,"line_end":425,"column_start":9,"column_end":16},"name":"results","qualname":"::ast::types::FunctionType::results","value":"std::boxed::Box<[ast::types::ValType<'a>]>","parent":{"krate":0,"index":6302},"children":[],"decl_id":null,"docs":" The results types of a function.\n","sig":null,"attributes":[{"value":"/ The results types of a function.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8561698,"byte_end":8561734,"line_start":424,"line_end":424,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":6315},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8564344,"byte_end":8564363,"line_start":504,"line_end":504,"column_start":12,"column_end":31},"name":"FunctionTypeNoNames","qualname":"::ast::types::FunctionTypeNoNames","value":"","parent":null,"children":[],"decl_id":null,"docs":" A function type with parameters and results.\n","sig":null,"attributes":[{"value":"/ A function type with parameters and results.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8564251,"byte_end":8564299,"line_start":502,"line_end":502,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":6318},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8564368,"byte_end":8564388,"line_start":504,"line_end":504,"column_start":36,"column_end":56},"name":"0","qualname":"::ast::types::FunctionTypeNoNames::0","value":"ast::types::FunctionType<'a>","parent":{"krate":0,"index":6315},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6328},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565114,"byte_end":8565124,"line_start":535,"line_end":535,"column_start":12,"column_end":22},"name":"StructType","qualname":"::ast::types::StructType","value":"StructType { fields }","parent":null,"children":[{"krate":0,"index":6330}],"decl_id":null,"docs":" A struct type with fields.\n","sig":null,"attributes":[{"value":"/ A struct type with fields.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565048,"byte_end":8565078,"line_start":533,"line_end":533,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6330},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565172,"byte_end":8565178,"line_start":537,"line_end":537,"column_start":9,"column_end":15},"name":"fields","qualname":"::ast::types::StructType::fields","value":"std::vec::Vec<ast::types::StructField<'a>>","parent":{"krate":0,"index":6328},"children":[],"decl_id":null,"docs":" The fields of the struct\n","sig":null,"attributes":[{"value":"/ The fields of the struct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565135,"byte_end":8565163,"line_start":536,"line_end":536,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":6337},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565831,"byte_end":8565842,"line_start":560,"line_end":560,"column_start":12,"column_end":23},"name":"StructField","qualname":"::ast::types::StructField","value":"StructField { id, mutable, ty }","parent":null,"children":[{"krate":0,"index":6339},{"krate":0,"index":6340},{"krate":0,"index":6341}],"decl_id":null,"docs":" A field of a struct type.\n","sig":null,"attributes":[{"value":"/ A field of a struct type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565766,"byte_end":8565795,"line_start":558,"line_end":558,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":6339},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565909,"byte_end":8565911,"line_start":562,"line_end":562,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::types::StructField::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":6337},"children":[],"decl_id":null,"docs":" An optional identifier for name resolution.\n","sig":null,"attributes":[{"value":"/ An optional identifier for name resolution.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565853,"byte_end":8565900,"line_start":561,"line_end":561,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":6340},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565992,"byte_end":8565999,"line_start":564,"line_end":564,"column_start":9,"column_end":16},"name":"mutable","qualname":"::ast::types::StructField::mutable","value":"bool","parent":{"krate":0,"index":6337},"children":[],"decl_id":null,"docs":" Whether this field may be mutated or not.\n","sig":null,"attributes":[{"value":"/ Whether this field may be mutated or not.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565938,"byte_end":8565983,"line_start":563,"line_end":563,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6341},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566062,"byte_end":8566064,"line_start":566,"line_end":566,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::types::StructField::ty","value":"ast::types::StorageType<'a>","parent":{"krate":0,"index":6337},"children":[],"decl_id":null,"docs":" The storage type stored in this field.\n","sig":null,"attributes":[{"value":"/ The storage type stored in this field.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566011,"byte_end":8566053,"line_start":565,"line_end":565,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":6348},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566669,"byte_end":8566678,"line_start":587,"line_end":587,"column_start":12,"column_end":21},"name":"ArrayType","qualname":"::ast::types::ArrayType","value":"ArrayType { mutable, ty }","parent":null,"children":[{"krate":0,"index":6350},{"krate":0,"index":6351}],"decl_id":null,"docs":" An array type with fields.\n","sig":null,"attributes":[{"value":"/ An array type with fields.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566603,"byte_end":8566633,"line_start":585,"line_end":585,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6350},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566743,"byte_end":8566750,"line_start":589,"line_end":589,"column_start":9,"column_end":16},"name":"mutable","qualname":"::ast::types::ArrayType::mutable","value":"bool","parent":{"krate":0,"index":6348},"children":[],"decl_id":null,"docs":" Whether this field may be mutated or not.\n","sig":null,"attributes":[{"value":"/ Whether this field may be mutated or not.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566689,"byte_end":8566734,"line_start":588,"line_end":588,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6351},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566813,"byte_end":8566815,"line_start":591,"line_end":591,"column_start":9,"column_end":11},"name":"ty","qualname":"::ast::types::ArrayType::ty","value":"ast::types::StorageType<'a>","parent":{"krate":0,"index":6348},"children":[],"decl_id":null,"docs":" The storage type stored in this field.\n","sig":null,"attributes":[{"value":"/ The storage type stored in this field.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566762,"byte_end":8566804,"line_start":590,"line_end":590,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":6358},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8567357,"byte_end":8567367,"line_start":611,"line_end":611,"column_start":12,"column_end":22},"name":"ModuleType","qualname":"::ast::types::ModuleType","value":"ModuleType { imports, exports }","parent":null,"children":[{"krate":0,"index":6360},{"krate":0,"index":6361}],"decl_id":null,"docs":" A type for a nested module\n","sig":null,"attributes":[{"value":"/ A type for a nested module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8567282,"byte_end":8567312,"line_start":609,"line_end":609,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6360},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8567442,"byte_end":8567449,"line_start":613,"line_end":613,"column_start":9,"column_end":16},"name":"imports","qualname":"::ast::types::ModuleType::imports","value":"std::vec::Vec<ast::import::Import<'a>>","parent":{"krate":0,"index":6358},"children":[],"decl_id":null,"docs":" The imports that are expected for this module type.\n","sig":null,"attributes":[{"value":"/ The imports that are expected for this module type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8567378,"byte_end":8567433,"line_start":612,"line_end":612,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":6361},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8567544,"byte_end":8567551,"line_start":615,"line_end":615,"column_start":9,"column_end":16},"name":"exports","qualname":"::ast::types::ModuleType::exports","value":"std::vec::Vec<ast::types::ExportType<'a>>","parent":{"krate":0,"index":6358},"children":[],"decl_id":null,"docs":" The exports that this module type is expected to have.\n","sig":null,"attributes":[{"value":"/ The exports that this module type is expected to have.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8567477,"byte_end":8567535,"line_start":614,"line_end":614,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":6371},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568523,"byte_end":8568535,"line_start":654,"line_end":654,"column_start":12,"column_end":24},"name":"InstanceType","qualname":"::ast::types::InstanceType","value":"InstanceType { exports }","parent":null,"children":[{"krate":0,"index":6373}],"decl_id":null,"docs":" A type for a nested instance\n","sig":null,"attributes":[{"value":"/ A type for a nested instance","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568446,"byte_end":8568478,"line_start":652,"line_end":652,"column_start":1,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":6373},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568596,"byte_end":8568603,"line_start":656,"line_end":656,"column_start":9,"column_end":16},"name":"exports","qualname":"::ast::types::InstanceType::exports","value":"std::vec::Vec<ast::types::ExportType<'a>>","parent":{"krate":0,"index":6371},"children":[],"decl_id":null,"docs":" The exported types from this instance\n","sig":null,"attributes":[{"value":"/ The exported types from this instance","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568546,"byte_end":8568587,"line_start":655,"line_end":655,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6383},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569353,"byte_end":8569363,"line_start":688,"line_end":688,"column_start":12,"column_end":22},"name":"ExportType","qualname":"::ast::types::ExportType","value":"ExportType { span, name, item }","parent":null,"children":[{"krate":0,"index":6385},{"krate":0,"index":6386},{"krate":0,"index":6387}],"decl_id":null,"docs":" The type of an exported item from a module or instance.\n","sig":null,"attributes":[{"value":"/ The type of an exported item from a module or instance.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569258,"byte_end":8569317,"line_start":686,"line_end":686,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":6385},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569417,"byte_end":8569421,"line_start":690,"line_end":690,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::types::ExportType::span","value":"ast::token::Span","parent":{"krate":0,"index":6383},"children":[],"decl_id":null,"docs":" Where this export was defined.\n","sig":null,"attributes":[{"value":"/ Where this export was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569374,"byte_end":8569408,"line_start":689,"line_end":689,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":6386},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569475,"byte_end":8569479,"line_start":692,"line_end":692,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::types::ExportType::name","value":"&'a str","parent":{"krate":0,"index":6383},"children":[],"decl_id":null,"docs":" The name of this export.\n","sig":null,"attributes":[{"value":"/ The name of this export.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569438,"byte_end":8569466,"line_start":691,"line_end":691,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":6387},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569549,"byte_end":8569553,"line_start":694,"line_end":694,"column_start":9,"column_end":13},"name":"item","qualname":"::ast::types::ExportType::item","value":"ast::import::ItemSig<'a>","parent":{"krate":0,"index":6383},"children":[],"decl_id":null,"docs":" The signature of the item that's exported.\n","sig":null,"attributes":[{"value":"/ The signature of the item that's exported.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569494,"byte_end":8569540,"line_start":693,"line_end":693,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6396},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569966,"byte_end":8569970,"line_start":710,"line_end":710,"column_start":5,"column_end":9},"name":"Func","qualname":"::ast::types::TypeDef::Func","value":"TypeDef::Func(FunctionType)","parent":{"krate":0,"index":6394},"children":[],"decl_id":null,"docs":" A function type definition.\n","sig":null,"attributes":[{"value":"/ A function type definition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569930,"byte_end":8569961,"line_start":709,"line_end":709,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6399},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570028,"byte_end":8570034,"line_start":712,"line_end":712,"column_start":5,"column_end":11},"name":"Struct","qualname":"::ast::types::TypeDef::Struct","value":"TypeDef::Struct(StructType)","parent":{"krate":0,"index":6394},"children":[],"decl_id":null,"docs":" A struct type definition.\n","sig":null,"attributes":[{"value":"/ A struct type definition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569994,"byte_end":8570023,"line_start":711,"line_end":711,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6402},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570090,"byte_end":8570095,"line_start":714,"line_end":714,"column_start":5,"column_end":10},"name":"Array","qualname":"::ast::types::TypeDef::Array","value":"TypeDef::Array(ArrayType)","parent":{"krate":0,"index":6394},"children":[],"decl_id":null,"docs":" An array type definition.\n","sig":null,"attributes":[{"value":"/ An array type definition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570056,"byte_end":8570085,"line_start":713,"line_end":713,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6405},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570150,"byte_end":8570156,"line_start":716,"line_end":716,"column_start":5,"column_end":11},"name":"Module","qualname":"::ast::types::TypeDef::Module","value":"TypeDef::Module(ModuleType)","parent":{"krate":0,"index":6394},"children":[],"decl_id":null,"docs":" A module type definition.\n","sig":null,"attributes":[{"value":"/ A module type definition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570116,"byte_end":8570145,"line_start":715,"line_end":715,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6408},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570215,"byte_end":8570223,"line_start":718,"line_end":718,"column_start":5,"column_end":13},"name":"Instance","qualname":"::ast::types::TypeDef::Instance","value":"TypeDef::Instance(InstanceType)","parent":{"krate":0,"index":6394},"children":[],"decl_id":null,"docs":" An instance type definition.\n","sig":null,"attributes":[{"value":"/ An instance type definition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570178,"byte_end":8570210,"line_start":717,"line_end":717,"column_start":5,"column_end":37}}]},{"kind":"Enum","id":{"krate":0,"index":6394},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569912,"byte_end":8569919,"line_start":708,"line_end":708,"column_start":10,"column_end":17},"name":"TypeDef","qualname":"::ast::types::TypeDef","value":"pub enum TypeDef<'a> {\n\n    /// A function type definition.\n    Func(FunctionType),\n\n    /// A struct type definition.\n    Struct(StructType),\n\n    /// An array type definition.\n    Array(ArrayType),\n\n    /// A module type definition.\n    Module(ModuleType),\n\n    /// An instance type definition.\n    Instance(InstanceType),\n}","parent":null,"children":[{"krate":0,"index":6396},{"krate":0,"index":6399},{"krate":0,"index":6402},{"krate":0,"index":6405},{"krate":0,"index":6408}],"decl_id":null,"docs":" A definition of a type.\n","sig":null,"attributes":[{"value":"/ A definition of a type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569858,"byte_end":8569885,"line_start":706,"line_end":706,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":6414},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570309,"byte_end":8570313,"line_start":723,"line_end":723,"column_start":12,"column_end":16},"name":"Type","qualname":"::ast::types::Type","value":"Type { span, id, def }","parent":null,"children":[{"krate":0,"index":6416},{"krate":0,"index":6417},{"krate":0,"index":6418}],"decl_id":null,"docs":" A type declaration in a module\n","sig":null,"attributes":[{"value":"/ A type declaration in a module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570246,"byte_end":8570280,"line_start":721,"line_end":721,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":6416},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570365,"byte_end":8570369,"line_start":725,"line_end":725,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::types::Type::span","value":"ast::token::Span","parent":{"krate":0,"index":6414},"children":[],"decl_id":null,"docs":" Where this type was defined.\n","sig":null,"attributes":[{"value":"/ Where this type was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570324,"byte_end":8570356,"line_start":724,"line_end":724,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":6417},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570483,"byte_end":8570485,"line_start":728,"line_end":728,"column_start":9,"column_end":11},"name":"id","qualname":"::ast::types::Type::id","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":6414},"children":[],"decl_id":null,"docs":" An optional identifer to refer to this `type` by as part of name\n resolution.\n","sig":null,"attributes":[{"value":"/ An optional identifer to refer to this `type` by as part of name","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570386,"byte_end":8570454,"line_start":726,"line_end":726,"column_start":5,"column_end":73}},{"value":"/ resolution.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570459,"byte_end":8570474,"line_start":727,"line_end":727,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":6418},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570555,"byte_end":8570558,"line_start":730,"line_end":730,"column_start":9,"column_end":12},"name":"def","qualname":"::ast::types::Type::def","value":"ast::types::TypeDef<'a>","parent":{"krate":0,"index":6414},"children":[],"decl_id":null,"docs":" The type that we're declaring.\n","sig":null,"attributes":[{"value":"/ The type that we're declaring.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570512,"byte_end":8570546,"line_start":729,"line_end":729,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":6422},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8571772,"byte_end":8571779,"line_start":764,"line_end":764,"column_start":12,"column_end":19},"name":"TypeUse","qualname":"::ast::types::TypeUse","value":"TypeUse { index, inline }","parent":null,"children":[{"krate":0,"index":6425},{"krate":0,"index":6426}],"decl_id":null,"docs":" A reference to a type defined in this module.\n","sig":null,"attributes":[{"value":"/ A reference to a type defined in this module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8571687,"byte_end":8571736,"line_start":762,"line_end":762,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":6425},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8571857,"byte_end":8571862,"line_start":766,"line_end":766,"column_start":9,"column_end":14},"name":"index","qualname":"::ast::types::TypeUse::index","value":"std::option::Option<ast::token::ItemRef<'a, ast::kw::r#type>>","parent":{"krate":0,"index":6422},"children":[],"decl_id":null,"docs":" The type that we're referencing, if it was present.\n","sig":null,"attributes":[{"value":"/ The type that we're referencing, if it was present.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8571793,"byte_end":8571848,"line_start":765,"line_end":765,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":6426},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8571947,"byte_end":8571953,"line_start":768,"line_end":768,"column_start":9,"column_end":15},"name":"inline","qualname":"::ast::types::TypeUse::inline","value":"std::option::Option<T>","parent":{"krate":0,"index":6422},"children":[],"decl_id":null,"docs":" The inline type, if present.\n","sig":null,"attributes":[{"value":"/ The inline type, if present.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8571906,"byte_end":8571938,"line_start":767,"line_end":767,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8572122,"byte_end":8572136,"line_start":774,"line_end":774,"column_start":12,"column_end":26},"name":"new_with_index","qualname":"<TypeUse>::new_with_index","value":"pub fn new_with_index(ast::Index) -> TypeUse","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new instance of `TypeUse` without an inline definition but\n with an index specified.\n","sig":null,"attributes":[{"value":"/ Constructs a new instance of `TypeUse` without an inline definition but","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8572002,"byte_end":8572077,"line_start":772,"line_end":772,"column_start":5,"column_end":80}},{"value":"/ with an index specified.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8572082,"byte_end":8572110,"line_start":773,"line_end":773,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1688},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573457,"byte_end":8573461,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Wast","qualname":"::ast::wast::Wast","value":"Wast { directives }","parent":null,"children":[{"krate":0,"index":1690}],"decl_id":null,"docs":" A parsed representation of a `*.wast` file.","sig":null,"attributes":[{"value":"/ A parsed representation of a `*.wast` file.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573174,"byte_end":8573221,"line_start":5,"line_end":5,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573222,"byte_end":8573225,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ WAST files are not officially specified but are used in the official test","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573226,"byte_end":8573303,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ suite to write official spec tests for wasm. This type represents a parsed","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573304,"byte_end":8573382,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ `*.wast` file which parses a list of directives in a file.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573383,"byte_end":8573445,"line_start":9,"line_end":9,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":1690},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573503,"byte_end":8573513,"line_start":12,"line_end":12,"column_start":9,"column_end":19},"name":"directives","qualname":"::ast::wast::Wast::directives","value":"std::vec::Vec<ast::wast::WastDirective<'a>>","parent":{"krate":0,"index":1688},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573472,"byte_end":8573494,"line_start":11,"line_end":11,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1702},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574824,"byte_end":8574830,"line_start":55,"line_end":55,"column_start":5,"column_end":11},"name":"Module","qualname":"::ast::wast::WastDirective::Module","value":"WastDirective::Module(ast::Module)","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1705},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574853,"byte_end":8574864,"line_start":56,"line_end":56,"column_start":5,"column_end":16},"name":"QuoteModule","qualname":"::ast::wast::WastDirective::QuoteModule","value":"WastDirective::QuoteModule { span, source }","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1708},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574934,"byte_end":8574949,"line_start":60,"line_end":60,"column_start":5,"column_end":20},"name":"AssertMalformed","qualname":"::ast::wast::WastDirective::AssertMalformed","value":"WastDirective::AssertMalformed { span, module, message }","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1712},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575047,"byte_end":8575060,"line_start":65,"line_end":65,"column_start":5,"column_end":18},"name":"AssertInvalid","qualname":"::ast::wast::WastDirective::AssertInvalid","value":"WastDirective::AssertInvalid { span, module, message }","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1716},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575158,"byte_end":8575166,"line_start":70,"line_end":70,"column_start":5,"column_end":13},"name":"Register","qualname":"::ast::wast::WastDirective::Register","value":"WastDirective::Register { span, name, module }","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1720},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575265,"byte_end":8575271,"line_start":75,"line_end":75,"column_start":5,"column_end":11},"name":"Invoke","qualname":"::ast::wast::WastDirective::Invoke","value":"WastDirective::Invoke(WastInvoke)","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1723},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575293,"byte_end":8575303,"line_start":76,"line_end":76,"column_start":5,"column_end":15},"name":"AssertTrap","qualname":"::ast::wast::WastDirective::AssertTrap","value":"WastDirective::AssertTrap { span, exec, message }","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1727},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575399,"byte_end":8575411,"line_start":81,"line_end":81,"column_start":5,"column_end":17},"name":"AssertReturn","qualname":"::ast::wast::WastDirective::AssertReturn","value":"WastDirective::AssertReturn { span, exec, results }","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1731},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575530,"byte_end":8575546,"line_start":86,"line_end":86,"column_start":5,"column_end":21},"name":"AssertExhaustion","qualname":"::ast::wast::WastDirective::AssertExhaustion","value":"WastDirective::AssertExhaustion { span, call, message }","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1735},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575641,"byte_end":8575657,"line_start":91,"line_end":91,"column_start":5,"column_end":21},"name":"AssertUnlinkable","qualname":"::ast::wast::WastDirective::AssertUnlinkable","value":"WastDirective::AssertUnlinkable { span, module, message }","parent":{"krate":0,"index":1700},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1700},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574800,"byte_end":8574813,"line_start":54,"line_end":54,"column_start":10,"column_end":23},"name":"WastDirective","qualname":"::ast::wast::WastDirective","value":"pub enum WastDirective<'a> {\n    Module(ast::Module),\n    QuoteModule {\n        span: ast::Span,\n        source: Vec<&'a [u8]>,\n    },\n    AssertMalformed {\n        span: ast::Span,\n        module: QuoteModule,\n        message: &'a str,\n    },\n    AssertInvalid {\n        span: ast::Span,\n        module: ast::Module,\n        message: &'a str,\n    },\n    Register {\n        span: ast::Span,\n        name: &'a str,\n        module: Option<ast::Id>,\n    },\n    Invoke(WastInvoke),\n    AssertTrap {\n        span: ast::Span,\n        exec: WastExecute,\n        message: &'a str,\n    },\n    AssertReturn {\n        span: ast::Span,\n        exec: WastExecute,\n        results: Vec<ast::AssertExpression>,\n    },\n    AssertExhaustion {\n        span: ast::Span,\n        call: WastInvoke,\n        message: &'a str,\n    },\n    AssertUnlinkable {\n        span: ast::Span,\n        module: ast::Module,\n        message: &'a str,\n    },\n}","parent":null,"children":[{"krate":0,"index":1702},{"krate":0,"index":1705},{"krate":0,"index":1708},{"krate":0,"index":1712},{"krate":0,"index":1716},{"krate":0,"index":1720},{"krate":0,"index":1723},{"krate":0,"index":1727},{"krate":0,"index":1731},{"krate":0,"index":1735}],"decl_id":null,"docs":" The different kinds of directives found in a `*.wast` file.","sig":null,"attributes":[{"value":"/ The different kinds of directives found in a `*.wast` file.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574570,"byte_end":8574633,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574634,"byte_end":8574637,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ It's not entirely clear to me what all of these are per se, but they're only","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574638,"byte_end":8574718,"line_start":51,"line_end":51,"column_start":1,"column_end":81}},{"value":"/ really interesting to test harnesses mostly.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574719,"byte_end":8574767,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574768,"byte_end":8574790,"line_start":53,"line_end":53,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575868,"byte_end":8575872,"line_start":100,"line_end":100,"column_start":12,"column_end":16},"name":"span","qualname":"<WastDirective>::span","value":"pub fn span(&Self) -> ast::Span","parent":null,"children":[],"decl_id":null,"docs":" Returns the location in the source that this directive was defined at\n","sig":null,"attributes":[{"value":"/ Returns the location in the source that this directive was defined at","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575783,"byte_end":8575856,"line_start":99,"line_end":99,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1760},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8582596,"byte_end":8582602,"line_start":258,"line_end":258,"column_start":5,"column_end":11},"name":"Invoke","qualname":"::ast::wast::WastExecute::Invoke","value":"WastExecute::Invoke(WastInvoke)","parent":{"krate":0,"index":1758},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1763},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8582624,"byte_end":8582630,"line_start":259,"line_end":259,"column_start":5,"column_end":11},"name":"Module","qualname":"::ast::wast::WastExecute::Module","value":"WastExecute::Module(ast::Module)","parent":{"krate":0,"index":1758},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1766},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8582653,"byte_end":8582656,"line_start":260,"line_end":260,"column_start":5,"column_end":8},"name":"Get","qualname":"::ast::wast::WastExecute::Get","value":"WastExecute::Get { module, global }","parent":{"krate":0,"index":1758},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1758},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8582574,"byte_end":8582585,"line_start":257,"line_end":257,"column_start":10,"column_end":21},"name":"WastExecute","qualname":"::ast::wast::WastExecute","value":"pub enum WastExecute<'a> {\n    Invoke(WastInvoke),\n    Module(ast::Module),\n    Get {\n        module: Option<ast::Id>,\n        global: &'a str,\n    },\n}","parent":null,"children":[{"krate":0,"index":1760},{"krate":0,"index":1763},{"krate":0,"index":1766}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8582542,"byte_end":8582564,"line_start":256,"line_end":256,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1772},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8583357,"byte_end":8583367,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"WastInvoke","qualname":"::ast::wast::WastInvoke","value":"WastInvoke { span, module, name, args }","parent":null,"children":[{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8583323,"byte_end":8583345,"line_start":285,"line_end":285,"column_start":1,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1774},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8583382,"byte_end":8583386,"line_start":287,"line_end":287,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::wast::WastInvoke::span","value":"ast::token::Span","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1775},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8583407,"byte_end":8583413,"line_start":288,"line_end":288,"column_start":9,"column_end":15},"name":"module","qualname":"::ast::wast::WastInvoke::module","value":"std::option::Option<ast::token::Id<'a>>","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1776},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8583444,"byte_end":8583448,"line_start":289,"line_end":289,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::wast::WastInvoke::name","value":"&'a str","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1777},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8583467,"byte_end":8583471,"line_start":290,"line_end":290,"column_start":9,"column_end":13},"name":"args","qualname":"::ast::wast::WastInvoke::args","value":"std::vec::Vec<ast::expr::Expression<'a>>","parent":{"krate":0,"index":1772},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1784},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8584025,"byte_end":8584031,"line_start":313,"line_end":313,"column_start":5,"column_end":11},"name":"Module","qualname":"::ast::wast::QuoteModule::Module","value":"QuoteModule::Module(ast::Module)","parent":{"krate":0,"index":1782},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1787},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8584054,"byte_end":8584059,"line_start":314,"line_end":314,"column_start":5,"column_end":10},"name":"Quote","qualname":"::ast::wast::QuoteModule::Quote","value":"QuoteModule::Quote(Vec<&'a [u8]>)","parent":{"krate":0,"index":1782},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8584003,"byte_end":8584014,"line_start":312,"line_end":312,"column_start":10,"column_end":21},"name":"QuoteModule","qualname":"::ast::wast::QuoteModule","value":"pub enum QuoteModule<'a> { Module(ast::Module), Quote(Vec<&'a [u8]>), }","parent":null,"children":[{"krate":0,"index":1784},{"krate":0,"index":1787}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8583971,"byte_end":8583993,"line_start":311,"line_end":311,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129673,"byte_end":129675,"line_start":325,"line_end":325,"column_start":9,"column_end":11},"name":"kw","qualname":"::ast::kw","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","parent":null,"children":[{"krate":0,"index":6442},{"krate":0,"index":6448},{"krate":0,"index":6447},{"krate":0,"index":6445},{"krate":0,"index":6435},{"krate":0,"index":6439},{"krate":0,"index":6457},{"krate":0,"index":6463},{"krate":0,"index":6462},{"krate":0,"index":6460},{"krate":0,"index":6450},{"krate":0,"index":6454},{"krate":0,"index":6472},{"krate":0,"index":6478},{"krate":0,"index":6477},{"krate":0,"index":6475},{"krate":0,"index":6465},{"krate":0,"index":6469},{"krate":0,"index":6487},{"krate":0,"index":6493},{"krate":0,"index":6492},{"krate":0,"index":6490},{"krate":0,"index":6480},{"krate":0,"index":6484},{"krate":0,"index":6502},{"krate":0,"index":6508},{"krate":0,"index":6507},{"krate":0,"index":6505},{"krate":0,"index":6495},{"krate":0,"index":6499},{"krate":0,"index":6517},{"krate":0,"index":6523},{"krate":0,"index":6522},{"krate":0,"index":6520},{"krate":0,"index":6510},{"krate":0,"index":6514},{"krate":0,"index":6532},{"krate":0,"index":6538},{"krate":0,"index":6537},{"krate":0,"index":6535},{"krate":0,"index":6525},{"krate":0,"index":6529},{"krate":0,"index":6547},{"krate":0,"index":6553},{"krate":0,"index":6552},{"krate":0,"index":6550},{"krate":0,"index":6540},{"krate":0,"index":6544},{"krate":0,"index":6562},{"krate":0,"index":6568},{"krate":0,"index":6567},{"krate":0,"index":6565},{"krate":0,"index":6555},{"krate":0,"index":6559},{"krate":0,"index":6577},{"krate":0,"index":6583},{"krate":0,"index":6582},{"krate":0,"index":6580},{"krate":0,"index":6570},{"krate":0,"index":6574},{"krate":0,"index":6592},{"krate":0,"index":6598},{"krate":0,"index":6597},{"krate":0,"index":6595},{"krate":0,"index":6585},{"krate":0,"index":6589},{"krate":0,"index":6607},{"krate":0,"index":6613},{"krate":0,"index":6612},{"krate":0,"index":6610},{"krate":0,"index":6600},{"krate":0,"index":6604},{"krate":0,"index":6622},{"krate":0,"index":6628},{"krate":0,"index":6627},{"krate":0,"index":6625},{"krate":0,"index":6615},{"krate":0,"index":6619},{"krate":0,"index":6637},{"krate":0,"index":6643},{"krate":0,"index":6642},{"krate":0,"index":6640},{"krate":0,"index":6630},{"krate":0,"index":6634},{"krate":0,"index":6652},{"krate":0,"index":6658},{"krate":0,"index":6657},{"krate":0,"index":6655},{"krate":0,"index":6645},{"krate":0,"index":6649},{"krate":0,"index":6667},{"krate":0,"index":6673},{"krate":0,"index":6672},{"krate":0,"index":6670},{"krate":0,"index":6660},{"krate":0,"index":6664},{"krate":0,"index":6682},{"krate":0,"index":6688},{"krate":0,"index":6687},{"krate":0,"index":6685},{"krate":0,"index":6675},{"krate":0,"index":6679},{"krate":0,"index":6697},{"krate":0,"index":6703},{"krate":0,"index":6702},{"krate":0,"index":6700},{"krate":0,"index":6690},{"krate":0,"index":6694},{"krate":0,"index":6712},{"krate":0,"index":6718},{"krate":0,"index":6717},{"krate":0,"index":6715},{"krate":0,"index":6705},{"krate":0,"index":6709},{"krate":0,"index":6727},{"krate":0,"index":6733},{"krate":0,"index":6732},{"krate":0,"index":6730},{"krate":0,"index":6720},{"krate":0,"index":6724},{"krate":0,"index":6742},{"krate":0,"index":6748},{"krate":0,"index":6747},{"krate":0,"index":6745},{"krate":0,"index":6735},{"krate":0,"index":6739},{"krate":0,"index":6757},{"krate":0,"index":6763},{"krate":0,"index":6762},{"krate":0,"index":6760},{"krate":0,"index":6750},{"krate":0,"index":6754},{"krate":0,"index":6772},{"krate":0,"index":6778},{"krate":0,"index":6777},{"krate":0,"index":6775},{"krate":0,"index":6765},{"krate":0,"index":6769},{"krate":0,"index":6787},{"krate":0,"index":6793},{"krate":0,"index":6792},{"krate":0,"index":6790},{"krate":0,"index":6780},{"krate":0,"index":6784},{"krate":0,"index":6802},{"krate":0,"index":6808},{"krate":0,"index":6807},{"krate":0,"index":6805},{"krate":0,"index":6795},{"krate":0,"index":6799},{"krate":0,"index":6817},{"krate":0,"index":6823},{"krate":0,"index":6822},{"krate":0,"index":6820},{"krate":0,"index":6810},{"krate":0,"index":6814},{"krate":0,"index":6832},{"krate":0,"index":6838},{"krate":0,"index":6837},{"krate":0,"index":6835},{"krate":0,"index":6825},{"krate":0,"index":6829},{"krate":0,"index":6847},{"krate":0,"index":6853},{"krate":0,"index":6852},{"krate":0,"index":6850},{"krate":0,"index":6840},{"krate":0,"index":6844},{"krate":0,"index":6862},{"krate":0,"index":6868},{"krate":0,"index":6867},{"krate":0,"index":6865},{"krate":0,"index":6855},{"krate":0,"index":6859},{"krate":0,"index":6877},{"krate":0,"index":6883},{"krate":0,"index":6882},{"krate":0,"index":6880},{"krate":0,"index":6870},{"krate":0,"index":6874},{"krate":0,"index":6892},{"krate":0,"index":6898},{"krate":0,"index":6897},{"krate":0,"index":6895},{"krate":0,"index":6885},{"krate":0,"index":6889},{"krate":0,"index":6907},{"krate":0,"index":6913},{"krate":0,"index":6912},{"krate":0,"index":6910},{"krate":0,"index":6900},{"krate":0,"index":6904},{"krate":0,"index":6922},{"krate":0,"index":6928},{"krate":0,"index":6927},{"krate":0,"index":6925},{"krate":0,"index":6915},{"krate":0,"index":6919},{"krate":0,"index":6937},{"krate":0,"index":6943},{"krate":0,"index":6942},{"krate":0,"index":6940},{"krate":0,"index":6930},{"krate":0,"index":6934},{"krate":0,"index":6952},{"krate":0,"index":6958},{"krate":0,"index":6957},{"krate":0,"index":6955},{"krate":0,"index":6945},{"krate":0,"index":6949},{"krate":0,"index":6967},{"krate":0,"index":6973},{"krate":0,"index":6972},{"krate":0,"index":6970},{"krate":0,"index":6960},{"krate":0,"index":6964},{"krate":0,"index":6982},{"krate":0,"index":6988},{"krate":0,"index":6987},{"krate":0,"index":6985},{"krate":0,"index":6975},{"krate":0,"index":6979},{"krate":0,"index":6997},{"krate":0,"index":7003},{"krate":0,"index":7002},{"krate":0,"index":7000},{"krate":0,"index":6990},{"krate":0,"index":6994},{"krate":0,"index":7012},{"krate":0,"index":7018},{"krate":0,"index":7017},{"krate":0,"index":7015},{"krate":0,"index":7005},{"krate":0,"index":7009},{"krate":0,"index":7027},{"krate":0,"index":7033},{"krate":0,"index":7032},{"krate":0,"index":7030},{"krate":0,"index":7020},{"krate":0,"index":7024},{"krate":0,"index":7042},{"krate":0,"index":7048},{"krate":0,"index":7047},{"krate":0,"index":7045},{"krate":0,"index":7035},{"krate":0,"index":7039},{"krate":0,"index":7057},{"krate":0,"index":7063},{"krate":0,"index":7062},{"krate":0,"index":7060},{"krate":0,"index":7050},{"krate":0,"index":7054},{"krate":0,"index":7072},{"krate":0,"index":7078},{"krate":0,"index":7077},{"krate":0,"index":7075},{"krate":0,"index":7065},{"krate":0,"index":7069},{"krate":0,"index":7087},{"krate":0,"index":7093},{"krate":0,"index":7092},{"krate":0,"index":7090},{"krate":0,"index":7080},{"krate":0,"index":7084},{"krate":0,"index":7102},{"krate":0,"index":7108},{"krate":0,"index":7107},{"krate":0,"index":7105},{"krate":0,"index":7095},{"krate":0,"index":7099},{"krate":0,"index":7117},{"krate":0,"index":7123},{"krate":0,"index":7122},{"krate":0,"index":7120},{"krate":0,"index":7110},{"krate":0,"index":7114},{"krate":0,"index":7132},{"krate":0,"index":7138},{"krate":0,"index":7137},{"krate":0,"index":7135},{"krate":0,"index":7125},{"krate":0,"index":7129},{"krate":0,"index":7147},{"krate":0,"index":7153},{"krate":0,"index":7152},{"krate":0,"index":7150},{"krate":0,"index":7140},{"krate":0,"index":7144},{"krate":0,"index":7162},{"krate":0,"index":7168},{"krate":0,"index":7167},{"krate":0,"index":7165},{"krate":0,"index":7155},{"krate":0,"index":7159},{"krate":0,"index":7177},{"krate":0,"index":7183},{"krate":0,"index":7182},{"krate":0,"index":7180},{"krate":0,"index":7170},{"krate":0,"index":7174},{"krate":0,"index":7192},{"krate":0,"index":7198},{"krate":0,"index":7197},{"krate":0,"index":7195},{"krate":0,"index":7185},{"krate":0,"index":7189},{"krate":0,"index":7207},{"krate":0,"index":7213},{"krate":0,"index":7212},{"krate":0,"index":7210},{"krate":0,"index":7200},{"krate":0,"index":7204},{"krate":0,"index":7222},{"krate":0,"index":7228},{"krate":0,"index":7227},{"krate":0,"index":7225},{"krate":0,"index":7215},{"krate":0,"index":7219},{"krate":0,"index":7237},{"krate":0,"index":7243},{"krate":0,"index":7242},{"krate":0,"index":7240},{"krate":0,"index":7230},{"krate":0,"index":7234},{"krate":0,"index":7252},{"krate":0,"index":7258},{"krate":0,"index":7257},{"krate":0,"index":7255},{"krate":0,"index":7245},{"krate":0,"index":7249},{"krate":0,"index":7267},{"krate":0,"index":7273},{"krate":0,"index":7272},{"krate":0,"index":7270},{"krate":0,"index":7260},{"krate":0,"index":7264},{"krate":0,"index":7282},{"krate":0,"index":7288},{"krate":0,"index":7287},{"krate":0,"index":7285},{"krate":0,"index":7275},{"krate":0,"index":7279},{"krate":0,"index":7297},{"krate":0,"index":7303},{"krate":0,"index":7302},{"krate":0,"index":7300},{"krate":0,"index":7290},{"krate":0,"index":7294},{"krate":0,"index":7312},{"krate":0,"index":7318},{"krate":0,"index":7317},{"krate":0,"index":7315},{"krate":0,"index":7305},{"krate":0,"index":7309},{"krate":0,"index":7327},{"krate":0,"index":7333},{"krate":0,"index":7332},{"krate":0,"index":7330},{"krate":0,"index":7320},{"krate":0,"index":7324},{"krate":0,"index":7342},{"krate":0,"index":7348},{"krate":0,"index":7347},{"krate":0,"index":7345},{"krate":0,"index":7335},{"krate":0,"index":7339},{"krate":0,"index":7357},{"krate":0,"index":7363},{"krate":0,"index":7362},{"krate":0,"index":7360},{"krate":0,"index":7350},{"krate":0,"index":7354},{"krate":0,"index":7372},{"krate":0,"index":7378},{"krate":0,"index":7377},{"krate":0,"index":7375},{"krate":0,"index":7365},{"krate":0,"index":7369},{"krate":0,"index":7387},{"krate":0,"index":7393},{"krate":0,"index":7392},{"krate":0,"index":7390},{"krate":0,"index":7380},{"krate":0,"index":7384},{"krate":0,"index":7402},{"krate":0,"index":7408},{"krate":0,"index":7407},{"krate":0,"index":7405},{"krate":0,"index":7395},{"krate":0,"index":7399},{"krate":0,"index":7417},{"krate":0,"index":7423},{"krate":0,"index":7422},{"krate":0,"index":7420},{"krate":0,"index":7410},{"krate":0,"index":7414},{"krate":0,"index":7432},{"krate":0,"index":7438},{"krate":0,"index":7437},{"krate":0,"index":7435},{"krate":0,"index":7425},{"krate":0,"index":7429},{"krate":0,"index":7447},{"krate":0,"index":7453},{"krate":0,"index":7452},{"krate":0,"index":7450},{"krate":0,"index":7440},{"krate":0,"index":7444},{"krate":0,"index":7462},{"krate":0,"index":7468},{"krate":0,"index":7467},{"krate":0,"index":7465},{"krate":0,"index":7455},{"krate":0,"index":7459},{"krate":0,"index":7477},{"krate":0,"index":7483},{"krate":0,"index":7482},{"krate":0,"index":7480},{"krate":0,"index":7470},{"krate":0,"index":7474},{"krate":0,"index":7492},{"krate":0,"index":7498},{"krate":0,"index":7497},{"krate":0,"index":7495},{"krate":0,"index":7485},{"krate":0,"index":7489},{"krate":0,"index":7507},{"krate":0,"index":7513},{"krate":0,"index":7512},{"krate":0,"index":7510},{"krate":0,"index":7500},{"krate":0,"index":7504},{"krate":0,"index":7522},{"krate":0,"index":7528},{"krate":0,"index":7527},{"krate":0,"index":7525},{"krate":0,"index":7515},{"krate":0,"index":7519},{"krate":0,"index":7537},{"krate":0,"index":7543},{"krate":0,"index":7542},{"krate":0,"index":7540},{"krate":0,"index":7530},{"krate":0,"index":7534},{"krate":0,"index":7552},{"krate":0,"index":7558},{"krate":0,"index":7557},{"krate":0,"index":7555},{"krate":0,"index":7545},{"krate":0,"index":7549},{"krate":0,"index":7567},{"krate":0,"index":7573},{"krate":0,"index":7572},{"krate":0,"index":7570},{"krate":0,"index":7560},{"krate":0,"index":7564},{"krate":0,"index":7582},{"krate":0,"index":7588},{"krate":0,"index":7587},{"krate":0,"index":7585},{"krate":0,"index":7575},{"krate":0,"index":7579},{"krate":0,"index":7597},{"krate":0,"index":7603},{"krate":0,"index":7602},{"krate":0,"index":7600},{"krate":0,"index":7590},{"krate":0,"index":7594},{"krate":0,"index":7612},{"krate":0,"index":7618},{"krate":0,"index":7617},{"krate":0,"index":7615},{"krate":0,"index":7605},{"krate":0,"index":7609},{"krate":0,"index":7627},{"krate":0,"index":7633},{"krate":0,"index":7632},{"krate":0,"index":7630},{"krate":0,"index":7620},{"krate":0,"index":7624},{"krate":0,"index":7642},{"krate":0,"index":7648},{"krate":0,"index":7647},{"krate":0,"index":7645},{"krate":0,"index":7635},{"krate":0,"index":7639},{"krate":0,"index":7657},{"krate":0,"index":7663},{"krate":0,"index":7662},{"krate":0,"index":7660},{"krate":0,"index":7650},{"krate":0,"index":7654},{"krate":0,"index":7672},{"krate":0,"index":7678},{"krate":0,"index":7677},{"krate":0,"index":7675},{"krate":0,"index":7665},{"krate":0,"index":7669},{"krate":0,"index":7687},{"krate":0,"index":7693},{"krate":0,"index":7692},{"krate":0,"index":7690},{"krate":0,"index":7680},{"krate":0,"index":7684},{"krate":0,"index":7702},{"krate":0,"index":7708},{"krate":0,"index":7707},{"krate":0,"index":7705},{"krate":0,"index":7695},{"krate":0,"index":7699},{"krate":0,"index":7717},{"krate":0,"index":7723},{"krate":0,"index":7722},{"krate":0,"index":7720},{"krate":0,"index":7710},{"krate":0,"index":7714},{"krate":0,"index":7732},{"krate":0,"index":7738},{"krate":0,"index":7737},{"krate":0,"index":7735},{"krate":0,"index":7725},{"krate":0,"index":7729},{"krate":0,"index":7747},{"krate":0,"index":7753},{"krate":0,"index":7752},{"krate":0,"index":7750},{"krate":0,"index":7740},{"krate":0,"index":7744},{"krate":0,"index":7762},{"krate":0,"index":7768},{"krate":0,"index":7767},{"krate":0,"index":7765},{"krate":0,"index":7755},{"krate":0,"index":7759},{"krate":0,"index":7777},{"krate":0,"index":7783},{"krate":0,"index":7782},{"krate":0,"index":7780},{"krate":0,"index":7770},{"krate":0,"index":7774},{"krate":0,"index":7792},{"krate":0,"index":7798},{"krate":0,"index":7797},{"krate":0,"index":7795},{"krate":0,"index":7785},{"krate":0,"index":7789},{"krate":0,"index":7807},{"krate":0,"index":7813},{"krate":0,"index":7812},{"krate":0,"index":7810},{"krate":0,"index":7800},{"krate":0,"index":7804},{"krate":0,"index":7822},{"krate":0,"index":7828},{"krate":0,"index":7827},{"krate":0,"index":7825},{"krate":0,"index":7815},{"krate":0,"index":7819},{"krate":0,"index":7837},{"krate":0,"index":7843},{"krate":0,"index":7842},{"krate":0,"index":7840},{"krate":0,"index":7830},{"krate":0,"index":7834},{"krate":0,"index":7852},{"krate":0,"index":7858},{"krate":0,"index":7857},{"krate":0,"index":7855},{"krate":0,"index":7845},{"krate":0,"index":7849},{"krate":0,"index":7867},{"krate":0,"index":7873},{"krate":0,"index":7872},{"krate":0,"index":7870},{"krate":0,"index":7860},{"krate":0,"index":7864},{"krate":0,"index":7882},{"krate":0,"index":7888},{"krate":0,"index":7887},{"krate":0,"index":7885},{"krate":0,"index":7875},{"krate":0,"index":7879},{"krate":0,"index":7897},{"krate":0,"index":7903},{"krate":0,"index":7902},{"krate":0,"index":7900},{"krate":0,"index":7890},{"krate":0,"index":7894}],"decl_id":null,"docs":" Common keyword used to parse WebAssembly text files.\n","sig":null,"attributes":[{"value":"/ Common keyword used to parse WebAssembly text files.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129608,"byte_end":129664,"line_start":324,"line_end":324,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":6442},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129698,"byte_end":129703,"line_start":326,"line_end":326,"column_start":21,"column_end":26},"name":"after","qualname":"::ast::kw::after","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6457},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129726,"byte_end":129731,"line_start":327,"line_end":327,"column_start":21,"column_end":26},"name":"alias","qualname":"::ast::kw::alias","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6472},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129754,"byte_end":129757,"line_start":328,"line_end":328,"column_start":21,"column_end":24},"name":"any","qualname":"::ast::kw::any","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6487},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129780,"byte_end":129787,"line_start":329,"line_end":329,"column_start":21,"column_end":28},"name":"anyfunc","qualname":"::ast::kw::anyfunc","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6502},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129810,"byte_end":129816,"line_start":330,"line_end":330,"column_start":21,"column_end":27},"name":"anyref","qualname":"::ast::kw::anyref","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6517},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129839,"byte_end":129842,"line_start":331,"line_end":331,"column_start":21,"column_end":24},"name":"arg","qualname":"::ast::kw::arg","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6532},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129865,"byte_end":129870,"line_start":332,"line_end":332,"column_start":21,"column_end":26},"name":"array","qualname":"::ast::kw::array","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6547},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129893,"byte_end":129910,"line_start":333,"line_end":333,"column_start":21,"column_end":38},"name":"assert_exhaustion","qualname":"::ast::kw::assert_exhaustion","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6562},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129933,"byte_end":129947,"line_start":334,"line_end":334,"column_start":21,"column_end":35},"name":"assert_invalid","qualname":"::ast::kw::assert_invalid","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6577},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":129970,"byte_end":129986,"line_start":335,"line_end":335,"column_start":21,"column_end":37},"name":"assert_malformed","qualname":"::ast::kw::assert_malformed","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6592},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130009,"byte_end":130022,"line_start":336,"line_end":336,"column_start":21,"column_end":34},"name":"assert_return","qualname":"::ast::kw::assert_return","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6607},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130045,"byte_end":130073,"line_start":337,"line_end":337,"column_start":21,"column_end":49},"name":"assert_return_arithmetic_nan","qualname":"::ast::kw::assert_return_arithmetic_nan","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6622},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130096,"byte_end":130130,"line_start":338,"line_end":338,"column_start":21,"column_end":55},"name":"assert_return_arithmetic_nan_f32x4","qualname":"::ast::kw::assert_return_arithmetic_nan_f32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6637},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130153,"byte_end":130187,"line_start":339,"line_end":339,"column_start":21,"column_end":55},"name":"assert_return_arithmetic_nan_f64x2","qualname":"::ast::kw::assert_return_arithmetic_nan_f64x2","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6652},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130210,"byte_end":130237,"line_start":340,"line_end":340,"column_start":21,"column_end":48},"name":"assert_return_canonical_nan","qualname":"::ast::kw::assert_return_canonical_nan","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6667},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130260,"byte_end":130293,"line_start":341,"line_end":341,"column_start":21,"column_end":54},"name":"assert_return_canonical_nan_f32x4","qualname":"::ast::kw::assert_return_canonical_nan_f32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6682},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130316,"byte_end":130349,"line_start":342,"line_end":342,"column_start":21,"column_end":54},"name":"assert_return_canonical_nan_f64x2","qualname":"::ast::kw::assert_return_canonical_nan_f64x2","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6697},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130372,"byte_end":130390,"line_start":343,"line_end":343,"column_start":21,"column_end":39},"name":"assert_return_func","qualname":"::ast::kw::assert_return_func","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6712},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130413,"byte_end":130424,"line_start":344,"line_end":344,"column_start":21,"column_end":32},"name":"assert_trap","qualname":"::ast::kw::assert_trap","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6727},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130447,"byte_end":130464,"line_start":345,"line_end":345,"column_start":21,"column_end":38},"name":"assert_unlinkable","qualname":"::ast::kw::assert_unlinkable","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6742},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130487,"byte_end":130493,"line_start":346,"line_end":346,"column_start":21,"column_end":27},"name":"before","qualname":"::ast::kw::before","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6757},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130516,"byte_end":130522,"line_start":347,"line_end":347,"column_start":21,"column_end":27},"name":"binary","qualname":"::ast::kw::binary","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6772},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130545,"byte_end":130550,"line_start":348,"line_end":348,"column_start":21,"column_end":26},"name":"block","qualname":"::ast::kw::block","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6787},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130573,"byte_end":130578,"line_start":349,"line_end":349,"column_start":21,"column_end":26},"name":"catch","qualname":"::ast::kw::catch","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6802},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130601,"byte_end":130610,"line_start":350,"line_end":350,"column_start":21,"column_end":30},"name":"catch_all","qualname":"::ast::kw::catch_all","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6817},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130633,"byte_end":130637,"line_start":351,"line_end":351,"column_start":21,"column_end":25},"name":"code","qualname":"::ast::kw::code","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6832},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130660,"byte_end":130664,"line_start":352,"line_end":352,"column_start":21,"column_end":25},"name":"data","qualname":"::ast::kw::data","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6847},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130687,"byte_end":130694,"line_start":353,"line_end":353,"column_start":21,"column_end":28},"name":"dataref","qualname":"::ast::kw::dataref","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6862},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130717,"byte_end":130724,"line_start":354,"line_end":354,"column_start":21,"column_end":28},"name":"declare","qualname":"::ast::kw::declare","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6877},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130747,"byte_end":130755,"line_start":355,"line_end":355,"column_start":21,"column_end":29},"name":"delegate","qualname":"::ast::kw::delegate","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6892},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130778,"byte_end":130782,"line_start":356,"line_end":356,"column_start":21,"column_end":25},"name":"r#do","qualname":"::ast::kw::r#do","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6907},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130812,"byte_end":130816,"line_start":357,"line_end":357,"column_start":21,"column_end":25},"name":"elem","qualname":"::ast::kw::elem","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6922},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130839,"byte_end":130842,"line_start":358,"line_end":358,"column_start":21,"column_end":24},"name":"end","qualname":"::ast::kw::end","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6937},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130865,"byte_end":130870,"line_start":359,"line_end":359,"column_start":21,"column_end":26},"name":"event","qualname":"::ast::kw::event","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6952},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130893,"byte_end":130899,"line_start":360,"line_end":360,"column_start":21,"column_end":27},"name":"export","qualname":"::ast::kw::export","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6967},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130922,"byte_end":130930,"line_start":361,"line_end":361,"column_start":21,"column_end":29},"name":"r#extern","qualname":"::ast::kw::r#extern","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6982},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130964,"byte_end":130973,"line_start":362,"line_end":362,"column_start":21,"column_end":30},"name":"externref","qualname":"::ast::kw::externref","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6997},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":130996,"byte_end":130998,"line_start":363,"line_end":363,"column_start":21,"column_end":23},"name":"eq","qualname":"::ast::kw::eq","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7012},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131021,"byte_end":131026,"line_start":364,"line_end":364,"column_start":21,"column_end":26},"name":"eqref","qualname":"::ast::kw::eqref","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7027},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131049,"byte_end":131052,"line_start":365,"line_end":365,"column_start":21,"column_end":24},"name":"f32","qualname":"::ast::kw::f32","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7042},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131075,"byte_end":131080,"line_start":366,"line_end":366,"column_start":21,"column_end":26},"name":"f32x4","qualname":"::ast::kw::f32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7057},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131103,"byte_end":131106,"line_start":367,"line_end":367,"column_start":21,"column_end":24},"name":"f64","qualname":"::ast::kw::f64","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7072},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131129,"byte_end":131134,"line_start":368,"line_end":368,"column_start":21,"column_end":26},"name":"f64x2","qualname":"::ast::kw::f64x2","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7087},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131157,"byte_end":131162,"line_start":369,"line_end":369,"column_start":21,"column_end":26},"name":"field","qualname":"::ast::kw::field","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7102},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131185,"byte_end":131190,"line_start":370,"line_end":370,"column_start":21,"column_end":26},"name":"first","qualname":"::ast::kw::first","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7117},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131213,"byte_end":131217,"line_start":371,"line_end":371,"column_start":21,"column_end":25},"name":"func","qualname":"::ast::kw::func","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7132},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131240,"byte_end":131247,"line_start":372,"line_end":372,"column_start":21,"column_end":28},"name":"funcref","qualname":"::ast::kw::funcref","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7147},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131270,"byte_end":131273,"line_start":373,"line_end":373,"column_start":21,"column_end":24},"name":"get","qualname":"::ast::kw::get","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7162},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131296,"byte_end":131302,"line_start":374,"line_end":374,"column_start":21,"column_end":27},"name":"global","qualname":"::ast::kw::global","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7177},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131325,"byte_end":131328,"line_start":375,"line_end":375,"column_start":21,"column_end":24},"name":"i16","qualname":"::ast::kw::i16","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7192},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131351,"byte_end":131356,"line_start":376,"line_end":376,"column_start":21,"column_end":26},"name":"i16x8","qualname":"::ast::kw::i16x8","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7207},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131379,"byte_end":131382,"line_start":377,"line_end":377,"column_start":21,"column_end":24},"name":"i31","qualname":"::ast::kw::i31","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7222},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131405,"byte_end":131411,"line_start":378,"line_end":378,"column_start":21,"column_end":27},"name":"i31ref","qualname":"::ast::kw::i31ref","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7237},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131434,"byte_end":131437,"line_start":379,"line_end":379,"column_start":21,"column_end":24},"name":"i32","qualname":"::ast::kw::i32","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7252},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131460,"byte_end":131465,"line_start":380,"line_end":380,"column_start":21,"column_end":26},"name":"i32x4","qualname":"::ast::kw::i32x4","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7267},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131488,"byte_end":131491,"line_start":381,"line_end":381,"column_start":21,"column_end":24},"name":"i64","qualname":"::ast::kw::i64","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7282},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131514,"byte_end":131519,"line_start":382,"line_end":382,"column_start":21,"column_end":26},"name":"i64x2","qualname":"::ast::kw::i64x2","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7297},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131542,"byte_end":131544,"line_start":383,"line_end":383,"column_start":21,"column_end":23},"name":"i8","qualname":"::ast::kw::i8","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7312},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131567,"byte_end":131572,"line_start":384,"line_end":384,"column_start":21,"column_end":26},"name":"i8x16","qualname":"::ast::kw::i8x16","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7327},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131595,"byte_end":131601,"line_start":385,"line_end":385,"column_start":21,"column_end":27},"name":"import","qualname":"::ast::kw::import","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7342},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131624,"byte_end":131632,"line_start":386,"line_end":386,"column_start":21,"column_end":29},"name":"instance","qualname":"::ast::kw::instance","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7357},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131655,"byte_end":131666,"line_start":387,"line_end":387,"column_start":21,"column_end":32},"name":"instantiate","qualname":"::ast::kw::instantiate","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7372},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131689,"byte_end":131695,"line_start":388,"line_end":388,"column_start":21,"column_end":27},"name":"invoke","qualname":"::ast::kw::invoke","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7387},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131718,"byte_end":131722,"line_start":389,"line_end":389,"column_start":21,"column_end":25},"name":"item","qualname":"::ast::kw::item","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7402},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131745,"byte_end":131749,"line_start":390,"line_end":390,"column_start":21,"column_end":25},"name":"last","qualname":"::ast::kw::last","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7417},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131772,"byte_end":131777,"line_start":391,"line_end":391,"column_start":21,"column_end":26},"name":"local","qualname":"::ast::kw::local","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7432},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131800,"byte_end":131806,"line_start":392,"line_end":392,"column_start":21,"column_end":27},"name":"memory","qualname":"::ast::kw::memory","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7447},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131829,"byte_end":131835,"line_start":393,"line_end":393,"column_start":21,"column_end":27},"name":"module","qualname":"::ast::kw::module","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7462},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131858,"byte_end":131868,"line_start":394,"line_end":394,"column_start":21,"column_end":31},"name":"modulecode","qualname":"::ast::kw::modulecode","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7477},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131891,"byte_end":131905,"line_start":395,"line_end":395,"column_start":21,"column_end":35},"name":"nan_arithmetic","qualname":"::ast::kw::nan_arithmetic","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7492},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":131947,"byte_end":131960,"line_start":396,"line_end":396,"column_start":21,"column_end":34},"name":"nan_canonical","qualname":"::ast::kw::nan_canonical","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7507},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132001,"byte_end":132005,"line_start":397,"line_end":397,"column_start":21,"column_end":25},"name":"null","qualname":"::ast::kw::null","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7522},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132028,"byte_end":132035,"line_start":398,"line_end":398,"column_start":21,"column_end":28},"name":"nullref","qualname":"::ast::kw::nullref","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7537},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132058,"byte_end":132064,"line_start":399,"line_end":399,"column_start":21,"column_end":27},"name":"offset","qualname":"::ast::kw::offset","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7552},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132087,"byte_end":132092,"line_start":400,"line_end":400,"column_start":21,"column_end":26},"name":"outer","qualname":"::ast::kw::outer","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7567},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132115,"byte_end":132120,"line_start":401,"line_end":401,"column_start":21,"column_end":26},"name":"param","qualname":"::ast::kw::param","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7582},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132143,"byte_end":132149,"line_start":402,"line_end":402,"column_start":21,"column_end":27},"name":"parent","qualname":"::ast::kw::parent","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7597},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132172,"byte_end":132179,"line_start":403,"line_end":403,"column_start":21,"column_end":28},"name":"passive","qualname":"::ast::kw::passive","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7612},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132202,"byte_end":132207,"line_start":404,"line_end":404,"column_start":21,"column_end":26},"name":"quote","qualname":"::ast::kw::quote","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7627},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132230,"byte_end":132236,"line_start":405,"line_end":405,"column_start":21,"column_end":27},"name":"r#else","qualname":"::ast::kw::r#else","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7642},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132268,"byte_end":132272,"line_start":406,"line_end":406,"column_start":21,"column_end":25},"name":"r#if","qualname":"::ast::kw::r#if","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7657},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132302,"byte_end":132308,"line_start":407,"line_end":407,"column_start":21,"column_end":27},"name":"r#loop","qualname":"::ast::kw::r#loop","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7672},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132340,"byte_end":132345,"line_start":408,"line_end":408,"column_start":21,"column_end":26},"name":"r#mut","qualname":"::ast::kw::r#mut","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7687},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132376,"byte_end":132382,"line_start":409,"line_end":409,"column_start":21,"column_end":27},"name":"r#type","qualname":"::ast::kw::r#type","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7702},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132414,"byte_end":132419,"line_start":410,"line_end":410,"column_start":21,"column_end":26},"name":"r#ref","qualname":"::ast::kw::r#ref","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7717},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132450,"byte_end":132458,"line_start":411,"line_end":411,"column_start":21,"column_end":29},"name":"ref_func","qualname":"::ast::kw::ref_func","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7732},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132494,"byte_end":132502,"line_start":412,"line_end":412,"column_start":21,"column_end":29},"name":"ref_null","qualname":"::ast::kw::ref_null","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7747},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132538,"byte_end":132546,"line_start":413,"line_end":413,"column_start":21,"column_end":29},"name":"register","qualname":"::ast::kw::register","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7762},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132569,"byte_end":132575,"line_start":414,"line_end":414,"column_start":21,"column_end":27},"name":"result","qualname":"::ast::kw::result","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7777},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132598,"byte_end":132601,"line_start":415,"line_end":415,"column_start":21,"column_end":24},"name":"rtt","qualname":"::ast::kw::rtt","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7792},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132624,"byte_end":132630,"line_start":416,"line_end":416,"column_start":21,"column_end":27},"name":"shared","qualname":"::ast::kw::shared","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7807},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132653,"byte_end":132658,"line_start":417,"line_end":417,"column_start":21,"column_end":26},"name":"start","qualname":"::ast::kw::start","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7822},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132681,"byte_end":132689,"line_start":418,"line_end":418,"column_start":21,"column_end":29},"name":"r#struct","qualname":"::ast::kw::r#struct","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7837},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132723,"byte_end":132728,"line_start":419,"line_end":419,"column_start":21,"column_end":26},"name":"table","qualname":"::ast::kw::table","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7852},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132751,"byte_end":132755,"line_start":420,"line_end":420,"column_start":21,"column_end":25},"name":"then","qualname":"::ast::kw::then","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7867},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132778,"byte_end":132783,"line_start":421,"line_end":421,"column_start":21,"column_end":26},"name":"r#try","qualname":"::ast::kw::r#try","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7882},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132814,"byte_end":132820,"line_start":422,"line_end":422,"column_start":21,"column_end":27},"name":"unwind","qualname":"::ast::kw::unwind","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7897},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132843,"byte_end":132847,"line_start":423,"line_end":423,"column_start":21,"column_end":25},"name":"v128","qualname":"::ast::kw::v128","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120891,"byte_end":120921,"line_start":46,"line_end":46,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":120930,"byte_end":120952,"line_start":47,"line_end":47,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132922,"byte_end":132932,"line_start":427,"line_end":427,"column_start":9,"column_end":19},"name":"annotation","qualname":"::ast::annotation","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","parent":null,"children":[{"krate":0,"index":7912},{"krate":0,"index":7915},{"krate":0,"index":7905},{"krate":0,"index":7909},{"krate":0,"index":7924},{"krate":0,"index":7927},{"krate":0,"index":7917},{"krate":0,"index":7921}],"decl_id":null,"docs":" Common annotations used to parse WebAssembly text files.\n","sig":null,"attributes":[{"value":"/ Common annotations used to parse WebAssembly text files.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132853,"byte_end":132913,"line_start":426,"line_end":426,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":7912},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132951,"byte_end":132957,"line_start":428,"line_end":428,"column_start":17,"column_end":23},"name":"custom","qualname":"::ast::annotation::custom","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":128084,"byte_end":128114,"line_start":262,"line_end":262,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":128123,"byte_end":128145,"line_start":263,"line_end":263,"column_start":9,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7924},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":132976,"byte_end":132980,"line_start":429,"line_end":429,"column_start":17,"column_end":21},"name":"name","qualname":"::ast::annotation::name","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_camel_case_types)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":128084,"byte_end":128114,"line_start":262,"line_end":262,"column_start":9,"column_end":39}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\mod.rs","byte_start":128123,"byte_end":128145,"line_start":263,"line_end":263,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lexer","qualname":"::lexer","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":7929},{"krate":0,"index":7933},{"krate":0,"index":7936},{"krate":0,"index":7977},{"krate":0,"index":7971},{"krate":0,"index":7973},{"krate":0,"index":7980},{"krate":0,"index":8018},{"krate":0,"index":8016},{"krate":0,"index":8012},{"krate":0,"index":8013},{"krate":0,"index":8020},{"krate":0,"index":8031},{"krate":0,"index":8030},{"krate":0,"index":8028},{"krate":0,"index":8025},{"krate":0,"index":8026},{"krate":0,"index":8033},{"krate":0,"index":8043},{"krate":0,"index":8037},{"krate":0,"index":8039},{"krate":0,"index":8046},{"krate":0,"index":8058},{"krate":0,"index":8052},{"krate":0,"index":8054},{"krate":0,"index":8061},{"krate":0,"index":8071},{"krate":0,"index":8065},{"krate":0,"index":8067},{"krate":0,"index":8074},{"krate":0,"index":8084},{"krate":0,"index":8078},{"krate":0,"index":8080},{"krate":0,"index":8087},{"krate":0,"index":8097},{"krate":0,"index":8091},{"krate":0,"index":8093},{"krate":0,"index":8100},{"krate":0,"index":8110},{"krate":0,"index":8104},{"krate":0,"index":8106},{"krate":0,"index":8113},{"krate":0,"index":8131},{"krate":0,"index":8125},{"krate":0,"index":8127},{"krate":0,"index":463},{"krate":0,"index":504},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":516},{"krate":0,"index":520},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":530}],"decl_id":null,"docs":" Definition of a lexer for the WebAssembly text format.","sig":null,"attributes":[{"value":"/ Definition of a lexer for the WebAssembly text format.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":132986,"byte_end":133044,"line_start":1,"line_end":1,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133045,"byte_end":133048,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module provides a [`Lexer`][] type which is an iterate over the raw","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133049,"byte_end":133125,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/ tokens of a WebAssembly text file. A [`Lexer`][] accounts for every single","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133126,"byte_end":133204,"line_start":4,"line_end":4,"column_start":1,"column_end":79}},{"value":"/ byte in a WebAssembly text field, returning tokens even for comments and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133205,"byte_end":133281,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/ whitespace. Typically you'll ignore comments and whitespace, however.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133282,"byte_end":133355,"line_start":6,"line_end":6,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133356,"byte_end":133359,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ If you'd like to iterate over the tokens in a file you can do so via:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133360,"byte_end":133433,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133434,"byte_end":133437,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133438,"byte_end":133445,"line_start":10,"line_end":10,"column_start":1,"column_end":8}},{"value":"/ # fn foo() -> Result<(), wast::Error> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133446,"byte_end":133489,"line_start":11,"line_end":11,"column_start":1,"column_end":44}},{"value":"/ use wast::lexer::Lexer;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133490,"byte_end":133517,"line_start":12,"line_end":12,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133518,"byte_end":133521,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ let wat = \"(module (func $foo))\";","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133522,"byte_end":133559,"line_start":14,"line_end":14,"column_start":1,"column_end":38}},{"value":"/ for token in Lexer::new(wat) {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133560,"byte_end":133594,"line_start":15,"line_end":15,"column_start":1,"column_end":35}},{"value":"/     println!(\"{:?}\", token?);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133595,"byte_end":133628,"line_start":16,"line_end":16,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133629,"byte_end":133634,"line_start":17,"line_end":17,"column_start":1,"column_end":6}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133635,"byte_end":133647,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133648,"byte_end":133655,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133656,"byte_end":133663,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133664,"byte_end":133667,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Note that you'll typically not use this module but will rather use","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133668,"byte_end":133738,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/ [`ParseBuffer`](crate::parser::ParseBuffer) instead.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133739,"byte_end":133795,"line_start":23,"line_end":23,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133796,"byte_end":133799,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`Lexer`]: crate::lexer::Lexer","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133800,"byte_end":133834,"line_start":25,"line_end":25,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":7929},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134238,"byte_end":134243,"line_start":40,"line_end":40,"column_start":12,"column_end":17},"name":"Lexer","qualname":"::lexer::Lexer","value":"Lexer {  }","parent":null,"children":[{"krate":0,"index":7931},{"krate":0,"index":7932}],"decl_id":null,"docs":" A structure used to lex the s-expression syntax of WAT files.","sig":null,"attributes":[{"value":"/ A structure used to lex the s-expression syntax of WAT files.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":133943,"byte_end":134008,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134009,"byte_end":134012,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ This structure is used to generate [`Source`] items, which should account for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134013,"byte_end":134094,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/ every single byte of the input as we iterate over it. A [`LexError`] is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134095,"byte_end":134170,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ returned for any non-lexable text.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134171,"byte_end":134209,"line_start":38,"line_end":38,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7938},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134640,"byte_end":134651,"line_start":53,"line_end":53,"column_start":5,"column_end":16},"name":"LineComment","qualname":"::lexer::Token::LineComment","value":"Token::LineComment(&'a str)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" A line comment, preceded with `;;`\n","sig":null,"attributes":[{"value":"/ A line comment, preceded with `;;`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134597,"byte_end":134635,"line_start":52,"line_end":52,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7941},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134760,"byte_end":134772,"line_start":57,"line_end":57,"column_start":5,"column_end":17},"name":"BlockComment","qualname":"::lexer::Token::BlockComment","value":"Token::BlockComment(&'a str)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" A block comment, surrounded by `(;` and `;)`. Note that these can be\n nested.\n","sig":null,"attributes":[{"value":"/ A block comment, surrounded by `(;` and `;)`. Note that these can be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134667,"byte_end":134739,"line_start":55,"line_end":55,"column_start":5,"column_end":77}},{"value":"/ nested.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134744,"byte_end":134755,"line_start":56,"line_end":56,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7944},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134845,"byte_end":134855,"line_start":60,"line_end":60,"column_start":5,"column_end":15},"name":"Whitespace","qualname":"::lexer::Token::Whitespace","value":"Token::Whitespace(&'a str)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" A fragment of source that represents whitespace.\n","sig":null,"attributes":[{"value":"/ A fragment of source that represents whitespace.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134788,"byte_end":134840,"line_start":59,"line_end":59,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7947},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134950,"byte_end":134956,"line_start":63,"line_end":63,"column_start":5,"column_end":11},"name":"LParen","qualname":"::lexer::Token::LParen","value":"Token::LParen(&'a str)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" A left-parenthesis, including the source text for where it comes from.\n","sig":null,"attributes":[{"value":"/ A left-parenthesis, including the source text for where it comes from.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134871,"byte_end":134945,"line_start":62,"line_end":62,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7950},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135051,"byte_end":135057,"line_start":65,"line_end":65,"column_start":5,"column_end":11},"name":"RParen","qualname":"::lexer::Token::RParen","value":"Token::RParen(&'a str)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" A right-parenthesis, including the source text for where it comes from.\n","sig":null,"attributes":[{"value":"/ A right-parenthesis, including the source text for where it comes from.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134971,"byte_end":135046,"line_start":64,"line_end":64,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7953},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135134,"byte_end":135140,"line_start":68,"line_end":68,"column_start":5,"column_end":11},"name":"String","qualname":"::lexer::Token::String","value":"Token::String(WasmString)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" A string literal, which is actually a list of bytes.\n","sig":null,"attributes":[{"value":"/ A string literal, which is actually a list of bytes.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135073,"byte_end":135129,"line_start":67,"line_end":67,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7956},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135305,"byte_end":135307,"line_start":74,"line_end":74,"column_start":5,"column_end":7},"name":"Id","qualname":"::lexer::Token::Id","value":"Token::Id(&'a str)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" An identifier (like `$foo`).","sig":null,"attributes":[{"value":"/ An identifier (like `$foo`).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135163,"byte_end":135195,"line_start":70,"line_end":70,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135200,"byte_end":135203,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ All identifiers start with `$` and the payload here is the original","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135208,"byte_end":135279,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ source text.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135284,"byte_end":135300,"line_start":73,"line_end":73,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7959},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135459,"byte_end":135466,"line_start":79,"line_end":79,"column_start":5,"column_end":12},"name":"Keyword","qualname":"::lexer::Token::Keyword","value":"Token::Keyword(&'a str)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" A keyword, or something that starts with an alphabetic character.","sig":null,"attributes":[{"value":"/ A keyword, or something that starts with an alphabetic character.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135323,"byte_end":135392,"line_start":76,"line_end":76,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135397,"byte_end":135400,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ The payload here is the original source text.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135405,"byte_end":135454,"line_start":78,"line_end":78,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7962},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135641,"byte_end":135649,"line_start":83,"line_end":83,"column_start":5,"column_end":13},"name":"Reserved","qualname":"::lexer::Token::Reserved","value":"Token::Reserved(&'a str)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" A reserved series of `idchar` symbols. Unknown what this is meant to be\n used for, you'll probably generate an error about an unexpected token.\n","sig":null,"attributes":[{"value":"/ A reserved series of `idchar` symbols. Unknown what this is meant to be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135482,"byte_end":135557,"line_start":81,"line_end":81,"column_start":5,"column_end":80}},{"value":"/ used for, you'll probably generate an error about an unexpected token.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135562,"byte_end":135636,"line_start":82,"line_end":82,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7965},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135685,"byte_end":135692,"line_start":86,"line_end":86,"column_start":5,"column_end":12},"name":"Integer","qualname":"::lexer::Token::Integer","value":"Token::Integer(Integer)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" An integer.\n","sig":null,"attributes":[{"value":"/ An integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135665,"byte_end":135680,"line_start":85,"line_end":85,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7968},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135729,"byte_end":135734,"line_start":89,"line_end":89,"column_start":5,"column_end":10},"name":"Float","qualname":"::lexer::Token::Float","value":"Token::Float(Float)","parent":{"krate":0,"index":7936},"children":[],"decl_id":null,"docs":" A float.\n","sig":null,"attributes":[{"value":"/ A float.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135712,"byte_end":135724,"line_start":88,"line_end":88,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":7936},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134581,"byte_end":134586,"line_start":51,"line_end":51,"column_start":10,"column_end":15},"name":"Token","qualname":"::lexer::Token","value":"pub enum Token<'a> {\n\n    /// A line comment, preceded with `;;`\n    LineComment(&'a str),\n\n    /// A block comment, surrounded by `(;` and `;)`. Note that these can be\n    /// nested.\n    BlockComment(&'a str),\n\n    /// A fragment of source that represents whitespace.\n    Whitespace(&'a str),\n\n    /// A left-parenthesis, including the source text for where it comes from.\n    LParen(&'a str),\n\n    /// A right-parenthesis, including the source text for where it comes from.\n    RParen(&'a str),\n\n    /// A string literal, which is actually a list of bytes.\n    String(WasmString),\n\n    /// An identifier (like `$foo`).\n    ///\n    /// All identifiers start with `$` and the payload here is the original\n    /// source text.\n    Id(&'a str),\n\n    /// A keyword, or something that starts with an alphabetic character.\n    ///\n    /// The payload here is the original source text.\n    Keyword(&'a str),\n\n    /// A reserved series of `idchar` symbols. Unknown what this is meant to be\n    /// used for, you'll probably generate an error about an unexpected token.\n    Reserved(&'a str),\n\n    /// An integer.\n    Integer(Integer),\n\n    /// A float.\n    Float(Float),\n}","parent":null,"children":[{"krate":0,"index":7938},{"krate":0,"index":7941},{"krate":0,"index":7944},{"krate":0,"index":7947},{"krate":0,"index":7950},{"krate":0,"index":7953},{"krate":0,"index":7956},{"krate":0,"index":7959},{"krate":0,"index":7962},{"krate":0,"index":7965},{"krate":0,"index":7968}],"decl_id":null,"docs":" A fragment of source lex'd from an input string.","sig":null,"attributes":[{"value":"/ A fragment of source lex'd from an input string.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134319,"byte_end":134371,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134372,"byte_end":134375,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This enumeration contains all kinds of fragments, including comments and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134376,"byte_end":134452,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ whitespace. For most cases you'll probably ignore these and simply look at","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134453,"byte_end":134531,"line_start":48,"line_end":48,"column_start":1,"column_end":79}},{"value":"/ tokens.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":134532,"byte_end":134543,"line_start":49,"line_end":49,"column_start":1,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7981},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136115,"byte_end":136135,"line_start":100,"line_end":100,"column_start":5,"column_end":25},"name":"DanglingBlockComment","qualname":"::lexer::LexError::DanglingBlockComment","value":"LexError::DanglingBlockComment","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" A dangling block comment was found with an unbalanced `(;` which was\n never terminated in the file.\n","sig":null,"attributes":[{"value":"/ A dangling block comment was found with an unbalanced `(;` which was","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136000,"byte_end":136072,"line_start":98,"line_end":98,"column_start":5,"column_end":77}},{"value":"/ never terminated in the file.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136077,"byte_end":136110,"line_start":99,"line_end":99,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7983},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136253,"byte_end":136263,"line_start":104,"line_end":104,"column_start":5,"column_end":15},"name":"Unexpected","qualname":"::lexer::LexError::Unexpected","value":"LexError::Unexpected(char)","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" An unexpected character was encountered when generally parsing and\n looking for something else.\n","sig":null,"attributes":[{"value":"/ An unexpected character was encountered when generally parsing and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136142,"byte_end":136212,"line_start":102,"line_end":102,"column_start":5,"column_end":75}},{"value":"/ looking for something else.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136217,"byte_end":136248,"line_start":103,"line_end":103,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7986},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136333,"byte_end":136353,"line_start":107,"line_end":107,"column_start":5,"column_end":25},"name":"InvalidStringElement","qualname":"::lexer::LexError::InvalidStringElement","value":"LexError::InvalidStringElement(char)","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" An invalid `char` in a string literal was found.\n","sig":null,"attributes":[{"value":"/ An invalid `char` in a string literal was found.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136276,"byte_end":136328,"line_start":106,"line_end":106,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7989},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136469,"byte_end":136488,"line_start":111,"line_end":111,"column_start":5,"column_end":24},"name":"InvalidStringEscape","qualname":"::lexer::LexError::InvalidStringEscape","value":"LexError::InvalidStringEscape(char)","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" An invalid string escape letter was found (the thing after the `\\` in\n string literals)\n","sig":null,"attributes":[{"value":"/ An invalid string escape letter was found (the thing after the `\\` in","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136366,"byte_end":136439,"line_start":109,"line_end":109,"column_start":5,"column_end":78}},{"value":"/ string literals)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136444,"byte_end":136464,"line_start":110,"line_end":110,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7992},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136549,"byte_end":136564,"line_start":114,"line_end":114,"column_start":5,"column_end":20},"name":"InvalidHexDigit","qualname":"::lexer::LexError::InvalidHexDigit","value":"LexError::InvalidHexDigit(char)","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" An invalid hexadecimal digit was found.\n","sig":null,"attributes":[{"value":"/ An invalid hexadecimal digit was found.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136501,"byte_end":136544,"line_start":113,"line_end":113,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7995},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136621,"byte_end":136633,"line_start":117,"line_end":117,"column_start":5,"column_end":17},"name":"InvalidDigit","qualname":"::lexer::LexError::InvalidDigit","value":"LexError::InvalidDigit(char)","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" An invalid base-10 digit was found.\n","sig":null,"attributes":[{"value":"/ An invalid base-10 digit was found.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136577,"byte_end":136616,"line_start":116,"line_end":116,"column_start":5,"column_end":44}}]},{"kind":"StructVariant","id":{"krate":0,"index":7998},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136767,"byte_end":136775,"line_start":121,"line_end":121,"column_start":5,"column_end":13},"name":"Expected","qualname":"::lexer::LexError::Expected","value":"LexError::Expected { wanted, found }","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" Parsing expected `wanted` but ended up finding `found` instead where the\n two characters aren't the same.\n","sig":null,"attributes":[{"value":"/ Parsing expected `wanted` but ended up finding `found` instead where the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136646,"byte_end":136722,"line_start":119,"line_end":119,"column_start":5,"column_end":81}},{"value":"/ two characters aren't the same.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136727,"byte_end":136762,"line_start":120,"line_end":120,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8001},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137019,"byte_end":137032,"line_start":129,"line_end":129,"column_start":5,"column_end":18},"name":"UnexpectedEof","qualname":"::lexer::LexError::UnexpectedEof","value":"LexError::UnexpectedEof","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" We needed to parse more but EOF (or end of the string) was encountered.\n","sig":null,"attributes":[{"value":"/ We needed to parse more but EOF (or end of the string) was encountered.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":136939,"byte_end":137014,"line_start":128,"line_end":128,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8003},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137134,"byte_end":137146,"line_start":133,"line_end":133,"column_start":5,"column_end":17},"name":"NumberTooBig","qualname":"::lexer::LexError::NumberTooBig","value":"LexError::NumberTooBig","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" A number failed to parse because it was too big to fit within the target\n type.\n","sig":null,"attributes":[{"value":"/ A number failed to parse because it was too big to fit within the target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137039,"byte_end":137115,"line_start":131,"line_end":131,"column_start":5,"column_end":81}},{"value":"/ type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137120,"byte_end":137129,"line_start":132,"line_end":132,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8005},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137291,"byte_end":137310,"line_start":137,"line_end":137,"column_start":5,"column_end":24},"name":"InvalidUnicodeValue","qualname":"::lexer::LexError::InvalidUnicodeValue","value":"LexError::InvalidUnicodeValue(u32)","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" An invalid unicode value was found in a `\\u{...}` escape in a string,\n only valid unicode scalars can be escaped that way.\n","sig":null,"attributes":[{"value":"/ An invalid unicode value was found in a `\\u{...}` escape in a string,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137153,"byte_end":137226,"line_start":135,"line_end":135,"column_start":5,"column_end":78}},{"value":"/ only valid unicode scalars can be escaped that way.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137231,"byte_end":137286,"line_start":136,"line_end":136,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8008},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137474,"byte_end":137488,"line_start":141,"line_end":141,"column_start":5,"column_end":19},"name":"LoneUnderscore","qualname":"::lexer::LexError::LoneUnderscore","value":"LexError::LoneUnderscore","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":" A lone underscore was found when parsing a number, since underscores\n should always be preceded and succeeded with a digit of some form.\n","sig":null,"attributes":[{"value":"/ A lone underscore was found when parsing a number, since underscores","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137322,"byte_end":137394,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/ should always be preceded and succeeded with a digit of some form.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137399,"byte_end":137469,"line_start":140,"line_end":140,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8010},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137514,"byte_end":137529,"line_start":144,"line_end":144,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::lexer::LexError::__Nonexhaustive","value":"LexError::__Nonexhaustive","parent":{"krate":0,"index":7980},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7980},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135985,"byte_end":135993,"line_start":97,"line_end":97,"column_start":10,"column_end":18},"name":"LexError","qualname":"::lexer::LexError","value":"pub enum LexError {\n\n    /// A dangling block comment was found with an unbalanced `(;` which was\n    /// never terminated in the file.\n    DanglingBlockComment,\n\n    /// An unexpected character was encountered when generally parsing and\n    /// looking for something else.\n    Unexpected(char),\n\n    /// An invalid `char` in a string literal was found.\n    InvalidStringElement(char),\n\n    /// An invalid string escape letter was found (the thing after the `\\` in\n    /// string literals)\n    InvalidStringEscape(char),\n\n    /// An invalid hexadecimal digit was found.\n    InvalidHexDigit(char),\n\n    /// An invalid base-10 digit was found.\n    InvalidDigit(char),\n\n    /// Parsing expected `wanted` but ended up finding `found` instead where the\n    /// two characters aren't the same.\n    Expected {\n        /// The character that was expected to be found\n        wanted: char,\n        /// The character that was actually found\n        found: char,\n    },\n\n    /// We needed to parse more but EOF (or end of the string) was encountered.\n    UnexpectedEof,\n\n    /// A number failed to parse because it was too big to fit within the target\n    /// type.\n    NumberTooBig,\n\n    /// An invalid unicode value was found in a `\\u{...}` escape in a string,\n    /// only valid unicode scalars can be escaped that way.\n    InvalidUnicodeValue(u32),\n\n    /// A lone underscore was found when parsing a number, since underscores\n    /// should always be preceded and succeeded with a digit of some form.\n    LoneUnderscore,\n\n    #[doc(hidden)]\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":7981},{"krate":0,"index":7983},{"krate":0,"index":7986},{"krate":0,"index":7989},{"krate":0,"index":7992},{"krate":0,"index":7995},{"krate":0,"index":7998},{"krate":0,"index":8001},{"krate":0,"index":8003},{"krate":0,"index":8005},{"krate":0,"index":8008},{"krate":0,"index":8010}],"decl_id":null,"docs":" Errors that can be generated while lexing.","sig":null,"attributes":[{"value":"/ Errors that can be generated while lexing.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135750,"byte_end":135796,"line_start":92,"line_end":92,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135797,"byte_end":135800,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ All lexing errors have line/colum/position information as well as a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135801,"byte_end":135872,"line_start":94,"line_end":94,"column_start":1,"column_end":72}},{"value":"/ `LexError` indicating what kind of error happened while lexing.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":135873,"byte_end":135940,"line_start":95,"line_end":95,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8021},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137657,"byte_end":137661,"line_start":151,"line_end":151,"column_start":5,"column_end":9},"name":"Plus","qualname":"::lexer::SignToken::Plus","value":"SignToken::Plus","parent":{"krate":0,"index":8020},"children":[],"decl_id":null,"docs":" Plus sign: \"+\",\n","sig":null,"attributes":[{"value":"/ Plus sign: \"+\",","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137633,"byte_end":137652,"line_start":150,"line_end":150,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8023},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137692,"byte_end":137697,"line_start":153,"line_end":153,"column_start":5,"column_end":10},"name":"Minus","qualname":"::lexer::SignToken::Minus","value":"SignToken::Minus","parent":{"krate":0,"index":8020},"children":[],"decl_id":null,"docs":" Minus sign: \"-\",\n","sig":null,"attributes":[{"value":"/ Minus sign: \"-\",","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137667,"byte_end":137687,"line_start":152,"line_end":152,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":8020},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137617,"byte_end":137626,"line_start":149,"line_end":149,"column_start":10,"column_end":19},"name":"SignToken","qualname":"::lexer::SignToken","value":"pub enum SignToken {\n\n    /// Plus sign: \"+\",\n    Plus,\n\n    /// Minus sign: \"-\",\n    Minus,\n}","parent":null,"children":[{"krate":0,"index":8021},{"krate":0,"index":8023}],"decl_id":null,"docs":" A sign token for an integer.\n","sig":null,"attributes":[{"value":"/ A sign token for an integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137534,"byte_end":137566,"line_start":147,"line_end":147,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":8033},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137846,"byte_end":137853,"line_start":160,"line_end":160,"column_start":12,"column_end":19},"name":"Integer","qualname":"::lexer::Integer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A parsed integer, signed or unsigned.","sig":null,"attributes":[{"value":"/ A parsed integer, signed or unsigned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137702,"byte_end":137743,"line_start":156,"line_end":156,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137744,"byte_end":137747,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ Methods can be use to access the value of the integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":137748,"byte_end":137806,"line_start":158,"line_end":158,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":8061},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138145,"byte_end":138150,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"Float","qualname":"::lexer::Float","value":"","parent":null,"children":[],"decl_id":null,"docs":" A parsed float.","sig":null,"attributes":[{"value":"/ A parsed float.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138025,"byte_end":138044,"line_start":170,"line_end":170,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138045,"byte_end":138048,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ Methods can be use to access the value of the float.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138049,"byte_end":138105,"line_start":172,"line_end":172,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":8087},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138334,"byte_end":138344,"line_start":184,"line_end":184,"column_start":12,"column_end":22},"name":"WasmString","qualname":"::lexer::WasmString","value":"","parent":null,"children":[],"decl_id":null,"docs":" A parsed string.\n","sig":null,"attributes":[{"value":"/ A parsed string.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138274,"byte_end":138294,"line_start":182,"line_end":182,"column_start":1,"column_end":21}}]},{"kind":"StructVariant","id":{"krate":0,"index":8115},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138605,"byte_end":138608,"line_start":196,"line_end":196,"column_start":5,"column_end":8},"name":"Nan","qualname":"::lexer::FloatVal::Nan","value":"FloatVal::Nan { val, negative }","parent":{"krate":0,"index":8113},"children":[],"decl_id":null,"docs":" A float `NaN` representation\n","sig":null,"attributes":[{"value":"/ A float `NaN` representation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138568,"byte_end":138600,"line_start":195,"line_end":195,"column_start":5,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":8118},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138841,"byte_end":138844,"line_start":203,"line_end":203,"column_start":5,"column_end":8},"name":"Inf","qualname":"::lexer::FloatVal::Inf","value":"FloatVal::Inf { negative }","parent":{"krate":0,"index":8113},"children":[],"decl_id":null,"docs":" An float infinite representation,\n","sig":null,"attributes":[{"value":"/ An float infinite representation,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138799,"byte_end":138836,"line_start":202,"line_end":202,"column_start":5,"column_end":42}}]},{"kind":"StructVariant","id":{"krate":0,"index":8120},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138965,"byte_end":138968,"line_start":208,"line_end":208,"column_start":5,"column_end":8},"name":"Val","qualname":"::lexer::FloatVal::Val","value":"FloatVal::Val { hex, integral, decimal, exponent }","parent":{"krate":0,"index":8113},"children":[],"decl_id":null,"docs":" A parsed and separated floating point value\n","sig":null,"attributes":[{"value":"/ A parsed and separated floating point value","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138913,"byte_end":138960,"line_start":207,"line_end":207,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":8113},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138549,"byte_end":138557,"line_start":194,"line_end":194,"column_start":10,"column_end":18},"name":"FloatVal","qualname":"::lexer::FloatVal","value":"pub enum FloatVal<'a> {\n\n    /// A float `NaN` representation\n    Nan {\n        /// The specific bits to encode for this float, optionally\n        val: Option<u64>,\n        /// Whether or not this is a negative `NaN` or not.\n        negative: bool,\n    },\n\n    /// An float infinite representation,\n    Inf {\n        #[allow(missing_docs)]\n        negative: bool,\n    },\n\n    /// A parsed and separated floating point value\n    Val {\n        /// Whether or not the `integral` and `decimal` are specified in hex\n        hex: bool,\n        /// The float parts before the `.`\n        integral: Cow,\n        /// The float parts after the `.`\n        decimal: Option<Cow>,\n        /// The exponent to multiple this `integral.decimal` portion of the\n        /// float by. If `hex` is true this is `2^exponent` and otherwise it's\n        /// `10^exponent`\n        exponent: Option<Cow>,\n    },\n}","parent":null,"children":[{"krate":0,"index":8115},{"krate":0,"index":8118},{"krate":0,"index":8120}],"decl_id":null,"docs":" Possible parsed float values\n","sig":null,"attributes":[{"value":"/ Possible parsed float values","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":138479,"byte_end":138511,"line_start":192,"line_end":192,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139556,"byte_end":139559,"line_start":224,"line_end":224,"column_start":12,"column_end":15},"name":"new","qualname":"<Lexer>::new","value":"pub fn new(&str) -> Lexer","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lexer which will lex the `input` source string.\n","sig":null,"attributes":[{"value":"/ Creates a new lexer which will lex the `input` source string.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139479,"byte_end":139544,"line_start":223,"line_end":223,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139761,"byte_end":139766,"line_start":232,"line_end":232,"column_start":12,"column_end":17},"name":"input","qualname":"<Lexer>::input","value":"pub fn input(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original source input that we're lexing.\n","sig":null,"attributes":[{"value":"/ Returns the original source input that we're lexing.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139693,"byte_end":139749,"line_start":231,"line_end":231,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":140030,"byte_end":140035,"line_start":243,"line_end":243,"column_start":12,"column_end":17},"name":"parse","qualname":"<Lexer>::parse","value":"pub fn parse(&mut Self) -> Result<Option<Token>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Lexes the next token in the input.","sig":null,"attributes":[{"value":"/ Lexes the next token in the input.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139817,"byte_end":139855,"line_start":236,"line_end":236,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139860,"byte_end":139863,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Returns `Some` if a token is found or `None` if we're at EOF.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139868,"byte_end":139933,"line_start":238,"line_end":238,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139938,"byte_end":139941,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139946,"byte_end":139958,"line_start":240,"line_end":240,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139963,"byte_end":139966,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the input is malformed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139971,"byte_end":140018,"line_start":242,"line_end":242,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156120,"byte_end":156123,"line_start":708,"line_end":708,"column_start":12,"column_end":15},"name":"src","qualname":"<Token>::src","value":"pub fn src(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original source text for this token.\n","sig":null,"attributes":[{"value":"/ Returns the original source text for this token.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156056,"byte_end":156108,"line_start":707,"line_end":707,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156684,"byte_end":156688,"line_start":727,"line_end":727,"column_start":12,"column_end":16},"name":"sign","qualname":"<Integer>::sign","value":"pub fn sign(&Self) -> Option<SignToken>","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign token for this integer.\n","sig":null,"attributes":[{"value":"/ Returns the sign token for this integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156628,"byte_end":156672,"line_start":726,"line_end":726,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156816,"byte_end":156819,"line_start":732,"line_end":732,"column_start":12,"column_end":15},"name":"src","qualname":"<Integer>::src","value":"pub fn src(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original source text for this integer.\n","sig":null,"attributes":[{"value":"/ Returns the original source text for this integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156750,"byte_end":156804,"line_start":731,"line_end":731,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157003,"byte_end":157006,"line_start":738,"line_end":738,"column_start":12,"column_end":15},"name":"val","qualname":"<Integer>::val","value":"pub fn val(&Self) -> (&str, u32)","parent":null,"children":[],"decl_id":null,"docs":" Returns the value string that can be parsed for this integer, as well as\n the base that it should be parsed in\n","sig":null,"attributes":[{"value":"/ Returns the value string that can be parsed for this integer, as well as","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156870,"byte_end":156946,"line_start":736,"line_end":736,"column_start":5,"column_end":81}},{"value":"/ the base that it should be parsed in","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156951,"byte_end":156991,"line_start":737,"line_end":737,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157187,"byte_end":157190,"line_start":745,"line_end":745,"column_start":12,"column_end":15},"name":"src","qualname":"<Float>::src","value":"pub fn src(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original source text for this integer.\n","sig":null,"attributes":[{"value":"/ Returns the original source text for this integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157121,"byte_end":157175,"line_start":744,"line_end":744,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157353,"byte_end":157356,"line_start":751,"line_end":751,"column_start":12,"column_end":15},"name":"val","qualname":"<Float>::val","value":"pub fn val(&Self) -> &FloatVal","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed value of this float with all of the components still\n listed as strings.\n","sig":null,"attributes":[{"value":"/ Returns a parsed value of this float with all of the components still","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157241,"byte_end":157314,"line_start":749,"line_end":749,"column_start":5,"column_end":78}},{"value":"/ listed as strings.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157319,"byte_end":157341,"line_start":750,"line_end":750,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157507,"byte_end":157510,"line_start":758,"line_end":758,"column_start":12,"column_end":15},"name":"src","qualname":"<WasmString>::src","value":"pub fn src(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the original source text for this string.\n","sig":null,"attributes":[{"value":"/ Returns the original source text for this string.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157442,"byte_end":157495,"line_start":757,"line_end":757,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157637,"byte_end":157640,"line_start":763,"line_end":763,"column_start":12,"column_end":15},"name":"val","qualname":"<WasmString>::val","value":"pub fn val(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed value, as a list of bytes, for this string.\n","sig":null,"attributes":[{"value":"/ Returns a parsed value, as a list of bytes, for this string.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157561,"byte_end":157625,"line_start":762,"line_end":762,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parser","qualname":"::parser","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":8134},{"krate":0,"index":8146},{"krate":0,"index":8144},{"krate":0,"index":8142},{"krate":0,"index":8147},{"krate":0,"index":8153},{"krate":0,"index":8150},{"krate":0,"index":565},{"krate":0,"index":8155},{"krate":0,"index":8162},{"krate":0,"index":8159},{"krate":0,"index":569},{"krate":0,"index":583},{"krate":0,"index":619},{"krate":0,"index":641},{"krate":0,"index":645}],"decl_id":null,"docs":" Traits for parsing the WebAssembly Text format","sig":null,"attributes":[{"value":"/ Traits for parsing the WebAssembly Text format","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169047,"byte_end":169097,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169098,"byte_end":169101,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains the traits, abstractions, and utilities needed to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169102,"byte_end":169176,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ define custom parsers for WebAssembly text format items. This module exposes","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169177,"byte_end":169257,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ a recursive descent parsing strategy and centers around the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169258,"byte_end":169321,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"/ [`Parse`](crate::parser::Parse) trait for defining new fragments of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169322,"byte_end":169393,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/ WebAssembly text syntax.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169394,"byte_end":169422,"line_start":7,"line_end":7,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169423,"byte_end":169426,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The top-level [`parse`](crate::parser::parse) function can be used to fully parse AST fragments:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169427,"byte_end":169527,"line_start":9,"line_end":9,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169528,"byte_end":169531,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169532,"byte_end":169539,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use wast::Wat;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169540,"byte_end":169558,"line_start":12,"line_end":12,"column_start":1,"column_end":19}},{"value":"/ use wast::parser::{self, ParseBuffer};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169559,"byte_end":169601,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169602,"byte_end":169605,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # fn foo() -> Result<(), wast::Error> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169606,"byte_end":169649,"line_start":15,"line_end":15,"column_start":1,"column_end":44}},{"value":"/ let wat = \"(module (func))\";","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169650,"byte_end":169682,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/ let buf = ParseBuffer::new(wat)?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169683,"byte_end":169720,"line_start":17,"line_end":17,"column_start":1,"column_end":38}},{"value":"/ let module = parser::parse::<Wat>(&buf)?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169721,"byte_end":169766,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169767,"byte_end":169779,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169780,"byte_end":169787,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169788,"byte_end":169795,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169796,"byte_end":169799,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ and you can also define your own new syntax with the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169800,"byte_end":169856,"line_start":23,"line_end":23,"column_start":1,"column_end":57}},{"value":"/ [`Parse`](crate::parser::Parse) trait:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169857,"byte_end":169899,"line_start":24,"line_end":24,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169900,"byte_end":169903,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169904,"byte_end":169911,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ use wast::{kw, Import, Func};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169912,"byte_end":169945,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/ use wast::parser::{Parser, Parse, Result};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169946,"byte_end":169992,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169993,"byte_end":169996,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // Fields of a WebAssembly which only allow imports and functions, and all","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":169997,"byte_end":170075,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ // imports must come before all the functions","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170076,"byte_end":170125,"line_start":31,"line_end":31,"column_start":1,"column_end":50}},{"value":"/ struct OnlyImportsAndFunctions<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170126,"byte_end":170166,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     imports: Vec<Import<'a>>,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170167,"byte_end":170200,"line_start":33,"line_end":33,"column_start":1,"column_end":34}},{"value":"/     functions: Vec<Func<'a>>,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170201,"byte_end":170234,"line_start":34,"line_end":34,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170235,"byte_end":170240,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170241,"byte_end":170244,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ impl<'a> Parse<'a> for OnlyImportsAndFunctions<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170245,"byte_end":170301,"line_start":37,"line_end":37,"column_start":1,"column_end":57}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170302,"byte_end":170356,"line_start":38,"line_end":38,"column_start":1,"column_end":55}},{"value":"/         // While the second token is `import` (the first is `(`, so we care","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170357,"byte_end":170436,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/         // about the second) we parse an `ast::ModuleImport` inside of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170437,"byte_end":170511,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/         // parentheses. The `parens` function here ensures that what we","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170512,"byte_end":170587,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/         // parse inside of it is surrounded by `(` and `)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170588,"byte_end":170651,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/         let mut imports = Vec::new();","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170652,"byte_end":170693,"line_start":43,"line_end":43,"column_start":1,"column_end":42}},{"value":"/         while parser.peek2::<kw::import>() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170694,"byte_end":170742,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/             let import = parser.parens(|p| p.parse())?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170743,"byte_end":170802,"line_start":45,"line_end":45,"column_start":1,"column_end":60}},{"value":"/             imports.push(import);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170803,"byte_end":170840,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170841,"byte_end":170854,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170855,"byte_end":170858,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/         // Afterwards we assume everything else is a function. Note that","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170859,"byte_end":170935,"line_start":49,"line_end":49,"column_start":1,"column_end":77}},{"value":"/         // `parse` here is a generic function and type inference figures out","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":170936,"byte_end":171016,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/         // that we're parsing functions here and imports above.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171017,"byte_end":171084,"line_start":51,"line_end":51,"column_start":1,"column_end":68}},{"value":"/         let mut functions = Vec::new();","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171085,"byte_end":171128,"line_start":52,"line_end":52,"column_start":1,"column_end":44}},{"value":"/         while !parser.is_empty() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171129,"byte_end":171167,"line_start":53,"line_end":53,"column_start":1,"column_end":39}},{"value":"/             let func = parser.parens(|p| p.parse())?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171168,"byte_end":171225,"line_start":54,"line_end":54,"column_start":1,"column_end":58}},{"value":"/             functions.push(func);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171226,"byte_end":171263,"line_start":55,"line_end":55,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171264,"byte_end":171277,"line_start":56,"line_end":56,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171278,"byte_end":171281,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/         Ok(OnlyImportsAndFunctions { imports, functions })","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171282,"byte_end":171344,"line_start":58,"line_end":58,"column_start":1,"column_end":63}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171345,"byte_end":171354,"line_start":59,"line_end":59,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171355,"byte_end":171360,"line_start":60,"line_end":60,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171361,"byte_end":171368,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171369,"byte_end":171372,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This module is heavily inspired by [`syn`](https://docs.rs/syn) so you can","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171373,"byte_end":171451,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/ likely also draw inspiration from the excellent examples in the `syn` crate.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171452,"byte_end":171532,"line_start":64,"line_end":64,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172580,"byte_end":172585,"line_start":106,"line_end":106,"column_start":8,"column_end":13},"name":"parse","qualname":"::parser::parse","value":"pub fn parse<'a, T: Parse>(&'a ParseBuffer) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" A top-level convenience parseing function that parss a `T` from `buf` and\n requires that all tokens in `buf` are consume.","sig":null,"attributes":[{"value":"/ A top-level convenience parseing function that parss a `T` from `buf` and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171704,"byte_end":171781,"line_start":73,"line_end":73,"column_start":1,"column_end":78}},{"value":"/ requires that all tokens in `buf` are consume.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171782,"byte_end":171832,"line_start":74,"line_end":74,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171833,"byte_end":171836,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ This generic parsing function can be used to parse any `T` implementing the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171837,"byte_end":171916,"line_start":76,"line_end":76,"column_start":1,"column_end":80}},{"value":"/ [`Parse`] trait. It is not used from [`Parse`] trait implementations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171917,"byte_end":171990,"line_start":77,"line_end":77,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171991,"byte_end":171994,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":171995,"byte_end":172009,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172010,"byte_end":172013,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172014,"byte_end":172021,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ use wast::Wat;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172022,"byte_end":172040,"line_start":82,"line_end":82,"column_start":1,"column_end":19}},{"value":"/ use wast::parser::{self, ParseBuffer};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172041,"byte_end":172083,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172084,"byte_end":172087,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ # fn foo() -> Result<(), wast::Error> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172088,"byte_end":172131,"line_start":85,"line_end":85,"column_start":1,"column_end":44}},{"value":"/ let wat = \"(module (func))\";","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172132,"byte_end":172164,"line_start":86,"line_end":86,"column_start":1,"column_end":33}},{"value":"/ let buf = ParseBuffer::new(wat)?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172165,"byte_end":172202,"line_start":87,"line_end":87,"column_start":1,"column_end":38}},{"value":"/ let module = parser::parse::<Wat>(&buf)?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172203,"byte_end":172248,"line_start":88,"line_end":88,"column_start":1,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172249,"byte_end":172261,"line_start":89,"line_end":89,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172262,"byte_end":172269,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172270,"byte_end":172277,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172278,"byte_end":172281,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ or parsing simply a fragment","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172282,"byte_end":172314,"line_start":93,"line_end":93,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172315,"byte_end":172318,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172319,"byte_end":172326,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ use wast::parser::{self, ParseBuffer};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172327,"byte_end":172369,"line_start":96,"line_end":96,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172370,"byte_end":172373,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ # fn foo() -> Result<(), wast::Error> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172374,"byte_end":172417,"line_start":98,"line_end":98,"column_start":1,"column_end":44}},{"value":"/ let wat = \"12\";","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172418,"byte_end":172437,"line_start":99,"line_end":99,"column_start":1,"column_end":20}},{"value":"/ let buf = ParseBuffer::new(wat)?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172438,"byte_end":172475,"line_start":100,"line_end":100,"column_start":1,"column_end":38}},{"value":"/ let val = parser::parse::<u32>(&buf)?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172476,"byte_end":172518,"line_start":101,"line_end":101,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(val, 12);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172519,"byte_end":172543,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172544,"byte_end":172556,"line_start":103,"line_end":103,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172557,"byte_end":172564,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172565,"byte_end":172572,"line_start":105,"line_end":105,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":549},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176586,"byte_end":176591,"line_start":208,"line_end":208,"column_start":11,"column_end":16},"name":"Parse","qualname":"::parser::Parse","value":"Parse<'a>: Sized","parent":null,"children":[{"krate":0,"index":551}],"decl_id":null,"docs":" A trait for parsing a fragment of syntax in a recursive descent fashion.","sig":null,"attributes":[{"value":"/ A trait for parsing a fragment of syntax in a recursive descent fashion.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172866,"byte_end":172942,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172943,"byte_end":172946,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The [`Parse`] trait is main abstraction you'll be working with when defining","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":172947,"byte_end":173027,"line_start":118,"line_end":118,"column_start":1,"column_end":81}},{"value":"/ custom parser or custom syntax for your WebAssembly text format (or when","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173028,"byte_end":173104,"line_start":119,"line_end":119,"column_start":1,"column_end":77}},{"value":"/ using the official format items). Almost all items in the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173105,"byte_end":173166,"line_start":120,"line_end":120,"column_start":1,"column_end":62}},{"value":"/ [`ast`](crate::ast) module implement the [`Parse`] trait, and you'll","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173167,"byte_end":173239,"line_start":121,"line_end":121,"column_start":1,"column_end":73}},{"value":"/ commonly use this with:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173240,"byte_end":173267,"line_start":122,"line_end":122,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173268,"byte_end":173271,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ * The top-level [`parse`] function to parse an entire input.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173272,"byte_end":173336,"line_start":124,"line_end":124,"column_start":1,"column_end":65}},{"value":"/ * The intermediate [`Parser::parse`] function to parse an item out of an","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173337,"byte_end":173413,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/   input stream and then parse remaining items.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173414,"byte_end":173464,"line_start":126,"line_end":126,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173465,"byte_end":173468,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`Parse`] take a [`Parser`] as input and will mutate the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173469,"byte_end":173547,"line_start":128,"line_end":128,"column_start":1,"column_end":79}},{"value":"/ parser as they parse syntax. Once a token is consume it cannot be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173548,"byte_end":173617,"line_start":129,"line_end":129,"column_start":1,"column_end":70}},{"value":"/ \"un-consumed\". Utilities such as [`Parser::peek`] and [`Parser::lookahead1`]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173618,"byte_end":173698,"line_start":130,"line_end":130,"column_start":1,"column_end":81}},{"value":"/ can be used to determine what to parse next.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173699,"byte_end":173747,"line_start":131,"line_end":131,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173748,"byte_end":173751,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ ## When to parse `(` and `)`?","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173752,"byte_end":173785,"line_start":133,"line_end":133,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173786,"byte_end":173789,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Conventionally types are not responsible for parsing their own `(` and `)`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173790,"byte_end":173868,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/ tokens which surround the type. For example WebAssembly imports look like:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173869,"byte_end":173947,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173948,"byte_end":173951,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173952,"byte_end":173963,"line_start":138,"line_end":138,"column_start":1,"column_end":12}},{"value":"/ (import \"foo\" \"bar\" (func (type 0)))","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":173964,"byte_end":174004,"line_start":139,"line_end":139,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174005,"byte_end":174012,"line_start":140,"line_end":140,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174013,"byte_end":174016,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ but the [`Import`](crate::ast::Import) type parser looks like:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174017,"byte_end":174083,"line_start":142,"line_end":142,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174084,"byte_end":174087,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174088,"byte_end":174095,"line_start":144,"line_end":144,"column_start":1,"column_end":8}},{"value":"/ # use wast::kw;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174096,"byte_end":174115,"line_start":145,"line_end":145,"column_start":1,"column_end":20}},{"value":"/ # use wast::parser::{Parser, Parse, Result};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174116,"byte_end":174164,"line_start":146,"line_end":146,"column_start":1,"column_end":49}},{"value":"/ # struct Import<'a>(&'a str);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174165,"byte_end":174198,"line_start":147,"line_end":147,"column_start":1,"column_end":34}},{"value":"/ impl<'a> Parse<'a> for Import<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174199,"byte_end":174238,"line_start":148,"line_end":148,"column_start":1,"column_end":40}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174239,"byte_end":174293,"line_start":149,"line_end":149,"column_start":1,"column_end":55}},{"value":"/         parser.parse::<kw::import>()?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174294,"byte_end":174336,"line_start":150,"line_end":150,"column_start":1,"column_end":43}},{"value":"/         // ...","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174337,"byte_end":174355,"line_start":151,"line_end":151,"column_start":1,"column_end":19}},{"value":"/ # panic!()","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174356,"byte_end":174370,"line_start":152,"line_end":152,"column_start":1,"column_end":15}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174371,"byte_end":174380,"line_start":153,"line_end":153,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174381,"byte_end":174386,"line_start":154,"line_end":154,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174387,"byte_end":174394,"line_start":155,"line_end":155,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174395,"byte_end":174398,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ It is assumed here that the `(` and `)` tokens which surround an `import`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174399,"byte_end":174476,"line_start":157,"line_end":157,"column_start":1,"column_end":78}},{"value":"/ statement in the WebAssembly text format are parsed by the parent item","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174477,"byte_end":174551,"line_start":158,"line_end":158,"column_start":1,"column_end":75}},{"value":"/ parsing `Import`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174552,"byte_end":174573,"line_start":159,"line_end":159,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174574,"byte_end":174577,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this is just a convention, so it's not necessarily required for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174578,"byte_end":174655,"line_start":161,"line_end":161,"column_start":1,"column_end":78}},{"value":"/ all types. It's recommended that your types stick to this convention where","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174656,"byte_end":174734,"line_start":162,"line_end":162,"column_start":1,"column_end":79}},{"value":"/ possible to avoid nested calls to [`Parser::parens`] or accidentally trying","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174735,"byte_end":174814,"line_start":163,"line_end":163,"column_start":1,"column_end":80}},{"value":"/ to parse too many parenthesis.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174815,"byte_end":174849,"line_start":164,"line_end":164,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174850,"byte_end":174853,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174854,"byte_end":174868,"line_start":166,"line_end":166,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174869,"byte_end":174872,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ Let's say you want to define your own WebAssembly text format which only","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174873,"byte_end":174949,"line_start":168,"line_end":168,"column_start":1,"column_end":77}},{"value":"/ contains imports and functions. You also require all imports to be listed","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":174950,"byte_end":175027,"line_start":169,"line_end":169,"column_start":1,"column_end":78}},{"value":"/ before all functions. An example [`Parse`] implementation might look like:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175028,"byte_end":175106,"line_start":170,"line_end":170,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175107,"byte_end":175110,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175111,"byte_end":175118,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/ use wast::{Import, Func, kw};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175119,"byte_end":175152,"line_start":173,"line_end":173,"column_start":1,"column_end":34}},{"value":"/ use wast::parser::{Parser, Parse, Result};","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175153,"byte_end":175199,"line_start":174,"line_end":174,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175200,"byte_end":175203,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ // Fields of a WebAssembly which only allow imports and functions, and all","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175204,"byte_end":175282,"line_start":176,"line_end":176,"column_start":1,"column_end":79}},{"value":"/ // imports must come before all the functions","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175283,"byte_end":175332,"line_start":177,"line_end":177,"column_start":1,"column_end":50}},{"value":"/ struct OnlyImportsAndFunctions<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175333,"byte_end":175373,"line_start":178,"line_end":178,"column_start":1,"column_end":41}},{"value":"/     imports: Vec<Import<'a>>,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175374,"byte_end":175407,"line_start":179,"line_end":179,"column_start":1,"column_end":34}},{"value":"/     functions: Vec<Func<'a>>,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175408,"byte_end":175441,"line_start":180,"line_end":180,"column_start":1,"column_end":34}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175442,"byte_end":175447,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175448,"byte_end":175451,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ impl<'a> Parse<'a> for OnlyImportsAndFunctions<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175452,"byte_end":175508,"line_start":183,"line_end":183,"column_start":1,"column_end":57}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175509,"byte_end":175563,"line_start":184,"line_end":184,"column_start":1,"column_end":55}},{"value":"/         // While the second token is `import` (the first is `(`, so we care","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175564,"byte_end":175643,"line_start":185,"line_end":185,"column_start":1,"column_end":80}},{"value":"/         // about the second) we parse an `ast::ModuleImport` inside of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175644,"byte_end":175718,"line_start":186,"line_end":186,"column_start":1,"column_end":75}},{"value":"/         // parentheses. The `parens` function here ensures that what we","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175719,"byte_end":175794,"line_start":187,"line_end":187,"column_start":1,"column_end":76}},{"value":"/         // parse inside of it is surrounded by `(` and `)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175795,"byte_end":175858,"line_start":188,"line_end":188,"column_start":1,"column_end":64}},{"value":"/         let mut imports = Vec::new();","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175859,"byte_end":175900,"line_start":189,"line_end":189,"column_start":1,"column_end":42}},{"value":"/         while parser.peek2::<kw::import>() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175901,"byte_end":175949,"line_start":190,"line_end":190,"column_start":1,"column_end":49}},{"value":"/             let import = parser.parens(|p| p.parse())?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":175950,"byte_end":176009,"line_start":191,"line_end":191,"column_start":1,"column_end":60}},{"value":"/             imports.push(import);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176010,"byte_end":176047,"line_start":192,"line_end":192,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176048,"byte_end":176061,"line_start":193,"line_end":193,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176062,"byte_end":176065,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/         // Afterwards we assume everything else is a function. Note that","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176066,"byte_end":176142,"line_start":195,"line_end":195,"column_start":1,"column_end":77}},{"value":"/         // `parse` here is a generic function and type inference figures out","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176143,"byte_end":176223,"line_start":196,"line_end":196,"column_start":1,"column_end":81}},{"value":"/         // that we're parsing functions here and imports above.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176224,"byte_end":176291,"line_start":197,"line_end":197,"column_start":1,"column_end":68}},{"value":"/         let mut functions = Vec::new();","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176292,"byte_end":176335,"line_start":198,"line_end":198,"column_start":1,"column_end":44}},{"value":"/         while !parser.is_empty() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176336,"byte_end":176374,"line_start":199,"line_end":199,"column_start":1,"column_end":39}},{"value":"/             let func = parser.parens(|p| p.parse())?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176375,"byte_end":176432,"line_start":200,"line_end":200,"column_start":1,"column_end":58}},{"value":"/             functions.push(func);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176433,"byte_end":176470,"line_start":201,"line_end":201,"column_start":1,"column_end":38}},{"value":"/         }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176471,"byte_end":176484,"line_start":202,"line_end":202,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176485,"byte_end":176488,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/         Ok(OnlyImportsAndFunctions { imports, functions })","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176489,"byte_end":176551,"line_start":204,"line_end":204,"column_start":1,"column_end":63}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176552,"byte_end":176561,"line_start":205,"line_end":205,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176562,"byte_end":176567,"line_start":206,"line_end":206,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176568,"byte_end":176575,"line_start":207,"line_end":207,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177559,"byte_end":177564,"line_start":228,"line_end":228,"column_start":8,"column_end":13},"name":"parse","qualname":"::parser::Parse::parse","value":"pub fn parse(Parser) -> Result<Self>","parent":{"krate":0,"index":549},"children":[],"decl_id":null,"docs":" Attempts to parse `Self` from `parser`, returning an error if it could\n not be parsed.","sig":null,"attributes":[{"value":"/ Attempts to parse `Self` from `parser`, returning an error if it could","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176609,"byte_end":176683,"line_start":209,"line_end":209,"column_start":5,"column_end":79}},{"value":"/ not be parsed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176688,"byte_end":176706,"line_start":210,"line_end":210,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176711,"byte_end":176714,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ This method will mutate the state of `parser` after attempting to parse","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176719,"byte_end":176794,"line_start":212,"line_end":212,"column_start":5,"column_end":80}},{"value":"/ an instance of `Self`. If an error happens then it is likely fatal and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176799,"byte_end":176873,"line_start":213,"line_end":213,"column_start":5,"column_end":79}},{"value":"/ there is no guarantee of how many tokens have been consumed from","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176878,"byte_end":176946,"line_start":214,"line_end":214,"column_start":5,"column_end":73}},{"value":"/ `parser`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176951,"byte_end":176964,"line_start":215,"line_end":215,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176969,"byte_end":176972,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ As recommended in the documentation of [`Parse`], implementations of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176977,"byte_end":177049,"line_start":217,"line_end":217,"column_start":5,"column_end":77}},{"value":"/ this function should not start out by parsing `(` and `)` tokens, but","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177054,"byte_end":177127,"line_start":218,"line_end":218,"column_start":5,"column_end":78}},{"value":"/ rather parents calling recursive parsers should parse the `(` and `)`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177132,"byte_end":177205,"line_start":219,"line_end":219,"column_start":5,"column_end":78}},{"value":"/ tokens for their child item that's being parsed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177210,"byte_end":177262,"line_start":220,"line_end":220,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177267,"byte_end":177270,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177275,"byte_end":177287,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177292,"byte_end":177295,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This function will return an error if `Self` could not be parsed. Note","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177300,"byte_end":177374,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/ that creating an [`Error`] is not exactly a cheap operation, so","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177379,"byte_end":177446,"line_start":225,"line_end":225,"column_start":5,"column_end":72}},{"value":"/ [`Error`] is typically fatal and propagated all the way back to the top","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177451,"byte_end":177526,"line_start":226,"line_end":226,"column_start":5,"column_end":80}},{"value":"/ parse call site.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177531,"byte_end":177551,"line_start":227,"line_end":227,"column_start":5,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":552},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178322,"byte_end":178326,"line_start":245,"line_end":245,"column_start":11,"column_end":15},"name":"Peek","qualname":"::parser::Peek","value":"Peek","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555}],"decl_id":null,"docs":" A trait for types which be used to \"peek\" to see if they're the next token\n in an input stream of [`Parser`].","sig":null,"attributes":[{"value":"/ A trait for types which be used to \"peek\" to see if they're the next token","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177605,"byte_end":177683,"line_start":231,"line_end":231,"column_start":1,"column_end":79}},{"value":"/ in an input stream of [`Parser`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177684,"byte_end":177721,"line_start":232,"line_end":232,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177722,"byte_end":177725,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ Often when implementing [`Parse`] you'll need to query what the next token","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177726,"byte_end":177804,"line_start":234,"line_end":234,"column_start":1,"column_end":79}},{"value":"/ in the stream is to figure out what to parse next. This [`Peek`] trait","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177805,"byte_end":177879,"line_start":235,"line_end":235,"column_start":1,"column_end":75}},{"value":"/ defines the set of types that can be tested whether they're the next token","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177880,"byte_end":177958,"line_start":236,"line_end":236,"column_start":1,"column_end":79}},{"value":"/ in the input stream.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177959,"byte_end":177983,"line_start":237,"line_end":237,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177984,"byte_end":177987,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ Implementations of [`Peek`] should only be present on types that consume","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":177988,"byte_end":178064,"line_start":239,"line_end":239,"column_start":1,"column_end":77}},{"value":"/ exactly one token (not zero, not more, exactly one). Types implementing","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178065,"byte_end":178140,"line_start":240,"line_end":240,"column_start":1,"column_end":76}},{"value":"/ [`Peek`] should also typically implement [`Parse`] should also typically","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178141,"byte_end":178217,"line_start":241,"line_end":241,"column_start":1,"column_end":77}},{"value":"/ implement [`Parse`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178218,"byte_end":178242,"line_start":242,"line_end":242,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178243,"byte_end":178246,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ See the documentation of [`Parser::peek`] for example usage.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178247,"byte_end":178311,"line_start":244,"line_end":244,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178623,"byte_end":178627,"line_start":252,"line_end":252,"column_start":8,"column_end":12},"name":"peek","qualname":"::parser::Peek::peek","value":"pub fn peek(Cursor) -> bool","parent":{"krate":0,"index":552},"children":[],"decl_id":null,"docs":" Tests to see whether this token is the first token within the [`Cursor`]\n specified.","sig":null,"attributes":[{"value":"/ Tests to see whether this token is the first token within the [`Cursor`]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178333,"byte_end":178409,"line_start":246,"line_end":246,"column_start":5,"column_end":81}},{"value":"/ specified.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178414,"byte_end":178428,"line_start":247,"line_end":247,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178433,"byte_end":178436,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Returns `true` if [`Parse`] for this type is highly likely to succeed","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178441,"byte_end":178514,"line_start":249,"line_end":249,"column_start":5,"column_end":78}},{"value":"/ failing no other error conditions happening (like an integer literal","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178519,"byte_end":178591,"line_start":250,"line_end":250,"column_start":5,"column_end":77}},{"value":"/ being too big).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178596,"byte_end":178615,"line_start":251,"line_end":251,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178769,"byte_end":178774,"line_start":256,"line_end":256,"column_start":8,"column_end":13},"name":"peek2","qualname":"::parser::Peek::peek2","value":"pub fn peek2(Cursor) -> bool","parent":{"krate":0,"index":552},"children":[],"decl_id":null,"docs":" The same as `peek`, except it checks the token immediately following\n the current token.\n","sig":null,"attributes":[{"value":"/ The same as `peek`, except it checks the token immediately following","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178662,"byte_end":178734,"line_start":254,"line_end":254,"column_start":5,"column_end":77}},{"value":"/ the current token.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178739,"byte_end":178761,"line_start":255,"line_end":255,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179065,"byte_end":179072,"line_start":266,"line_end":266,"column_start":8,"column_end":15},"name":"display","qualname":"::parser::Peek::display","value":"pub fn display() -> &'static str","parent":{"krate":0,"index":552},"children":[],"decl_id":null,"docs":" Returns a human-readable name of this token to display when generating\n errors about this token missing.\n","sig":null,"attributes":[{"value":"/ Returns a human-readable name of this token to display when generating","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":178942,"byte_end":179016,"line_start":264,"line_end":264,"column_start":5,"column_end":79}},{"value":"/ errors about this token missing.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179021,"byte_end":179057,"line_start":265,"line_end":265,"column_start":5,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":556},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179198,"byte_end":179204,"line_start":271,"line_end":271,"column_start":10,"column_end":16},"name":"Result","qualname":"::parser::Result","value":"std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A convenience type definition for `Result` where the error is hardwired to\n [`Error`].\n","sig":null,"attributes":[{"value":"/ A convenience type definition for `Result` where the error is hardwired to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179095,"byte_end":179173,"line_start":269,"line_end":269,"column_start":1,"column_end":79}},{"value":"/ [`Error`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179174,"byte_end":179188,"line_start":270,"line_end":270,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":558},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179505,"byte_end":179516,"line_start":278,"line_end":278,"column_start":12,"column_end":23},"name":"ParseBuffer","qualname":"::parser::ParseBuffer","value":"ParseBuffer {  }","parent":null,"children":[{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"decl_id":null,"docs":" A low-level buffer of tokens which represents a completely lexed file.","sig":null,"attributes":[{"value":"/ A low-level buffer of tokens which represents a completely lexed file.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179242,"byte_end":179316,"line_start":273,"line_end":273,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179317,"byte_end":179320,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ A `ParseBuffer` will immediately lex an entire file and then store all","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179321,"byte_end":179395,"line_start":275,"line_end":275,"column_start":1,"column_end":75}},{"value":"/ tokens internally. A `ParseBuffer` only used to pass to the top-level","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179396,"byte_end":179469,"line_start":276,"line_end":276,"column_start":1,"column_end":74}},{"value":"/ [`parse`] function.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":179470,"byte_end":179493,"line_start":277,"line_end":277,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":8147},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180566,"byte_end":180572,"line_start":308,"line_end":308,"column_start":12,"column_end":18},"name":"Parser","qualname":"::parser::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":8149}],"decl_id":null,"docs":" An in-progress parser for the tokens of a WebAssembly text file.","sig":null,"attributes":[{"value":"/ An in-progress parser for the tokens of a WebAssembly text file.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180129,"byte_end":180197,"line_start":299,"line_end":299,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180198,"byte_end":180201,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ A `Parser` is argument to the [`Parse`] trait and is now the input stream is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180202,"byte_end":180282,"line_start":301,"line_end":301,"column_start":1,"column_end":81}},{"value":"/ interacted with to parse new items. Cloning [`Parser`] or copying a parser","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180283,"byte_end":180361,"line_start":302,"line_end":302,"column_start":1,"column_end":79}},{"value":"/ refers to the same stream of tokens to parse, you cannot clone a [`Parser`]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180362,"byte_end":180441,"line_start":303,"line_end":303,"column_start":1,"column_end":80}},{"value":"/ and clone two items.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180442,"byte_end":180466,"line_start":304,"line_end":304,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180467,"byte_end":180470,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ For more information about a [`Parser`] see its methods.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180471,"byte_end":180531,"line_start":306,"line_end":306,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":565},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180783,"byte_end":180793,"line_start":316,"line_end":316,"column_start":12,"column_end":22},"name":"Lookahead1","qualname":"::parser::Lookahead1","value":"Lookahead1 {  }","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568}],"decl_id":null,"docs":" A helpful structure to perform a lookahead of one token to determine what to\n parse.","sig":null,"attributes":[{"value":"/ A helpful structure to perform a lookahead of one token to determine what to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180612,"byte_end":180692,"line_start":312,"line_end":312,"column_start":1,"column_end":81}},{"value":"/ parse.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180693,"byte_end":180703,"line_start":313,"line_end":313,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180704,"byte_end":180707,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ For more information see the [`Parser::lookahead1`] method.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180708,"byte_end":180771,"line_start":315,"line_end":315,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":8155},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181176,"byte_end":181182,"line_start":327,"line_end":327,"column_start":12,"column_end":18},"name":"Cursor","qualname":"::parser::Cursor","value":"Cursor {  }","parent":null,"children":[{"krate":0,"index":8157},{"krate":0,"index":8158}],"decl_id":null,"docs":" An immutable cursor into a list of tokens.","sig":null,"attributes":[{"value":"/ An immutable cursor into a list of tokens.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180860,"byte_end":180906,"line_start":321,"line_end":321,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180907,"byte_end":180910,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ This cursor cannot be mutated but can be used to parse more tokens in a list","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180911,"byte_end":180991,"line_start":323,"line_end":323,"column_start":1,"column_end":81}},{"value":"/ of tokens. Cursors are created from the [`Parser::step`] method. This is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":180992,"byte_end":181070,"line_start":324,"line_end":324,"column_start":1,"column_end":79}},{"value":"/ very low-level parsing structure and you likely won't use it much.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181071,"byte_end":181141,"line_start":325,"line_end":325,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181427,"byte_end":181430,"line_start":338,"line_end":338,"column_start":12,"column_end":15},"name":"new","qualname":"<ParseBuffer>::new","value":"pub fn new(&str) -> Result<ParseBuffer>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`ParseBuffer`] by lexing the given `input` completely.","sig":null,"attributes":[{"value":"/ Creates a new [`ParseBuffer`] by lexing the given `input` completely.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181259,"byte_end":181332,"line_start":333,"line_end":333,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181337,"byte_end":181340,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181345,"byte_end":181357,"line_start":335,"line_end":335,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181362,"byte_end":181365,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `input` fails to lex.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181370,"byte_end":181415,"line_start":337,"line_end":337,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184859,"byte_end":184867,"line_start":425,"line_end":425,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Parser>::is_empty","value":"pub fn is_empty(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether there are no more `Token` tokens to parse from this\n [`Parser`].","sig":null,"attributes":[{"value":"/ Returns whether there are no more `Token` tokens to parse from this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184405,"byte_end":184476,"line_start":416,"line_end":416,"column_start":5,"column_end":76}},{"value":"/ [`Parser`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184481,"byte_end":184496,"line_start":417,"line_end":417,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184501,"byte_end":184504,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ This indicates that either we've reached the end of the input, or we're","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184509,"byte_end":184584,"line_start":419,"line_end":419,"column_start":5,"column_end":80}},{"value":"/ a sub-[`Parser`] inside of a parenthesized expression and we've hit the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184589,"byte_end":184664,"line_start":420,"line_end":420,"column_start":5,"column_end":80}},{"value":"/ `)` token.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184669,"byte_end":184683,"line_start":421,"line_end":421,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184688,"byte_end":184691,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ Note that if `false` is returned there *may* be more comments. Comments","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184696,"byte_end":184771,"line_start":423,"line_end":423,"column_start":5,"column_end":80}},{"value":"/ and whitespace are not considered for whether this parser is empty.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184776,"byte_end":184847,"line_start":424,"line_end":424,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187069,"byte_end":187074,"line_start":489,"line_end":489,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser>::parse","value":"pub fn parse<T: Parse>(Self) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Parses a `T` from this [`Parser`].","sig":null,"attributes":[{"value":"/ Parses a `T` from this [`Parser`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185359,"byte_end":185397,"line_start":441,"line_end":441,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185402,"byte_end":185405,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ This method has a trivial definition (it simply calls","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185410,"byte_end":185467,"line_start":443,"line_end":443,"column_start":5,"column_end":62}},{"value":"/ [`T::parse`](Parse::parse)) but is here for syntactic purposes. This is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185472,"byte_end":185547,"line_start":444,"line_end":444,"column_start":5,"column_end":80}},{"value":"/ what you'll call 99% of the time in a [`Parse`] implementation in order","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185552,"byte_end":185627,"line_start":445,"line_end":445,"column_start":5,"column_end":80}},{"value":"/ to parse sub-items.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185632,"byte_end":185655,"line_start":446,"line_end":446,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185660,"byte_end":185663,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ Typically you always want to use `?` with the result of this method, you","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185668,"byte_end":185744,"line_start":448,"line_end":448,"column_start":5,"column_end":81}},{"value":"/ should not handle errors and decide what else to parse. To handle","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185749,"byte_end":185818,"line_start":449,"line_end":449,"column_start":5,"column_end":74}},{"value":"/ branches in parsing, use [`Parser::peek`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185823,"byte_end":185869,"line_start":450,"line_end":450,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185874,"byte_end":185877,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185882,"byte_end":185896,"line_start":452,"line_end":452,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185901,"byte_end":185904,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ A good example of using `parse` is to see how the [`TableType`] type is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185909,"byte_end":185984,"line_start":454,"line_end":454,"column_start":5,"column_end":80}},{"value":"/ parsed in this crate. A [`TableType`] is defined in the official","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":185989,"byte_end":186057,"line_start":455,"line_end":455,"column_start":5,"column_end":73}},{"value":"/ specification as [`tabletype`][spec] and is defined as:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186062,"byte_end":186121,"line_start":456,"line_end":456,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186126,"byte_end":186129,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ [spec]: https://webassembly.github.io/spec/core/text/types.html#table-types","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186134,"byte_end":186213,"line_start":458,"line_end":458,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186218,"byte_end":186221,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186226,"byte_end":186237,"line_start":460,"line_end":460,"column_start":5,"column_end":16}},{"value":"/ tabletype ::= lim:limits et:reftype","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186242,"byte_end":186281,"line_start":461,"line_end":461,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186286,"byte_end":186293,"line_start":462,"line_end":462,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186298,"byte_end":186301,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ so to parse a [`TableType`] we recursively need to parse a [`Limits`]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186306,"byte_end":186379,"line_start":464,"line_end":464,"column_start":5,"column_end":78}},{"value":"/ and a [`RefType`]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186384,"byte_end":186405,"line_start":465,"line_end":465,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186410,"byte_end":186413,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186418,"byte_end":186425,"line_start":467,"line_end":467,"column_start":5,"column_end":12}},{"value":"/ # use wast::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186430,"byte_end":186448,"line_start":468,"line_end":468,"column_start":5,"column_end":23}},{"value":"/ # use wast::parser::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186453,"byte_end":186479,"line_start":469,"line_end":469,"column_start":5,"column_end":31}},{"value":"/ struct TableType<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186484,"byte_end":186510,"line_start":470,"line_end":470,"column_start":5,"column_end":31}},{"value":"/     limits: Limits,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186515,"byte_end":186538,"line_start":471,"line_end":471,"column_start":5,"column_end":28}},{"value":"/     elem: RefType<'a>,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186543,"byte_end":186569,"line_start":472,"line_end":472,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186574,"byte_end":186579,"line_start":473,"line_end":473,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186584,"byte_end":186587,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ impl<'a> Parse<'a> for TableType<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186592,"byte_end":186634,"line_start":475,"line_end":475,"column_start":5,"column_end":47}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186639,"byte_end":186693,"line_start":476,"line_end":476,"column_start":5,"column_end":59}},{"value":"/         // parse the `lim` then `et` in sequence","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186698,"byte_end":186750,"line_start":477,"line_end":477,"column_start":5,"column_end":57}},{"value":"/         Ok(TableType {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186755,"byte_end":186781,"line_start":478,"line_end":478,"column_start":5,"column_end":31}},{"value":"/             limits: parser.parse()?,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186786,"byte_end":186826,"line_start":479,"line_end":479,"column_start":5,"column_end":45}},{"value":"/             elem: parser.parse()?,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186831,"byte_end":186869,"line_start":480,"line_end":480,"column_start":5,"column_end":43}},{"value":"/         })","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186874,"byte_end":186888,"line_start":481,"line_end":481,"column_start":5,"column_end":19}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186893,"byte_end":186902,"line_start":482,"line_end":482,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186907,"byte_end":186912,"line_start":483,"line_end":483,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186917,"byte_end":186924,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186929,"byte_end":186932,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ [`Limits`]: crate::ast::Limits","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186937,"byte_end":186971,"line_start":486,"line_end":486,"column_start":5,"column_end":39}},{"value":"/ [`TableType`]: crate::ast::TableType","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":186976,"byte_end":187016,"line_start":487,"line_end":487,"column_start":5,"column_end":45}},{"value":"/ [`RefType`]: crate::ast::RefType","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187021,"byte_end":187057,"line_start":488,"line_end":488,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189012,"byte_end":189016,"line_start":546,"line_end":546,"column_start":12,"column_end":16},"name":"peek","qualname":"<Parser>::peek","value":"pub fn peek<T: Peek>(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Performs a cheap test to see whether the current token in this stream is\n `T`.","sig":null,"attributes":[{"value":"/ Performs a cheap test to see whether the current token in this stream is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187144,"byte_end":187220,"line_start":493,"line_end":493,"column_start":5,"column_end":81}},{"value":"/ `T`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187225,"byte_end":187233,"line_start":494,"line_end":494,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187238,"byte_end":187241,"line_start":495,"line_end":495,"column_start":5,"column_end":8}},{"value":"/ This method can be used to efficiently determine what next to parse. The","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187246,"byte_end":187322,"line_start":496,"line_end":496,"column_start":5,"column_end":81}},{"value":"/ [`Peek`] trait is defined for types which can be used to test if they're","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187327,"byte_end":187403,"line_start":497,"line_end":497,"column_start":5,"column_end":81}},{"value":"/ the next item in the input stream.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187408,"byte_end":187446,"line_start":498,"line_end":498,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187451,"byte_end":187454,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ Nothing is actually parsed in this method, nor does this mutate the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187459,"byte_end":187530,"line_start":500,"line_end":500,"column_start":5,"column_end":76}},{"value":"/ state of this [`Parser`]. Instead, this simply performs a check.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187535,"byte_end":187603,"line_start":501,"line_end":501,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187608,"byte_end":187611,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ This method is frequently combined with the [`Parser::lookahead1`]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187616,"byte_end":187686,"line_start":503,"line_end":503,"column_start":5,"column_end":75}},{"value":"/ method to automatically produce nice error messages if some tokens","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187691,"byte_end":187761,"line_start":504,"line_end":504,"column_start":5,"column_end":75}},{"value":"/ aren't found.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187766,"byte_end":187783,"line_start":505,"line_end":505,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187788,"byte_end":187791,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187796,"byte_end":187810,"line_start":507,"line_end":507,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187815,"byte_end":187818,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ For an example of using the `peek` method let's take a look at parsing","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187823,"byte_end":187897,"line_start":509,"line_end":509,"column_start":5,"column_end":79}},{"value":"/ the [`Limits`] type. This is [defined in the official spec][spec] as:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187902,"byte_end":187975,"line_start":510,"line_end":510,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187980,"byte_end":187983,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":187988,"byte_end":187999,"line_start":512,"line_end":512,"column_start":5,"column_end":16}},{"value":"/ limits ::= n:u32","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188004,"byte_end":188024,"line_start":513,"line_end":513,"column_start":5,"column_end":25}},{"value":"/          | n:u32 m:u32","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188029,"byte_end":188055,"line_start":514,"line_end":514,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188060,"byte_end":188067,"line_start":515,"line_end":515,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188072,"byte_end":188075,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ which means that it's either one `u32` token or two, so we need to know","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188080,"byte_end":188155,"line_start":517,"line_end":517,"column_start":5,"column_end":80}},{"value":"/ whether to consume two tokens or one:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188160,"byte_end":188201,"line_start":518,"line_end":518,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188206,"byte_end":188209,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188214,"byte_end":188221,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/ # use wast::parser::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188226,"byte_end":188252,"line_start":521,"line_end":521,"column_start":5,"column_end":31}},{"value":"/ struct Limits {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188257,"byte_end":188276,"line_start":522,"line_end":522,"column_start":5,"column_end":24}},{"value":"/     min: u32,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188281,"byte_end":188298,"line_start":523,"line_end":523,"column_start":5,"column_end":22}},{"value":"/     max: Option<u32>,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188303,"byte_end":188328,"line_start":524,"line_end":524,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188333,"byte_end":188338,"line_start":525,"line_end":525,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188343,"byte_end":188346,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ impl<'a> Parse<'a> for Limits {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188351,"byte_end":188386,"line_start":527,"line_end":527,"column_start":5,"column_end":40}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188391,"byte_end":188445,"line_start":528,"line_end":528,"column_start":5,"column_end":59}},{"value":"/         // Always parse the first number...","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188450,"byte_end":188497,"line_start":529,"line_end":529,"column_start":5,"column_end":52}},{"value":"/         let min = parser.parse()?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188502,"byte_end":188540,"line_start":530,"line_end":530,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188545,"byte_end":188548,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/         // ... and then test if there's a second number before parsing","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188553,"byte_end":188627,"line_start":532,"line_end":532,"column_start":5,"column_end":79}},{"value":"/         let max = if parser.peek::<u32>() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188632,"byte_end":188679,"line_start":533,"line_end":533,"column_start":5,"column_end":52}},{"value":"/             Some(parser.parse()?)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188684,"byte_end":188721,"line_start":534,"line_end":534,"column_start":5,"column_end":42}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188726,"byte_end":188746,"line_start":535,"line_end":535,"column_start":5,"column_end":25}},{"value":"/             None","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188751,"byte_end":188771,"line_start":536,"line_end":536,"column_start":5,"column_end":25}},{"value":"/         };","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188776,"byte_end":188790,"line_start":537,"line_end":537,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188795,"byte_end":188798,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/         Ok(Limits { min, max })","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188803,"byte_end":188838,"line_start":539,"line_end":539,"column_start":5,"column_end":40}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188843,"byte_end":188852,"line_start":540,"line_end":540,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188857,"byte_end":188862,"line_start":541,"line_end":541,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188867,"byte_end":188874,"line_start":542,"line_end":542,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188879,"byte_end":188882,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ [spec]: https://webassembly.github.io/spec/core/text/types.html#limits","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188887,"byte_end":188961,"line_start":544,"line_end":544,"column_start":5,"column_end":79}},{"value":"/ [`Limits`]: crate::ast::Limits","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":188966,"byte_end":189000,"line_start":545,"line_end":545,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189197,"byte_end":189202,"line_start":552,"line_end":552,"column_start":12,"column_end":17},"name":"peek2","qualname":"<Parser>::peek2","value":"pub fn peek2<T: Peek>(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Same as the [`Parser::peek`] method, except checks the next token, not\n the current token.\n","sig":null,"attributes":[{"value":"/ Same as the [`Parser::peek`] method, except checks the next token, not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189084,"byte_end":189158,"line_start":550,"line_end":550,"column_start":5,"column_end":79}},{"value":"/ the current token.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189163,"byte_end":189185,"line_start":551,"line_end":551,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191194,"byte_end":191204,"line_start":610,"line_end":610,"column_start":12,"column_end":22},"name":"lookahead1","qualname":"<Parser>::lookahead1","value":"pub fn lookahead1(Self) -> Lookahead1","parent":null,"children":[],"decl_id":null,"docs":" A helper structure to perform a sequence of `peek` operations and if\n they all fail produce a nice error message.","sig":null,"attributes":[{"value":"/ A helper structure to perform a sequence of `peek` operations and if","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189398,"byte_end":189470,"line_start":561,"line_end":561,"column_start":5,"column_end":77}},{"value":"/ they all fail produce a nice error message.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189475,"byte_end":189522,"line_start":562,"line_end":562,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189527,"byte_end":189530,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ This method purely exists for conveniently producing error messages and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189535,"byte_end":189610,"line_start":564,"line_end":564,"column_start":5,"column_end":80}},{"value":"/ provides no functionality that [`Parser::peek`] doesn't already give.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189615,"byte_end":189688,"line_start":565,"line_end":565,"column_start":5,"column_end":78}},{"value":"/ The [`Lookahead1`] structure has one main method [`Lookahead1::peek`],","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189693,"byte_end":189767,"line_start":566,"line_end":566,"column_start":5,"column_end":79}},{"value":"/ which is the same method as [`Parser::peek`]. The difference is that the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189772,"byte_end":189848,"line_start":567,"line_end":567,"column_start":5,"column_end":81}},{"value":"/ [`Lookahead1::error`] method needs no arguments.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189853,"byte_end":189905,"line_start":568,"line_end":568,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189910,"byte_end":189913,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189918,"byte_end":189932,"line_start":570,"line_end":570,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189937,"byte_end":189940,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ Let's look at the parsing of [`Index`]. This type is either a `u32` or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":189945,"byte_end":190019,"line_start":572,"line_end":572,"column_start":5,"column_end":79}},{"value":"/ an [`Id`] and is used in name resolution primarily. The [official","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190024,"byte_end":190093,"line_start":573,"line_end":573,"column_start":5,"column_end":74}},{"value":"/ grammar for an index][spec] is:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190098,"byte_end":190133,"line_start":574,"line_end":574,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190138,"byte_end":190141,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190146,"byte_end":190157,"line_start":576,"line_end":576,"column_start":5,"column_end":16}},{"value":"/ idx ::= x:u32","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190162,"byte_end":190179,"line_start":577,"line_end":577,"column_start":5,"column_end":22}},{"value":"/       | v:id","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190184,"byte_end":190200,"line_start":578,"line_end":578,"column_start":5,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190205,"byte_end":190212,"line_start":579,"line_end":579,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190217,"byte_end":190220,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ Which is to say that an index is either a `u32` or an [`Id`]. When","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190225,"byte_end":190295,"line_start":581,"line_end":581,"column_start":5,"column_end":75}},{"value":"/ parsing an [`Index`] we can do:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190300,"byte_end":190335,"line_start":582,"line_end":582,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190340,"byte_end":190343,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190348,"byte_end":190355,"line_start":584,"line_end":584,"column_start":5,"column_end":12}},{"value":"/ # use wast::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190360,"byte_end":190378,"line_start":585,"line_end":585,"column_start":5,"column_end":23}},{"value":"/ # use wast::parser::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190383,"byte_end":190409,"line_start":586,"line_end":586,"column_start":5,"column_end":31}},{"value":"/ enum Index<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190414,"byte_end":190434,"line_start":587,"line_end":587,"column_start":5,"column_end":25}},{"value":"/     Num(u32),","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190439,"byte_end":190456,"line_start":588,"line_end":588,"column_start":5,"column_end":22}},{"value":"/     Id(Id<'a>),","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190461,"byte_end":190480,"line_start":589,"line_end":589,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190485,"byte_end":190490,"line_start":590,"line_end":590,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190495,"byte_end":190498,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ impl<'a> Parse<'a> for Index<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190503,"byte_end":190541,"line_start":592,"line_end":592,"column_start":5,"column_end":43}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190546,"byte_end":190600,"line_start":593,"line_end":593,"column_start":5,"column_end":59}},{"value":"/         let mut l = parser.lookahead1();","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190605,"byte_end":190649,"line_start":594,"line_end":594,"column_start":5,"column_end":49}},{"value":"/         if l.peek::<Id>() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190654,"byte_end":190685,"line_start":595,"line_end":595,"column_start":5,"column_end":36}},{"value":"/             Ok(Index::Id(parser.parse()?))","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190690,"byte_end":190736,"line_start":596,"line_end":596,"column_start":5,"column_end":51}},{"value":"/         } else if l.peek::<u32>() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190741,"byte_end":190780,"line_start":597,"line_end":597,"column_start":5,"column_end":44}},{"value":"/             Ok(Index::Num(parser.parse()?))","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190785,"byte_end":190832,"line_start":598,"line_end":598,"column_start":5,"column_end":52}},{"value":"/         } else {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190837,"byte_end":190857,"line_start":599,"line_end":599,"column_start":5,"column_end":25}},{"value":"/             // produces error message of `expected identifier or u32`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190862,"byte_end":190935,"line_start":600,"line_end":600,"column_start":5,"column_end":78}},{"value":"/             Err(l.error())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190940,"byte_end":190970,"line_start":601,"line_end":601,"column_start":5,"column_end":35}},{"value":"/         }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190975,"byte_end":190988,"line_start":602,"line_end":602,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":190993,"byte_end":191002,"line_start":603,"line_end":603,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191007,"byte_end":191012,"line_start":604,"line_end":604,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191017,"byte_end":191024,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191029,"byte_end":191032,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ [spec]: https://webassembly.github.io/spec/core/text/modules.html#indices","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191037,"byte_end":191114,"line_start":607,"line_end":607,"column_start":5,"column_end":82}},{"value":"/ [`Index`]: crate::ast::Index","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191119,"byte_end":191151,"line_start":608,"line_end":608,"column_start":5,"column_end":37}},{"value":"/ [`Id`]: crate::ast::Id","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191156,"byte_end":191182,"line_start":609,"line_end":609,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":193163,"byte_end":193169,"line_start":660,"line_end":660,"column_start":12,"column_end":18},"name":"parens","qualname":"<Parser>::parens","value":"pub fn parens<T, impl FnOnce(Parser<'a>) -> Result<T>: FnOnce(Parser) ->\n              Result<T>>(Self, impl FnOnce(Parser<'a>) -> Result<T>)\n-> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Parse an item surrounded by parentheses.","sig":null,"attributes":[{"value":"/ Parse an item surrounded by parentheses.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191333,"byte_end":191377,"line_start":617,"line_end":617,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191382,"byte_end":191385,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ WebAssembly's text format is all based on s-expressions, so naturally","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191390,"byte_end":191463,"line_start":619,"line_end":619,"column_start":5,"column_end":78}},{"value":"/ you're going to want to parse a lot of parenthesized things! As noted in","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191468,"byte_end":191544,"line_start":620,"line_end":620,"column_start":5,"column_end":81}},{"value":"/ the documentation of [`Parse`] you typically don't parse your own","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191549,"byte_end":191618,"line_start":621,"line_end":621,"column_start":5,"column_end":74}},{"value":"/ surrounding `(` and `)` tokens, but the parser above you parsed them for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191623,"byte_end":191699,"line_start":622,"line_end":622,"column_start":5,"column_end":81}},{"value":"/ you. This is method method the parser above you uses.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191704,"byte_end":191761,"line_start":623,"line_end":623,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191766,"byte_end":191769,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ This method will parse a `(` token, and then call `f` on a sub-parser","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191774,"byte_end":191847,"line_start":625,"line_end":625,"column_start":5,"column_end":78}},{"value":"/ which when finished asserts that a `)` token is the next token. This","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191852,"byte_end":191924,"line_start":626,"line_end":626,"column_start":5,"column_end":77}},{"value":"/ requires that `f` consumes all tokens leading up to the paired `)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":191929,"byte_end":192000,"line_start":627,"line_end":627,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192005,"byte_end":192008,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Usage will often simply be `parser.parens(|p| p.parse())?` to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192013,"byte_end":192078,"line_start":629,"line_end":629,"column_start":5,"column_end":70}},{"value":"/ automatically parse a type within parentheses, but you can, as always,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192083,"byte_end":192157,"line_start":630,"line_end":630,"column_start":5,"column_end":79}},{"value":"/ go crazy and do whatever you'd like too.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192162,"byte_end":192206,"line_start":631,"line_end":631,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192211,"byte_end":192214,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192219,"byte_end":192233,"line_start":633,"line_end":633,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192238,"byte_end":192241,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ A good example of this is to see how a `Module` is parsed. This isn't","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192246,"byte_end":192319,"line_start":635,"line_end":635,"column_start":5,"column_end":78}},{"value":"/ the exact definition, but it's close enough!","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192324,"byte_end":192372,"line_start":636,"line_end":636,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192377,"byte_end":192380,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192385,"byte_end":192392,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"/ # use wast::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192397,"byte_end":192415,"line_start":639,"line_end":639,"column_start":5,"column_end":23}},{"value":"/ # use wast::parser::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192420,"byte_end":192446,"line_start":640,"line_end":640,"column_start":5,"column_end":31}},{"value":"/ struct Module<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192451,"byte_end":192474,"line_start":641,"line_end":641,"column_start":5,"column_end":28}},{"value":"/     fields: Vec<ModuleField<'a>>,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192479,"byte_end":192516,"line_start":642,"line_end":642,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192521,"byte_end":192526,"line_start":643,"line_end":643,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192531,"byte_end":192534,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ impl<'a> Parse<'a> for Module<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192539,"byte_end":192578,"line_start":645,"line_end":645,"column_start":5,"column_end":44}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192583,"byte_end":192637,"line_start":646,"line_end":646,"column_start":5,"column_end":59}},{"value":"/         // Modules start out with a `module` keyword","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192642,"byte_end":192698,"line_start":647,"line_end":647,"column_start":5,"column_end":61}},{"value":"/         parser.parse::<kw::module>()?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192703,"byte_end":192745,"line_start":648,"line_end":648,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192750,"byte_end":192753,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/         // And then everything else is `(field ...)`, so while we've got","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192758,"byte_end":192834,"line_start":650,"line_end":650,"column_start":5,"column_end":81}},{"value":"/         // items left we continuously parse parenthesized items.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192839,"byte_end":192907,"line_start":651,"line_end":651,"column_start":5,"column_end":73}},{"value":"/         let mut fields = Vec::new();","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192912,"byte_end":192952,"line_start":652,"line_end":652,"column_start":5,"column_end":45}},{"value":"/         while !parser.is_empty() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":192957,"byte_end":192995,"line_start":653,"line_end":653,"column_start":5,"column_end":43}},{"value":"/             fields.push(parser.parens(|p| p.parse())?);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":193000,"byte_end":193059,"line_start":654,"line_end":654,"column_start":5,"column_end":64}},{"value":"/         }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":193064,"byte_end":193077,"line_start":655,"line_end":655,"column_start":5,"column_end":18}},{"value":"/         Ok(Module { fields })","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":193082,"byte_end":193115,"line_start":656,"line_end":656,"column_start":5,"column_end":38}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":193120,"byte_end":193129,"line_start":657,"line_end":657,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":193134,"byte_end":193139,"line_start":658,"line_end":658,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":193144,"byte_end":193151,"line_start":659,"line_end":659,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194212,"byte_end":194224,"line_start":687,"line_end":687,"column_start":12,"column_end":24},"name":"parens_depth","qualname":"<Parser>::parens_depth","value":"pub fn parens_depth(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the depth of nested parens we've parsed so far.","sig":null,"attributes":[{"value":"/ Return the depth of nested parens we've parsed so far.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194018,"byte_end":194076,"line_start":683,"line_end":683,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194081,"byte_end":194084,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ This is a low-level method that is only useful for implementing","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194089,"byte_end":194156,"line_start":685,"line_end":685,"column_start":5,"column_end":72}},{"value":"/ recursion limits in custom parsers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194161,"byte_end":194200,"line_start":686,"line_end":686,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194737,"byte_end":194741,"line_start":704,"line_end":704,"column_start":12,"column_end":16},"name":"step","qualname":"<Parser>::step","value":"pub fn step<F, T>(Self, F) -> Result<T> where F: FnOnce(Cursor) ->\nResult<(T, Cursor)>","parent":null,"children":[],"decl_id":null,"docs":" A low-level parsing method you probably won't use.","sig":null,"attributes":[{"value":"/ A low-level parsing method you probably won't use.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194416,"byte_end":194470,"line_start":698,"line_end":698,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194475,"byte_end":194478,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ This is used to implement parsing of the most primitive types in the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194483,"byte_end":194555,"line_start":700,"line_end":700,"column_start":5,"column_end":77}},{"value":"/ [`ast`](crate::ast) module. You probably don't want to use this, but","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194560,"byte_end":194632,"line_start":701,"line_end":701,"column_start":5,"column_end":77}},{"value":"/ probably want to use something like [`Parser::parse`] or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194637,"byte_end":194697,"line_start":702,"line_end":702,"column_start":5,"column_end":65}},{"value":"/ [`Parser::parens`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194702,"byte_end":194725,"line_start":703,"line_end":703,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195315,"byte_end":195320,"line_start":719,"line_end":719,"column_start":12,"column_end":17},"name":"error","qualname":"<Parser>::error","value":"pub fn error<impl fmt::Display: fmt::Display>(Self, impl fmt::Display)\n-> Error","parent":null,"children":[],"decl_id":null,"docs":" Creates an error whose line/column information is pointing at the\n current token.","sig":null,"attributes":[{"value":"/ Creates an error whose line/column information is pointing at the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":194965,"byte_end":195034,"line_start":713,"line_end":713,"column_start":5,"column_end":74}},{"value":"/ current token.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195039,"byte_end":195057,"line_start":714,"line_end":714,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195062,"byte_end":195065,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ This is used to produce human-readable error messages which point to the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195070,"byte_end":195146,"line_start":716,"line_end":716,"column_start":5,"column_end":81}},{"value":"/ right location in the input stream, and the `msg` here is arbitrary text","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195151,"byte_end":195227,"line_start":717,"line_end":717,"column_start":5,"column_end":81}},{"value":"/ used to associate with the error and indicate why it was generated.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195232,"byte_end":195303,"line_start":718,"line_end":718,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195616,"byte_end":195624,"line_start":728,"line_end":728,"column_start":12,"column_end":20},"name":"cur_span","qualname":"<Parser>::cur_span","value":"pub fn cur_span(&Self) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Returns the span of the current token\n","sig":null,"attributes":[{"value":"/ Returns the span of the current token","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195563,"byte_end":195604,"line_start":727,"line_end":727,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195740,"byte_end":195749,"line_start":733,"line_end":733,"column_start":12,"column_end":21},"name":"prev_span","qualname":"<Parser>::prev_span","value":"pub fn prev_span(&Self) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Returns the span of the previous token\n","sig":null,"attributes":[{"value":"/ Returns the span of the previous token","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195686,"byte_end":195728,"line_start":732,"line_end":732,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201476,"byte_end":201495,"line_start":865,"line_end":865,"column_start":12,"column_end":31},"name":"register_annotation","qualname":"<Parser>::register_annotation","value":"pub fn register_annotation<'b>(Self, &'b str) -> /*impl Trait*/ where 'a:'b","parent":null,"children":[],"decl_id":null,"docs":" Registers a new known annotation with this parser to allow parsing\n annotations with this name.","sig":null,"attributes":[{"value":"/ Registers a new known annotation with this parser to allow parsing","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195844,"byte_end":195914,"line_start":737,"line_end":737,"column_start":5,"column_end":75}},{"value":"/ annotations with this name.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195919,"byte_end":195950,"line_start":738,"line_end":738,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195955,"byte_end":195958,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ [WebAssembly annotations][annotation] are a proposal for the text format","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":195963,"byte_end":196039,"line_start":740,"line_end":740,"column_start":5,"column_end":81}},{"value":"/ which allows decorating the text format with custom structured","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196044,"byte_end":196110,"line_start":741,"line_end":741,"column_start":5,"column_end":71}},{"value":"/ information. By default all annotations are ignored when parsing, but","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196115,"byte_end":196188,"line_start":742,"line_end":742,"column_start":5,"column_end":78}},{"value":"/ the whole purpose of them is to sometimes parse them!","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196193,"byte_end":196250,"line_start":743,"line_end":743,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196255,"byte_end":196258,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ To support parsing text annotations this method is used to allow","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196263,"byte_end":196331,"line_start":745,"line_end":745,"column_start":5,"column_end":73}},{"value":"/ annotations and their tokens to *not* be skipped. Once an annotation is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196336,"byte_end":196411,"line_start":746,"line_end":746,"column_start":5,"column_end":80}},{"value":"/ registered with this method, then while the return value has not been","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196416,"byte_end":196489,"line_start":747,"line_end":747,"column_start":5,"column_end":78}},{"value":"/ dropped (e.g. the scope of where this function is called) annotations","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196494,"byte_end":196567,"line_start":748,"line_end":748,"column_start":5,"column_end":78}},{"value":"/ with the name `annotation` will be parse of the token stream and not","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196572,"byte_end":196644,"line_start":749,"line_end":749,"column_start":5,"column_end":77}},{"value":"/ implicitly skipped.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196649,"byte_end":196672,"line_start":750,"line_end":750,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196677,"byte_end":196680,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ # Skipping annotations","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196685,"byte_end":196711,"line_start":752,"line_end":752,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196716,"byte_end":196719,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ The behavior of skipping unknown/unregistered annotations can be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196724,"byte_end":196792,"line_start":754,"line_end":754,"column_start":5,"column_end":73}},{"value":"/ somewhat subtle and surprising, so if you're interested in parsing","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196797,"byte_end":196867,"line_start":755,"line_end":755,"column_start":5,"column_end":75}},{"value":"/ annotations it's important to point out the importance of this method","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196872,"byte_end":196945,"line_start":756,"line_end":756,"column_start":5,"column_end":78}},{"value":"/ and where to call it.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196950,"byte_end":196975,"line_start":757,"line_end":757,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196980,"byte_end":196983,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ Generally when parsing tokens you'll be bottoming out in various","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":196988,"byte_end":197056,"line_start":759,"line_end":759,"column_start":5,"column_end":73}},{"value":"/ `Cursor` methods. These are all documented as advancing the stream as","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197061,"byte_end":197134,"line_start":760,"line_end":760,"column_start":5,"column_end":78}},{"value":"/ much as possible to the next token, skipping \"irrelevant stuff\" like","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197139,"byte_end":197211,"line_start":761,"line_end":761,"column_start":5,"column_end":77}},{"value":"/ comments, whitespace, etc. The `Cursor` methods will also skip unknown","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197216,"byte_end":197290,"line_start":762,"line_end":762,"column_start":5,"column_end":79}},{"value":"/ annotations. This means that if you parse *any* token, it will skip over","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197295,"byte_end":197371,"line_start":763,"line_end":763,"column_start":5,"column_end":81}},{"value":"/ any number of annotations that are unknown at all times.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197376,"byte_end":197436,"line_start":764,"line_end":764,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197441,"byte_end":197444,"line_start":765,"line_end":765,"column_start":5,"column_end":8}},{"value":"/ To parse an annotation you must, before parsing any token of the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197449,"byte_end":197517,"line_start":766,"line_end":766,"column_start":5,"column_end":73}},{"value":"/ annotation, register the annotation via this method. This includes the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197522,"byte_end":197596,"line_start":767,"line_end":767,"column_start":5,"column_end":79}},{"value":"/ beginning `(` token, which is otherwise skipped if the annotation isn't","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197601,"byte_end":197676,"line_start":768,"line_end":768,"column_start":5,"column_end":80}},{"value":"/ marked as registered. Typically parser parse the *contents* of an","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197681,"byte_end":197750,"line_start":769,"line_end":769,"column_start":5,"column_end":74}},{"value":"/ s-expression, so this means that the outer parser of an s-expression","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197755,"byte_end":197827,"line_start":770,"line_end":770,"column_start":5,"column_end":77}},{"value":"/ must register the custom annotation name, rather than the inner parser.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197832,"byte_end":197907,"line_start":771,"line_end":771,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197912,"byte_end":197915,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ # Return","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197920,"byte_end":197932,"line_start":773,"line_end":773,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197937,"byte_end":197940,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ This function returns an RAII guard which, when dropped, will unregister","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":197945,"byte_end":198021,"line_start":775,"line_end":775,"column_start":5,"column_end":81}},{"value":"/ the `annotation` given. Parsing `annotation` is only supported while the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198026,"byte_end":198102,"line_start":776,"line_end":776,"column_start":5,"column_end":81}},{"value":"/ returned value is still alive, and once dropped the parser will go back","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198107,"byte_end":198182,"line_start":777,"line_end":777,"column_start":5,"column_end":80}},{"value":"/ to skipping annotations with the name `annotation`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198187,"byte_end":198242,"line_start":778,"line_end":778,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198247,"byte_end":198250,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198255,"byte_end":198268,"line_start":780,"line_end":780,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198273,"byte_end":198276,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ Let's see an example of how the `@name` annotation is parsed for modules","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198281,"byte_end":198357,"line_start":782,"line_end":782,"column_start":5,"column_end":81}},{"value":"/ to get an idea of how this works:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198362,"byte_end":198399,"line_start":783,"line_end":783,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198404,"byte_end":198407,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198412,"byte_end":198419,"line_start":785,"line_end":785,"column_start":5,"column_end":12}},{"value":"/ # use wast::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198424,"byte_end":198442,"line_start":786,"line_end":786,"column_start":5,"column_end":23}},{"value":"/ # use wast::parser::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198447,"byte_end":198473,"line_start":787,"line_end":787,"column_start":5,"column_end":31}},{"value":"/ struct Module<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198478,"byte_end":198501,"line_start":788,"line_end":788,"column_start":5,"column_end":28}},{"value":"/     name: Option<NameAnnotation<'a>>,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198506,"byte_end":198547,"line_start":789,"line_end":789,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198552,"byte_end":198557,"line_start":790,"line_end":790,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198562,"byte_end":198565,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ impl<'a> Parse<'a> for Module<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198570,"byte_end":198609,"line_start":792,"line_end":792,"column_start":5,"column_end":44}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198614,"byte_end":198668,"line_start":793,"line_end":793,"column_start":5,"column_end":59}},{"value":"/         // Modules start out with a `module` keyword","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198673,"byte_end":198729,"line_start":794,"line_end":794,"column_start":5,"column_end":61}},{"value":"/         parser.parse::<kw::module>()?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198734,"byte_end":198776,"line_start":795,"line_end":795,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198781,"byte_end":198784,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/         // Next may be `(@name \"foo\")`. Typically this annotation would","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198789,"byte_end":198864,"line_start":797,"line_end":797,"column_start":5,"column_end":80}},{"value":"/         // skipped, but we don't want it skipped, so we register it.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198869,"byte_end":198941,"line_start":798,"line_end":798,"column_start":5,"column_end":77}},{"value":"/         // Note that the parse implementation of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":198946,"byte_end":198998,"line_start":799,"line_end":799,"column_start":5,"column_end":57}},{"value":"/         // `Option<NameAnnotation>` is the one that consumes the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199003,"byte_end":199071,"line_start":800,"line_end":800,"column_start":5,"column_end":73}},{"value":"/         // parentheses here.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199076,"byte_end":199108,"line_start":801,"line_end":801,"column_start":5,"column_end":37}},{"value":"/         let _r = parser.register_annotation(\"name\");","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199113,"byte_end":199169,"line_start":802,"line_end":802,"column_start":5,"column_end":61}},{"value":"/         let name = parser.parse()?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199174,"byte_end":199213,"line_start":803,"line_end":803,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199218,"byte_end":199221,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/         // ... and normally you'd otherwise parse module fields here ...","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199226,"byte_end":199302,"line_start":805,"line_end":805,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199307,"byte_end":199310,"line_start":806,"line_end":806,"column_start":5,"column_end":8}},{"value":"/         Ok(Module { name })","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199315,"byte_end":199346,"line_start":807,"line_end":807,"column_start":5,"column_end":36}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199351,"byte_end":199360,"line_start":808,"line_end":808,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199365,"byte_end":199370,"line_start":809,"line_end":809,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199375,"byte_end":199382,"line_start":810,"line_end":810,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199387,"byte_end":199390,"line_start":811,"line_end":811,"column_start":5,"column_end":8}},{"value":"/ Another example is how we parse the `@custom` annotation. Note that this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199395,"byte_end":199471,"line_start":812,"line_end":812,"column_start":5,"column_end":81}},{"value":"/ is parsed as part of `ModuleField`, so note how the annotation is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199476,"byte_end":199545,"line_start":813,"line_end":813,"column_start":5,"column_end":74}},{"value":"/ registered *before* we parse the parentheses of the annotation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199550,"byte_end":199617,"line_start":814,"line_end":814,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199622,"byte_end":199625,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199630,"byte_end":199637,"line_start":816,"line_end":816,"column_start":5,"column_end":12}},{"value":"/ # use wast::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199642,"byte_end":199660,"line_start":817,"line_end":817,"column_start":5,"column_end":23}},{"value":"/ # use wast::parser::*;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199665,"byte_end":199691,"line_start":818,"line_end":818,"column_start":5,"column_end":31}},{"value":"/ struct Module<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199696,"byte_end":199719,"line_start":819,"line_end":819,"column_start":5,"column_end":28}},{"value":"/     fields: Vec<ModuleField<'a>>,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199724,"byte_end":199761,"line_start":820,"line_end":820,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199766,"byte_end":199771,"line_start":821,"line_end":821,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199776,"byte_end":199779,"line_start":822,"line_end":822,"column_start":5,"column_end":8}},{"value":"/ impl<'a> Parse<'a> for Module<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199784,"byte_end":199823,"line_start":823,"line_end":823,"column_start":5,"column_end":44}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199828,"byte_end":199882,"line_start":824,"line_end":824,"column_start":5,"column_end":59}},{"value":"/         // Modules start out with a `module` keyword","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199887,"byte_end":199943,"line_start":825,"line_end":825,"column_start":5,"column_end":61}},{"value":"/         parser.parse::<kw::module>()?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199948,"byte_end":199990,"line_start":826,"line_end":826,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":199995,"byte_end":199998,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/         // register the `@custom` annotation *first* before we start","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200003,"byte_end":200075,"line_start":828,"line_end":828,"column_start":5,"column_end":77}},{"value":"/         // parsing fields, because each field is contained in","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200080,"byte_end":200145,"line_start":829,"line_end":829,"column_start":5,"column_end":70}},{"value":"/         // parentheses and to parse the parentheses of an annotation we","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200150,"byte_end":200225,"line_start":830,"line_end":830,"column_start":5,"column_end":80}},{"value":"/         // have to known to not skip it.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200230,"byte_end":200274,"line_start":831,"line_end":831,"column_start":5,"column_end":49}},{"value":"/         let _r = parser.register_annotation(\"custom\");","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200279,"byte_end":200337,"line_start":832,"line_end":832,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200342,"byte_end":200345,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/         let mut fields = Vec::new();","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200350,"byte_end":200390,"line_start":834,"line_end":834,"column_start":5,"column_end":45}},{"value":"/         while !parser.is_empty() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200395,"byte_end":200433,"line_start":835,"line_end":835,"column_start":5,"column_end":43}},{"value":"/             fields.push(parser.parens(|p| p.parse())?);","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200438,"byte_end":200497,"line_start":836,"line_end":836,"column_start":5,"column_end":64}},{"value":"/         }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200502,"byte_end":200515,"line_start":837,"line_end":837,"column_start":5,"column_end":18}},{"value":"/         Ok(Module { fields })","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200520,"byte_end":200553,"line_start":838,"line_end":838,"column_start":5,"column_end":38}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200558,"byte_end":200567,"line_start":839,"line_end":839,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200572,"byte_end":200577,"line_start":840,"line_end":840,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200582,"byte_end":200585,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ enum ModuleField<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200590,"byte_end":200616,"line_start":842,"line_end":842,"column_start":5,"column_end":31}},{"value":"/     Custom(Custom<'a>),","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200621,"byte_end":200648,"line_start":843,"line_end":843,"column_start":5,"column_end":32}},{"value":"/     // ...","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200653,"byte_end":200667,"line_start":844,"line_end":844,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200672,"byte_end":200677,"line_start":845,"line_end":845,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200682,"byte_end":200685,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ impl<'a> Parse<'a> for ModuleField<'a> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200690,"byte_end":200734,"line_start":847,"line_end":847,"column_start":5,"column_end":49}},{"value":"/     fn parse(parser: Parser<'a>) -> Result<Self> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200739,"byte_end":200793,"line_start":848,"line_end":848,"column_start":5,"column_end":59}},{"value":"/         // Note that because we have previously registered the `@custom`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200798,"byte_end":200874,"line_start":849,"line_end":849,"column_start":5,"column_end":81}},{"value":"/         // annotation with the parser we known that `peek` methods like","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200879,"byte_end":200954,"line_start":850,"line_end":850,"column_start":5,"column_end":80}},{"value":"/         // this, working on the annotation token, are enabled to ever","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":200959,"byte_end":201032,"line_start":851,"line_end":851,"column_start":5,"column_end":78}},{"value":"/         // return `true`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201037,"byte_end":201066,"line_start":852,"line_end":852,"column_start":5,"column_end":34}},{"value":"/         if parser.peek::<annotation::custom>() {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201071,"byte_end":201123,"line_start":853,"line_end":853,"column_start":5,"column_end":57}},{"value":"/             return Ok(ModuleField::Custom(parser.parse()?));","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201128,"byte_end":201192,"line_start":854,"line_end":854,"column_start":5,"column_end":69}},{"value":"/         }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201197,"byte_end":201210,"line_start":855,"line_end":855,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201215,"byte_end":201218,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/         // .. typically we'd parse other module fields here...","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201223,"byte_end":201289,"line_start":857,"line_end":857,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201294,"byte_end":201297,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/         Err(parser.error(\"unknown module field\"))","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201302,"byte_end":201355,"line_start":859,"line_end":859,"column_start":5,"column_end":58}},{"value":"/     }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201360,"byte_end":201369,"line_start":860,"line_end":860,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201374,"byte_end":201379,"line_start":861,"line_end":861,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201384,"byte_end":201391,"line_start":862,"line_end":862,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201396,"byte_end":201399,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ [annotation]: https://github.com/WebAssembly/annotations","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201404,"byte_end":201464,"line_start":864,"line_end":864,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":202361,"byte_end":202369,"line_start":893,"line_end":893,"column_start":12,"column_end":20},"name":"cur_span","qualname":"<Cursor>::cur_span","value":"pub fn cur_span(&Self) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Returns the span of the next `Token` token.","sig":null,"attributes":[{"value":"/ Returns the span of the next `Token` token.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":202235,"byte_end":202282,"line_start":890,"line_end":890,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":202287,"byte_end":202290,"line_start":891,"line_end":891,"column_start":5,"column_end":8}},{"value":"/ Does not take into account whitespace or comments.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":202295,"byte_end":202349,"line_start":892,"line_end":892,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203064,"byte_end":203069,"line_start":913,"line_end":913,"column_start":12,"column_end":17},"name":"error","qualname":"<Cursor>::error","value":"pub fn error<impl fmt::Display: fmt::Display>(&Self, impl fmt::Display)\n-> Error","parent":null,"children":[],"decl_id":null,"docs":" Same as [`Parser::error`], but works with the current token in this\n [`Cursor`] instead.\n","sig":null,"attributes":[{"value":"/ Same as [`Parser::error`], but works with the current token in this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":202953,"byte_end":203024,"line_start":911,"line_end":911,"column_start":5,"column_end":76}},{"value":"/ [`Cursor`] instead.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203029,"byte_end":203052,"line_start":912,"line_end":912,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203524,"byte_end":203530,"line_start":924,"line_end":924,"column_start":12,"column_end":18},"name":"lparen","qualname":"<Cursor>::lparen","value":"pub fn lparen(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a `(`.","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a `(`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203175,"byte_end":203241,"line_start":917,"line_end":917,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203246,"byte_end":203249,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ If the current token is `(`, returns a new [`Cursor`] pointing at the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203254,"byte_end":203327,"line_start":919,"line_end":919,"column_start":5,"column_end":78}},{"value":"/ rest of the tokens in the stream. Otherwise returns `None`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203332,"byte_end":203395,"line_start":920,"line_end":920,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203400,"byte_end":203403,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ This function will automatically skip over any comments, whitespace, or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203408,"byte_end":203483,"line_start":922,"line_end":922,"column_start":5,"column_end":80}},{"value":"/ unknown annotations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203488,"byte_end":203512,"line_start":923,"line_end":923,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204034,"byte_end":204040,"line_start":938,"line_end":938,"column_start":12,"column_end":18},"name":"rparen","qualname":"<Cursor>::rparen","value":"pub fn rparen(Self) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a `)`.","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a `)`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203685,"byte_end":203751,"line_start":931,"line_end":931,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203756,"byte_end":203759,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ If the current token is `)`, returns a new [`Cursor`] pointing at the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203764,"byte_end":203837,"line_start":933,"line_end":933,"column_start":5,"column_end":78}},{"value":"/ rest of the tokens in the stream. Otherwise returns `None`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203842,"byte_end":203905,"line_start":934,"line_end":934,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203910,"byte_end":203913,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ This function will automatically skip over any comments, whitespace, or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203918,"byte_end":203993,"line_start":936,"line_end":936,"column_start":5,"column_end":80}},{"value":"/ unknown annotations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":203998,"byte_end":204022,"line_start":937,"line_end":937,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":627},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204649,"byte_end":204651,"line_start":954,"line_end":954,"column_start":12,"column_end":14},"name":"id","qualname":"<Cursor>::id","value":"pub fn id(Self) -> Option<(&'a str, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a\n [`Token::Id`](crate::lexer::Token)","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204195,"byte_end":204256,"line_start":945,"line_end":945,"column_start":5,"column_end":66}},{"value":"/ [`Token::Id`](crate::lexer::Token)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204261,"byte_end":204299,"line_start":946,"line_end":946,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204304,"byte_end":204307,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ If the current token is `Id`, returns the identifier minus the leading","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204312,"byte_end":204386,"line_start":948,"line_end":948,"column_start":5,"column_end":79}},{"value":"/ `$` character as well as a new [`Cursor`] pointing at the rest of the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204391,"byte_end":204464,"line_start":949,"line_end":949,"column_start":5,"column_end":78}},{"value":"/ tokens in the stream. Otherwise returns `None`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204469,"byte_end":204520,"line_start":950,"line_end":950,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204525,"byte_end":204528,"line_start":951,"line_end":951,"column_start":5,"column_end":8}},{"value":"/ This function will automatically skip over any comments, whitespace, or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204533,"byte_end":204608,"line_start":952,"line_end":952,"column_start":5,"column_end":80}},{"value":"/ unknown annotations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204613,"byte_end":204637,"line_start":953,"line_end":953,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205255,"byte_end":205262,"line_start":970,"line_end":970,"column_start":12,"column_end":19},"name":"keyword","qualname":"<Cursor>::keyword","value":"pub fn keyword(Self) -> Option<(&'a str, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a\n [`Token::Keyword`](crate::lexer::Token)","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204826,"byte_end":204887,"line_start":961,"line_end":961,"column_start":5,"column_end":66}},{"value":"/ [`Token::Keyword`](crate::lexer::Token)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204892,"byte_end":204935,"line_start":962,"line_end":962,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204940,"byte_end":204943,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ If the current token is `Keyword`, returns the keyword as well as a new","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":204948,"byte_end":205023,"line_start":964,"line_end":964,"column_start":5,"column_end":80}},{"value":"/ [`Cursor`] pointing at the rest of the tokens in the stream. Otherwise","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205028,"byte_end":205102,"line_start":965,"line_end":965,"column_start":5,"column_end":79}},{"value":"/ returns `None`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205107,"byte_end":205126,"line_start":966,"line_end":966,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205131,"byte_end":205134,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ This function will automatically skip over any comments, whitespace, or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205139,"byte_end":205214,"line_start":968,"line_end":968,"column_start":5,"column_end":80}},{"value":"/ unknown annotations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205219,"byte_end":205243,"line_start":969,"line_end":969,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205874,"byte_end":205882,"line_start":986,"line_end":986,"column_start":12,"column_end":20},"name":"reserved","qualname":"<Cursor>::reserved","value":"pub fn reserved(Self) -> Option<(&'a str, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a\n [`Token::Reserved`](crate::lexer::Token)","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205436,"byte_end":205497,"line_start":977,"line_end":977,"column_start":5,"column_end":66}},{"value":"/ [`Token::Reserved`](crate::lexer::Token)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205502,"byte_end":205546,"line_start":978,"line_end":978,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205551,"byte_end":205554,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ If the current token is `Reserved`, returns the reserved token as well","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205559,"byte_end":205633,"line_start":980,"line_end":980,"column_start":5,"column_end":79}},{"value":"/ as a new [`Cursor`] pointing at the rest of the tokens in the stream.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205638,"byte_end":205711,"line_start":981,"line_end":981,"column_start":5,"column_end":78}},{"value":"/ Otherwise returns `None`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205716,"byte_end":205745,"line_start":982,"line_end":982,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205750,"byte_end":205753,"line_start":983,"line_end":983,"column_start":5,"column_end":8}},{"value":"/ This function will automatically skip over any comments, whitespace, or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205758,"byte_end":205833,"line_start":984,"line_end":984,"column_start":5,"column_end":80}},{"value":"/ unknown annotations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":205838,"byte_end":205862,"line_start":985,"line_end":985,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206486,"byte_end":206493,"line_start":1002,"line_end":1002,"column_start":12,"column_end":19},"name":"integer","qualname":"<Cursor>::integer","value":"pub fn integer(Self) -> Option<(&'a Integer, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a\n [`Token::Integer`](crate::lexer::Token)","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206057,"byte_end":206118,"line_start":993,"line_end":993,"column_start":5,"column_end":66}},{"value":"/ [`Token::Integer`](crate::lexer::Token)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206123,"byte_end":206166,"line_start":994,"line_end":994,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206171,"byte_end":206174,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ If the current token is `Integer`, returns the integer as well as a new","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206179,"byte_end":206254,"line_start":996,"line_end":996,"column_start":5,"column_end":80}},{"value":"/ [`Cursor`] pointing at the rest of the tokens in the stream. Otherwise","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206259,"byte_end":206333,"line_start":997,"line_end":997,"column_start":5,"column_end":79}},{"value":"/ returns `None`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206338,"byte_end":206357,"line_start":998,"line_end":998,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206362,"byte_end":206365,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ This function will automatically skip over any comments, whitespace, or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206370,"byte_end":206445,"line_start":1000,"line_end":1000,"column_start":5,"column_end":80}},{"value":"/ unknown annotations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206450,"byte_end":206474,"line_start":1001,"line_end":1001,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207096,"byte_end":207101,"line_start":1018,"line_end":1018,"column_start":12,"column_end":17},"name":"float","qualname":"<Cursor>::float","value":"pub fn float(Self) -> Option<(&'a Float, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a\n [`Token::Float`](crate::lexer::Token)","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206673,"byte_end":206734,"line_start":1009,"line_end":1009,"column_start":5,"column_end":66}},{"value":"/ [`Token::Float`](crate::lexer::Token)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206739,"byte_end":206780,"line_start":1010,"line_end":1010,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206785,"byte_end":206788,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ If the current token is `Float`, returns the float as well as a new","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206793,"byte_end":206864,"line_start":1012,"line_end":1012,"column_start":5,"column_end":76}},{"value":"/ [`Cursor`] pointing at the rest of the tokens in the stream. Otherwise","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206869,"byte_end":206943,"line_start":1013,"line_end":1013,"column_start":5,"column_end":79}},{"value":"/ returns `None`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206948,"byte_end":206967,"line_start":1014,"line_end":1014,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206972,"byte_end":206975,"line_start":1015,"line_end":1015,"column_start":5,"column_end":8}},{"value":"/ This function will automatically skip over any comments, whitespace, or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":206980,"byte_end":207055,"line_start":1016,"line_end":1016,"column_start":5,"column_end":80}},{"value":"/ unknown annotations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207060,"byte_end":207084,"line_start":1017,"line_end":1017,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207721,"byte_end":207727,"line_start":1034,"line_end":1034,"column_start":12,"column_end":18},"name":"string","qualname":"<Cursor>::string","value":"pub fn string(Self) -> Option<(&'a [u8], Self)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a\n [`Token::String`](crate::lexer::Token)","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207277,"byte_end":207338,"line_start":1025,"line_end":1025,"column_start":5,"column_end":66}},{"value":"/ [`Token::String`](crate::lexer::Token)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207343,"byte_end":207385,"line_start":1026,"line_end":1026,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207390,"byte_end":207393,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ If the current token is `String`, returns the byte value of the string","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207398,"byte_end":207472,"line_start":1028,"line_end":1028,"column_start":5,"column_end":79}},{"value":"/ as well as a new [`Cursor`] pointing at the rest of the tokens in the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207477,"byte_end":207550,"line_start":1029,"line_end":1029,"column_start":5,"column_end":78}},{"value":"/ stream. Otherwise returns `None`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207555,"byte_end":207592,"line_start":1030,"line_end":1030,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207597,"byte_end":207600,"line_start":1031,"line_end":1031,"column_start":5,"column_end":8}},{"value":"/ This function will automatically skip over any comments, whitespace, or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207605,"byte_end":207680,"line_start":1032,"line_end":1032,"column_start":5,"column_end":80}},{"value":"/ unknown annotations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207685,"byte_end":207709,"line_start":1033,"line_end":1033,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208908,"byte_end":208918,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"annotation","qualname":"<Cursor>::annotation","value":"pub fn annotation(Self) -> Option<(&'a str, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a\n [`Token::Reserved`](crate::lexer::Token) and looks like the start of an\n annotation.","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207905,"byte_end":207966,"line_start":1041,"line_end":1041,"column_start":5,"column_end":66}},{"value":"/ [`Token::Reserved`](crate::lexer::Token) and looks like the start of an","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":207971,"byte_end":208046,"line_start":1042,"line_end":1042,"column_start":5,"column_end":80}},{"value":"/ annotation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208051,"byte_end":208066,"line_start":1043,"line_end":1043,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208071,"byte_end":208074,"line_start":1044,"line_end":1044,"column_start":5,"column_end":8}},{"value":"/ [Annotations][annotation] are a WebAssembly proposal for the text format","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208079,"byte_end":208155,"line_start":1045,"line_end":1045,"column_start":5,"column_end":81}},{"value":"/ which allows placing structured text inside of a text file, for example","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208160,"byte_end":208235,"line_start":1046,"line_end":1046,"column_start":5,"column_end":80}},{"value":"/ to specify the name section or other custom sections.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208240,"byte_end":208297,"line_start":1047,"line_end":1047,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208302,"byte_end":208305,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ This function will attempt to see if the current token is the `@foo`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208310,"byte_end":208382,"line_start":1049,"line_end":1049,"column_start":5,"column_end":77}},{"value":"/ part of the annotation. This requires the previous token to be `(` and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208387,"byte_end":208461,"line_start":1050,"line_end":1050,"column_start":5,"column_end":79}},{"value":"/ the current token is `Reserved` which starts with `@` and has a nonzero","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208466,"byte_end":208541,"line_start":1051,"line_end":1051,"column_start":5,"column_end":80}},{"value":"/ length for the following name.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208546,"byte_end":208580,"line_start":1052,"line_end":1052,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208585,"byte_end":208588,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ Note that this will skip *unknown* annoations. Only pre-registered","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208593,"byte_end":208663,"line_start":1054,"line_end":1054,"column_start":5,"column_end":75}},{"value":"/ annotations will be returned here.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208668,"byte_end":208706,"line_start":1055,"line_end":1055,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208711,"byte_end":208714,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ This function will automatically skip over any comments, whitespace, or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208719,"byte_end":208794,"line_start":1057,"line_end":1057,"column_start":5,"column_end":80}},{"value":"/ unknown annotations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208799,"byte_end":208823,"line_start":1058,"line_end":1058,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208828,"byte_end":208831,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ [annotation]: https://github.com/WebAssembly/annotations","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":208836,"byte_end":208896,"line_start":1060,"line_end":1060,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":209529,"byte_end":209536,"line_start":1077,"line_end":1077,"column_start":12,"column_end":19},"name":"comment","qualname":"<Cursor>::comment","value":"pub fn comment(Self) -> Option<(&'a str, Self)>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to advance this cursor if the current token is a\n [`Token::LineComment`](crate::lexer::Token) or a\n [`Token::BlockComment`](crate::lexer::Token)","sig":null,"attributes":[{"value":"/ Attempts to advance this cursor if the current token is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":209272,"byte_end":209333,"line_start":1072,"line_end":1072,"column_start":5,"column_end":66}},{"value":"/ [`Token::LineComment`](crate::lexer::Token) or a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":209338,"byte_end":209390,"line_start":1073,"line_end":1073,"column_start":5,"column_end":57}},{"value":"/ [`Token::BlockComment`](crate::lexer::Token)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":209395,"byte_end":209443,"line_start":1074,"line_end":1074,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":209448,"byte_end":209451,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ This function will only skip whitespace, no other tokens.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":209456,"byte_end":209517,"line_start":1076,"line_end":1076,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":214877,"byte_end":214881,"line_start":1212,"line_end":1212,"column_start":12,"column_end":16},"name":"peek","qualname":"<Lookahead1>::peek","value":"pub fn peek<T: Peek>(&mut Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Attempts to see if `T` is the next token in the [`Parser`] this\n [`Lookahead1`] references.","sig":null,"attributes":[{"value":"/ Attempts to see if `T` is the next token in the [`Parser`] this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":214678,"byte_end":214745,"line_start":1208,"line_end":1208,"column_start":5,"column_end":72}},{"value":"/ [`Lookahead1`] references.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":214750,"byte_end":214780,"line_start":1209,"line_end":1209,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":214785,"byte_end":214788,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ For more information see [`Parser::lookahead1`] and [`Parser::peek`]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":214793,"byte_end":214865,"line_start":1211,"line_end":1211,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":215333,"byte_end":215338,"line_start":1226,"line_end":1226,"column_start":12,"column_end":17},"name":"error","qualname":"<Lookahead1>::error","value":"pub fn error(Self) -> Error","parent":null,"children":[],"decl_id":null,"docs":" Generates an error message saying that one of the tokens passed to\n [`Lookahead1::peek`] method was expected.","sig":null,"attributes":[{"value":"/ Generates an error message saying that one of the tokens passed to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":215068,"byte_end":215138,"line_start":1221,"line_end":1221,"column_start":5,"column_end":75}},{"value":"/ [`Lookahead1::peek`] method was expected.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":215143,"byte_end":215188,"line_start":1222,"line_end":1222,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":215193,"byte_end":215196,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ Before calling this method you should call [`Lookahead1::peek`] for all","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":215201,"byte_end":215276,"line_start":1224,"line_end":1224,"column_start":5,"column_end":80}},{"value":"/ possible tokens you'd like to parse.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":215281,"byte_end":215321,"line_start":1225,"line_end":1225,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":8164},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2996,"byte_end":3001,"line_start":75,"line_end":75,"column_start":12,"column_end":17},"name":"Error","qualname":"::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":8165}],"decl_id":null,"docs":" A convenience error type to tie together all the detailed errors produced by\n this crate.","sig":null,"attributes":[{"value":"/ A convenience error type to tie together all the detailed errors produced by","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2526,"byte_end":2606,"line_start":64,"line_end":64,"column_start":1,"column_end":81}},{"value":"/ this crate.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2607,"byte_end":2622,"line_start":65,"line_end":65,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2623,"byte_end":2626,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This type can be created from a [`lexer::LexError`] or [`parser::Error`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2627,"byte_end":2704,"line_start":67,"line_end":67,"column_start":1,"column_end":78}},{"value":"/ This also contains storage for file/text information so a nice error can be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2705,"byte_end":2784,"line_start":68,"line_end":68,"column_start":1,"column_end":80}},{"value":"/ rendered along the same lines of rustc's own error messages (minus the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2785,"byte_end":2859,"line_start":69,"line_end":69,"column_start":1,"column_end":75}},{"value":"/ color).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2860,"byte_end":2871,"line_start":70,"line_end":70,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2872,"byte_end":2875,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ This type is typically suitable for use in public APIs for consumers of this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2876,"byte_end":2956,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ crate.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2957,"byte_end":2967,"line_start":73,"line_end":73,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4325,"byte_end":4328,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"pub fn new(Span, String) -> Error","parent":null,"children":[],"decl_id":null,"docs":" Creates a new error with the given `message` which is targeted at the\n given `span`","sig":null,"attributes":[{"value":"/ Creates a new error with the given `message` which is targeted at the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4053,"byte_end":4126,"line_start":127,"line_end":127,"column_start":5,"column_end":78}},{"value":"/ given `span`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4131,"byte_end":4147,"line_start":128,"line_end":128,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4152,"byte_end":4155,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Note that you'll want to ensure that `set_text` or `set_path` is called","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4160,"byte_end":4235,"line_start":130,"line_end":130,"column_start":5,"column_end":80}},{"value":"/ on the resulting error to improve the rendering of the error message.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4240,"byte_end":4313,"line_start":131,"line_end":131,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4640,"byte_end":4644,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"span","qualname":"<Error>::span","value":"pub fn span(&Self) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Return the `Span` for this error.\n","sig":null,"attributes":[{"value":"/ Return the `Span` for this error.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4591,"byte_end":4628,"line_start":143,"line_end":143,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5067,"byte_end":5075,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"name":"set_text","qualname":"<Error>::set_text","value":"pub fn set_text(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" To provide a more useful error this function can be used to extract\n relevant textual information about this error into the error itself.","sig":null,"attributes":[{"value":"/ To provide a more useful error this function can be used to extract","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4697,"byte_end":4768,"line_start":148,"line_end":148,"column_start":5,"column_end":76}},{"value":"/ relevant textual information about this error into the error itself.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4773,"byte_end":4845,"line_start":149,"line_end":149,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4850,"byte_end":4853,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ The `contents` here should be the full text of the original file being","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4858,"byte_end":4932,"line_start":151,"line_end":151,"column_start":5,"column_end":79}},{"value":"/ parsed, and this will extract a sub-slice as necessary to render in the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":4937,"byte_end":5012,"line_start":152,"line_end":152,"column_start":5,"column_end":80}},{"value":"/ `Display` implementation later on.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5017,"byte_end":5055,"line_start":153,"line_end":153,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5513,"byte_end":5521,"line_start":166,"line_end":166,"column_start":12,"column_end":20},"name":"set_path","qualname":"<Error>::set_path","value":"pub fn set_path(&mut Self, &Path)","parent":null,"children":[],"decl_id":null,"docs":" To provide a more useful error this function can be used to set\n the file name that this error is associated with.","sig":null,"attributes":[{"value":"/ To provide a more useful error this function can be used to set","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5255,"byte_end":5322,"line_start":161,"line_end":161,"column_start":5,"column_end":72}},{"value":"/ the file name that this error is associated with.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5327,"byte_end":5380,"line_start":162,"line_end":162,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5385,"byte_end":5388,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ The `path` here will be stored in this error and later rendered in the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5393,"byte_end":5467,"line_start":164,"line_end":164,"column_start":5,"column_end":79}},{"value":"/ `Display` implementation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5472,"byte_end":5501,"line_start":165,"line_end":165,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5765,"byte_end":5774,"line_start":174,"line_end":174,"column_start":12,"column_end":21},"name":"lex_error","qualname":"<Error>::lex_error","value":"pub fn lex_error(&Self) -> Option<&lexer::LexError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying `LexError`, if any, that describes this error.\n","sig":null,"attributes":[{"value":"/ Returns the underlying `LexError`, if any, that describes this error.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5680,"byte_end":5753,"line_start":173,"line_end":173,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":6013,"byte_end":6020,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"message","qualname":"<Error>::message","value":"pub fn message(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying message, if any, that describes this error.\n","sig":null,"attributes":[{"value":"/ Returns the underlying message, if any, that describes this error.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":5931,"byte_end":6001,"line_start":181,"line_end":181,"column_start":5,"column_end":75}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":12405,"byte_end":12412,"line_start":153,"line_end":153,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":13529,"byte_end":13532,"line_start":197,"line_end":197,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":14548,"byte_end":14560,"line_start":247,"line_end":247,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":14784,"byte_end":14794,"line_start":257,"line_end":257,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15033,"byte_end":15042,"line_start":267,"line_end":267,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15182,"byte_end":15192,"line_start":274,"line_end":274,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15328,"byte_end":15340,"line_start":281,"line_end":281,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15444,"byte_end":15454,"line_start":287,"line_end":287,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15584,"byte_end":15588,"line_start":294,"line_end":294,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":16287,"byte_end":16293,"line_start":321,"line_end":321,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":16601,"byte_end":16608,"line_start":334,"line_end":334,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":17284,"byte_end":17292,"line_start":358,"line_end":358,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":17748,"byte_end":17755,"line_start":374,"line_end":374,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":19166,"byte_end":19177,"line_start":423,"line_end":423,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":19453,"byte_end":19459,"line_start":435,"line_end":435,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":19760,"byte_end":19767,"line_start":449,"line_end":449,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":20647,"byte_end":20654,"line_start":484,"line_end":484,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":20858,"byte_end":20863,"line_start":493,"line_end":493,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":21091,"byte_end":21101,"line_start":502,"line_end":502,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":21205,"byte_end":21212,"line_start":508,"line_end":508,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":21542,"byte_end":21551,"line_start":520,"line_end":520,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":21683,"byte_end":21689,"line_start":527,"line_end":527,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":22032,"byte_end":22042,"line_start":543,"line_end":543,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":22958,"byte_end":22968,"line_start":570,"line_end":570,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":23172,"byte_end":23177,"line_start":581,"line_end":581,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":23454,"byte_end":23460,"line_start":591,"line_end":591,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":23739,"byte_end":23745,"line_start":601,"line_end":601,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":24057,"byte_end":24063,"line_start":612,"line_end":612,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":24290,"byte_end":24300,"line_start":622,"line_end":622,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":24779,"byte_end":24783,"line_start":637,"line_end":637,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":27931,"byte_end":27942,"line_start":735,"line_end":735,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":28640,"byte_end":28644,"line_start":757,"line_end":757,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":29346,"byte_end":29350,"line_start":782,"line_end":782,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":29844,"byte_end":29847,"line_start":799,"line_end":799,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":30320,"byte_end":30330,"line_start":815,"line_end":815,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":30505,"byte_end":30514,"line_start":824,"line_end":824,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":31248,"byte_end":31260,"line_start":849,"line_end":849,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":31359,"byte_end":31366,"line_start":855,"line_end":855,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":31499,"byte_end":31506,"line_start":862,"line_end":862,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":31603,"byte_end":31609,"line_start":868,"line_end":868,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32102,"byte_end":32117,"line_start":887,"line_end":887,"column_start":17,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32249,"byte_end":32261,"line_start":894,"line_end":894,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32390,"byte_end":32399,"line_start":901,"line_end":901,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32530,"byte_end":32539,"line_start":908,"line_end":908,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32667,"byte_end":32675,"line_start":915,"line_end":915,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32775,"byte_end":32784,"line_start":921,"line_end":921,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32884,"byte_end":32894,"line_start":927,"line_end":927,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":33023,"byte_end":33033,"line_start":934,"line_end":934,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":33161,"byte_end":33175,"line_start":941,"line_end":941,"column_start":17,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":33310,"byte_end":33317,"line_start":948,"line_end":948,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":33440,"byte_end":33447,"line_start":954,"line_end":954,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":36463,"byte_end":36468,"line_start":1052,"line_end":1052,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":36614,"byte_end":36619,"line_start":1058,"line_end":1058,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37236,"byte_end":37238,"line_start":1083,"line_end":1083,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37381,"byte_end":37390,"line_start":1090,"line_end":1090,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37512,"byte_end":37524,"line_start":1096,"line_end":1096,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37642,"byte_end":37653,"line_start":1102,"line_end":1102,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37907,"byte_end":37913,"line_start":1114,"line_end":1114,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38073,"byte_end":38078,"line_start":1122,"line_end":1122,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38177,"byte_end":38186,"line_start":1128,"line_end":1128,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38405,"byte_end":38417,"line_start":1139,"line_end":1139,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38552,"byte_end":38564,"line_start":1146,"line_end":1146,"column_start":17,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38886,"byte_end":38894,"line_start":1157,"line_end":1157,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":39288,"byte_end":39299,"line_start":1170,"line_end":1170,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":39526,"byte_end":39531,"line_start":1180,"line_end":1180,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\aliases.rs","byte_start":46917,"byte_end":46925,"line_start":65,"line_end":65,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":67425,"byte_end":67433,"line_start":44,"line_end":44,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":83616,"byte_end":83625,"line_start":462,"line_end":462,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":87046,"byte_end":87058,"line_start":555,"line_end":555,"column_start":14,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":97881,"byte_end":97888,"line_start":862,"line_end":862,"column_start":14,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":326},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":99606,"byte_end":99613,"line_start":919,"line_end":919,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":100401,"byte_end":100413,"line_start":951,"line_end":951,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":102459,"byte_end":102471,"line_start":1008,"line_end":1008,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":102965,"byte_end":102975,"line_start":1025,"line_end":1025,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":104452,"byte_end":104460,"line_start":28,"line_end":28,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":113947,"byte_end":113959,"line_start":286,"line_end":286,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":114249,"byte_end":114256,"line_start":298,"line_end":298,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":114885,"byte_end":114897,"line_start":318,"line_end":318,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":115299,"byte_end":115310,"line_start":335,"line_end":335,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":116159,"byte_end":116169,"line_start":364,"line_end":364,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":116906,"byte_end":116915,"line_start":391,"line_end":391,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":118176,"byte_end":118180,"line_start":437,"line_end":437,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":434},{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":40324,"byte_end":40326,"line_start":22,"line_end":22,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42709,"byte_end":42714,"line_start":93,"line_end":93,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8394663,"byte_end":8394667,"line_start":14,"line_end":14,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":816},{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395914,"byte_end":8395916,"line_start":51,"line_end":51,"column_start":10,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396566,"byte_end":8396568,"line_start":81,"line_end":81,"column_start":19,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396718,"byte_end":8396720,"line_start":88,"line_end":88,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396852,"byte_end":8396854,"line_start":94,"line_end":94,"column_start":17,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396886,"byte_end":8396888,"line_start":96,"line_end":96,"column_start":24,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":836}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397190,"byte_end":8397192,"line_start":107,"line_end":107,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397434,"byte_end":8397436,"line_start":117,"line_end":117,"column_start":15,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":841},{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398336,"byte_end":8398341,"line_start":145,"line_end":145,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398739,"byte_end":8398744,"line_start":162,"line_end":162,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399112,"byte_end":8399117,"line_start":176,"line_end":176,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399308,"byte_end":8399313,"line_start":186,"line_end":186,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399409,"byte_end":8399414,"line_start":192,"line_end":192,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399664,"byte_end":8399669,"line_start":202,"line_end":202,"column_start":13,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399692,"byte_end":8399697,"line_start":204,"line_end":204,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400406,"byte_end":8400413,"line_start":238,"line_end":238,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400922,"byte_end":8400929,"line_start":254,"line_end":254,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8401644,"byte_end":8401651,"line_start":275,"line_end":275,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402059,"byte_end":8402069,"line_start":292,"line_end":292,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402480,"byte_end":8402490,"line_start":309,"line_end":309,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402914,"byte_end":8402928,"line_start":326,"line_end":326,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8403135,"byte_end":8403141,"line_start":334,"line_end":334,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8405628,"byte_end":8405634,"line_start":420,"line_end":420,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8416750,"byte_end":8416756,"line_start":709,"line_end":709,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":914}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8419561,"byte_end":8419566,"line_start":36,"line_end":36,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8421339,"byte_end":8421355,"line_start":30,"line_end":30,"column_start":24,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8422518,"byte_end":8422528,"line_start":60,"line_end":60,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423480,"byte_end":8423491,"line_start":93,"line_end":93,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1146}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426881,"byte_end":8426887,"line_start":54,"line_end":54,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1159}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8427456,"byte_end":8427467,"line_start":76,"line_end":76,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1163}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8428258,"byte_end":8428275,"line_start":100,"line_end":100,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431379,"byte_end":8431384,"line_start":25,"line_end":25,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1178}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431733,"byte_end":8431742,"line_start":40,"line_end":40,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432598,"byte_end":8432604,"line_start":30,"line_end":30,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1195}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432847,"byte_end":8432857,"line_start":40,"line_end":40,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8434791,"byte_end":8434803,"line_start":108,"line_end":108,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8435140,"byte_end":8435152,"line_start":121,"line_end":121,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8436247,"byte_end":8436257,"line_start":16,"line_end":16,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8439007,"byte_end":8439023,"line_start":98,"line_end":98,"column_start":10,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1273},{"krate":0,"index":1274}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489682,"byte_end":8489691,"line_start":1152,"line_end":1152,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490166,"byte_end":8490178,"line_start":1170,"line_end":1170,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490623,"byte_end":8490630,"line_start":1188,"line_end":1188,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8491057,"byte_end":8491071,"line_start":1205,"line_end":1205,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8491580,"byte_end":8491587,"line_start":1224,"line_end":1224,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1290}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492686,"byte_end":8492692,"line_start":1259,"line_end":1259,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8494958,"byte_end":8494973,"line_start":1326,"line_end":1326,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8495570,"byte_end":8495582,"line_start":1344,"line_end":1344,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8496596,"byte_end":8496605,"line_start":1371,"line_end":1371,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1309}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497408,"byte_end":8497417,"line_start":1394,"line_end":1394,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1312}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498044,"byte_end":8498052,"line_start":1414,"line_end":1414,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498541,"byte_end":8498550,"line_start":1432,"line_end":1432,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499153,"byte_end":8499163,"line_start":1452,"line_end":1452,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1321}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499792,"byte_end":8499802,"line_start":1472,"line_end":1472,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1325}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500541,"byte_end":8500553,"line_start":1494,"line_end":1494,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8501019,"byte_end":8501028,"line_start":1516,"line_end":1516,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5712}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8504285,"byte_end":8504294,"line_start":1607,"line_end":1607,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1332}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8506524,"byte_end":8506536,"line_start":1677,"line_end":1677,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1335}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8507384,"byte_end":8507395,"line_start":1709,"line_end":1709,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8509377,"byte_end":8509381,"line_start":46,"line_end":46,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1351}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510727,"byte_end":8510732,"line_start":93,"line_end":93,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1354}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512593,"byte_end":8512599,"line_start":34,"line_end":34,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1367}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513671,"byte_end":8513677,"line_start":17,"line_end":17,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514916,"byte_end":8514923,"line_start":59,"line_end":59,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517555,"byte_end":8517567,"line_start":137,"line_end":137,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1388}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517841,"byte_end":8517853,"line_start":149,"line_end":149,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1391},{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8520067,"byte_end":8520075,"line_start":47,"line_end":47,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8520971,"byte_end":8520982,"line_start":79,"line_end":79,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1409}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8522464,"byte_end":8522470,"line_start":40,"line_end":40,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8525057,"byte_end":8525061,"line_start":123,"line_end":123,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526812,"byte_end":8526819,"line_start":180,"line_end":180,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1430},{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8527391,"byte_end":8527398,"line_start":199,"line_end":199,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1434}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529755,"byte_end":8529758,"line_start":16,"line_end":16,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1464}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531150,"byte_end":8531156,"line_start":59,"line_end":59,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1482},{"krate":0,"index":1483},{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8534203,"byte_end":8534209,"line_start":132,"line_end":132,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1487}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535513,"byte_end":8535524,"line_start":179,"line_end":179,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535798,"byte_end":8535809,"line_start":189,"line_end":189,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8539100,"byte_end":8539112,"line_start":39,"line_end":39,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1507}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8541027,"byte_end":8541037,"line_start":89,"line_end":89,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1512},{"krate":0,"index":1513}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8543012,"byte_end":8543017,"line_start":41,"line_end":41,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1525}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8546007,"byte_end":8546011,"line_start":134,"line_end":134,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1529}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8547262,"byte_end":8547273,"line_start":174,"line_end":174,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1533}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8547406,"byte_end":8547417,"line_start":180,"line_end":180,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549643,"byte_end":8549650,"line_start":18,"line_end":18,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8550815,"byte_end":8550822,"line_start":54,"line_end":54,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1559},{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8552205,"byte_end":8552213,"line_start":95,"line_end":95,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1563}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553158,"byte_end":8553166,"line_start":124,"line_end":124,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1566},{"krate":0,"index":1567}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553779,"byte_end":8553786,"line_start":147,"line_end":147,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554939,"byte_end":8554946,"line_start":197,"line_end":197,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8556613,"byte_end":8556620,"line_start":247,"line_end":247,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1583}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557328,"byte_end":8557339,"line_start":272,"line_end":272,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558096,"byte_end":8558106,"line_start":298,"line_end":298,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1589}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558864,"byte_end":8558870,"line_start":326,"line_end":326,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1593}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559420,"byte_end":8559428,"line_start":347,"line_end":347,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1596}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559984,"byte_end":8559993,"line_start":368,"line_end":368,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8560723,"byte_end":8560733,"line_start":396,"line_end":396,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1602}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8561784,"byte_end":8561796,"line_start":428,"line_end":428,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1605}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8563627,"byte_end":8563639,"line_start":474,"line_end":474,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8563898,"byte_end":8563910,"line_start":485,"line_end":485,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1612},{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8564415,"byte_end":8564434,"line_start":506,"line_end":506,"column_start":24,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1616}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8564715,"byte_end":8564734,"line_start":517,"line_end":517,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1619},{"krate":0,"index":1620}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8564944,"byte_end":8564956,"line_start":527,"line_end":527,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565228,"byte_end":8565238,"line_start":540,"line_end":540,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1626}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566095,"byte_end":8566106,"line_start":569,"line_end":569,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566860,"byte_end":8566869,"line_start":594,"line_end":594,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8567600,"byte_end":8567610,"line_start":618,"line_end":618,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1638}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568096,"byte_end":8568106,"line_start":635,"line_end":635,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568652,"byte_end":8568664,"line_start":659,"line_end":659,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568926,"byte_end":8568938,"line_start":669,"line_end":669,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1651},{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569599,"byte_end":8569609,"line_start":697,"line_end":697,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1655}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570599,"byte_end":8570603,"line_start":733,"line_end":733,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8571981,"byte_end":8571988,"line_start":771,"line_end":771,"column_start":13,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8572449,"byte_end":8572456,"line_start":786,"line_end":786,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1668}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8572792,"byte_end":8572799,"line_start":799,"line_end":799,"column_start":57,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1671}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573565,"byte_end":8573569,"line_start":15,"line_end":15,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1693}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574221,"byte_end":8574239,"line_start":35,"line_end":35,"column_start":15,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1698},{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575759,"byte_end":8575772,"line_start":98,"line_end":98,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1740}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8576506,"byte_end":8576519,"line_start":116,"line_end":116,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8582754,"byte_end":8582765,"line_start":266,"line_end":266,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1771}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8583525,"byte_end":8583535,"line_start":293,"line_end":293,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1780}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8584102,"byte_end":8584113,"line_start":317,"line_end":317,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1792}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139463,"byte_end":139468,"line_start":222,"line_end":222,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":155887,"byte_end":155892,"line_start":698,"line_end":698,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156040,"byte_end":156045,"line_start":706,"line_end":706,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156610,"byte_end":156617,"line_start":725,"line_end":725,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157105,"byte_end":157110,"line_start":743,"line_end":743,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157421,"byte_end":157431,"line_start":756,"line_end":756,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":158473,"byte_end":158481,"line_start":815,"line_end":815,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181237,"byte_end":181248,"line_start":332,"line_end":332,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184388,"byte_end":184394,"line_start":415,"line_end":415,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201950,"byte_end":201962,"line_start":879,"line_end":879,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":202218,"byte_end":202224,"line_start":889,"line_end":889,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":637},{"krate":0,"index":640}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":214657,"byte_end":214667,"line_start":1207,"line_end":1207,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":216330,"byte_end":216336,"line_start":1255,"line_end":1255,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":3339,"byte_end":3344,"line_start":100,"line_end":100,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":6209,"byte_end":6214,"line_start":190,"line_end":190,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":7188,"byte_end":7193,"line_start":227,"line_end":227,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":7203,"byte_end":7207,"line_start":229,"line_end":229,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2502,"byte_end":2507,"line_start":61,"line_end":61,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":454}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":2517,"byte_end":2523,"line_start":62,"line_end":62,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":531}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":12405,"byte_end":12412,"line_start":153,"line_end":153,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":21},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":13529,"byte_end":13532,"line_start":197,"line_end":197,"column_start":28,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":14548,"byte_end":14560,"line_start":247,"line_end":247,"column_start":17,"column_end":29},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":6302},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":14784,"byte_end":14794,"line_start":257,"line_end":257,"column_start":17,"column_end":27},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":6328},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15033,"byte_end":15042,"line_start":267,"line_end":267,"column_start":17,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":6348},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15182,"byte_end":15192,"line_start":274,"line_end":274,"column_start":17,"column_end":27},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":6358},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15328,"byte_end":15340,"line_start":281,"line_end":281,"column_start":17,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":6371},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15444,"byte_end":15454,"line_start":287,"line_end":287,"column_start":17,"column_end":27},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":6383},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":15584,"byte_end":15588,"line_start":294,"line_end":294,"column_start":17,"column_end":21},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":6414},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":16287,"byte_end":16293,"line_start":321,"line_end":321,"column_start":17,"column_end":23},"kind":{"Impl":{"id":16}},"from":{"krate":2,"index":32312},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":16601,"byte_end":16608,"line_start":334,"line_end":334,"column_start":21,"column_end":28},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":6049},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":17284,"byte_end":17292,"line_start":358,"line_end":358,"column_start":21,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":6091},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":17748,"byte_end":17755,"line_start":374,"line_end":374,"column_start":21,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":6131},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":19166,"byte_end":19177,"line_start":423,"line_end":423,"column_start":21,"column_end":32},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":6158},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":19453,"byte_end":19459,"line_start":435,"line_end":435,"column_start":17,"column_end":23},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":5776},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":19760,"byte_end":19767,"line_start":449,"line_end":449,"column_start":17,"column_end":24},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":5788},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":20647,"byte_end":20654,"line_start":484,"line_end":484,"column_start":20,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":6422},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":20858,"byte_end":20863,"line_start":493,"line_end":493,"column_start":17,"column_end":22},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":926},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":21091,"byte_end":21101,"line_start":502,"line_end":502,"column_start":20,"column_end":30},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":962},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":21205,"byte_end":21212,"line_start":508,"line_end":508,"column_start":20,"column_end":27},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":943},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":21542,"byte_end":21551,"line_start":520,"line_end":520,"column_start":21,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":6253},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":21683,"byte_end":21689,"line_start":527,"line_end":527,"column_start":17,"column_end":23},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":6217},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":22032,"byte_end":22042,"line_start":543,"line_end":543,"column_start":17,"column_end":27},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":6280},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":22958,"byte_end":22968,"line_start":570,"line_end":570,"column_start":21,"column_end":31},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":6190},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":23172,"byte_end":23177,"line_start":581,"line_end":581,"column_start":17,"column_end":22},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":5991},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":23454,"byte_end":23460,"line_start":591,"line_end":591,"column_start":17,"column_end":23},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":5868},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":23739,"byte_end":23745,"line_start":601,"line_end":601,"column_start":17,"column_end":23},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":5755},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":24057,"byte_end":24063,"line_start":612,"line_end":612,"column_start":17,"column_end":23},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1981},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":24290,"byte_end":24300,"line_start":622,"line_end":622,"column_start":17,"column_end":27},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1989},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":24779,"byte_end":24783,"line_start":637,"line_end":637,"column_start":17,"column_end":21},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":6014},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":27931,"byte_end":27942,"line_start":735,"line_end":735,"column_start":17,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":6035},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":28640,"byte_end":28644,"line_start":757,"line_end":757,"column_start":17,"column_end":21},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":5891},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":29346,"byte_end":29350,"line_start":782,"line_end":782,"column_start":17,"column_end":21},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":5725},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":29844,"byte_end":29847,"line_start":799,"line_end":799,"column_start":17,"column_end":20},"kind":{"Impl":{"id":40}},"from":{"krate":5,"index":4754},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":30320,"byte_end":30330,"line_start":815,"line_end":815,"column_start":17,"column_end":27},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2058},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":30505,"byte_end":30514,"line_start":824,"line_end":824,"column_start":17,"column_end":26},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":5585},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":31248,"byte_end":31260,"line_start":849,"line_end":849,"column_start":17,"column_end":29},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":5592},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":31359,"byte_end":31366,"line_start":855,"line_end":855,"column_start":17,"column_end":24},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":5598},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":31499,"byte_end":31506,"line_start":862,"line_end":862,"column_start":17,"column_end":24},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":5612},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":31603,"byte_end":31609,"line_start":868,"line_end":868,"column_start":17,"column_end":23},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":5616},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32102,"byte_end":32117,"line_start":887,"line_end":887,"column_start":17,"column_end":32},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":5624},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32249,"byte_end":32261,"line_start":894,"line_end":894,"column_start":17,"column_end":29},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":5631},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32390,"byte_end":32399,"line_start":901,"line_end":901,"column_start":17,"column_end":26},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":5638},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32530,"byte_end":32539,"line_start":908,"line_end":908,"column_start":17,"column_end":26},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":5645},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32667,"byte_end":32675,"line_start":915,"line_end":915,"column_start":17,"column_end":25},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":5652},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32775,"byte_end":32784,"line_start":921,"line_end":921,"column_start":17,"column_end":26},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":5658},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":32884,"byte_end":32894,"line_start":927,"line_end":927,"column_start":17,"column_end":27},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":5664},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":33023,"byte_end":33033,"line_start":934,"line_end":934,"column_start":17,"column_end":27},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":5671},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":33161,"byte_end":33175,"line_start":941,"line_end":941,"column_start":17,"column_end":31},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":5605},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":33310,"byte_end":33317,"line_start":948,"line_end":948,"column_start":17,"column_end":24},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1104},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":33440,"byte_end":33447,"line_start":954,"line_end":954,"column_start":17,"column_end":24},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1108},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":36463,"byte_end":36468,"line_start":1052,"line_end":1052,"column_start":6,"column_end":11},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":170},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":36614,"byte_end":36619,"line_start":1058,"line_end":1058,"column_start":17,"column_end":22},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":170},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37236,"byte_end":37238,"line_start":1083,"line_end":1083,"column_start":17,"column_end":19},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":916},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37381,"byte_end":37390,"line_start":1090,"line_end":1090,"column_start":17,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":5685},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37512,"byte_end":37524,"line_start":1096,"line_end":1096,"column_start":17,"column_end":29},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":5714},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37642,"byte_end":37653,"line_start":1102,"line_end":1102,"column_start":21,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":5719},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":37907,"byte_end":37913,"line_start":1114,"line_end":1114,"column_start":17,"column_end":23},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1893},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38073,"byte_end":38078,"line_start":1122,"line_end":1122,"column_start":17,"column_end":22},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1961},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38177,"byte_end":38186,"line_start":1128,"line_end":1128,"column_start":17,"column_end":26},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1970},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38405,"byte_end":38417,"line_start":1139,"line_end":1139,"column_start":17,"column_end":29},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":5678},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38552,"byte_end":38564,"line_start":1146,"line_end":1146,"column_start":17,"column_end":29},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":5971},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":38886,"byte_end":38894,"line_start":1157,"line_end":1157,"column_start":17,"column_end":25},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":5841},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":39288,"byte_end":39299,"line_start":1170,"line_end":1170,"column_start":17,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":5861},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\binary.rs","byte_start":39526,"byte_end":39531,"line_start":1180,"line_end":1180,"column_start":17,"column_end":22},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1794},"to":{"krate":0,"index":31}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\aliases.rs","byte_start":46917,"byte_end":46925,"line_start":65,"line_end":65,"column_start":10,"column_end":18},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":67425,"byte_end":67433,"line_start":44,"line_end":44,"column_start":10,"column_end":18},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":676},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":83616,"byte_end":83625,"line_start":462,"line_end":462,"column_start":10,"column_end":19},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":87046,"byte_end":87058,"line_start":555,"line_end":555,"column_start":14,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":291},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":97881,"byte_end":97888,"line_start":862,"line_end":862,"column_start":14,"column_end":21},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":309},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":99606,"byte_end":99613,"line_start":919,"line_end":919,"column_start":23,"column_end":30},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":309},"to":{"krate":2,"index":2266}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":100401,"byte_end":100413,"line_start":951,"line_end":951,"column_start":32,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":6302},"to":{"krate":0,"index":340}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":102459,"byte_end":102471,"line_start":1008,"line_end":1008,"column_start":32,"column_end":44},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":6371},"to":{"krate":0,"index":340}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\names.rs","byte_start":102965,"byte_end":102975,"line_start":1025,"line_end":1025,"column_start":32,"column_end":42},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":6358},"to":{"krate":0,"index":340}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":104452,"byte_end":104460,"line_start":28,"line_end":28,"column_start":10,"column_end":18},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":711},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":113539,"byte_end":113546,"line_start":272,"line_end":272,"column_start":26,"column_end":33},"kind":"SuperTrait","from":{"krate":2,"index":2033},"to":{"krate":0,"index":378}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":113947,"byte_end":113959,"line_start":286,"line_end":286,"column_start":32,"column_end":44},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":6302},"to":{"krate":0,"index":378}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":114249,"byte_end":114256,"line_start":298,"line_end":298,"column_start":26,"column_end":33},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":388},"to":{"krate":0,"index":383}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":114885,"byte_end":114897,"line_start":318,"line_end":318,"column_start":32,"column_end":44},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":6371},"to":{"krate":0,"index":378}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":115299,"byte_end":115310,"line_start":335,"line_end":335,"column_start":26,"column_end":37},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":402},"to":{"krate":0,"index":383}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":116159,"byte_end":116169,"line_start":364,"line_end":364,"column_start":32,"column_end":42},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":6358},"to":{"krate":0,"index":378}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":116906,"byte_end":116915,"line_start":391,"line_end":391,"column_start":26,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":416},"to":{"krate":0,"index":383}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\types.rs","byte_start":118176,"byte_end":118180,"line_start":437,"line_end":437,"column_start":10,"column_end":14},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":721},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":40324,"byte_end":40326,"line_start":22,"line_end":22,"column_start":6,"column_end":8},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\resolve\\mod.rs","byte_start":42709,"byte_end":42714,"line_start":93,"line_end":93,"column_start":10,"column_end":15},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":793},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8394663,"byte_end":8394667,"line_start":14,"line_end":14,"column_start":6,"column_end":10},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":8190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8395914,"byte_end":8395916,"line_start":51,"line_end":51,"column_start":10,"column_end":12},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":916},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396566,"byte_end":8396568,"line_start":81,"line_end":81,"column_start":19,"column_end":21},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":916},"to":{"krate":2,"index":6794}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396718,"byte_end":8396720,"line_start":88,"line_end":88,"column_start":24,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":916},"to":{"krate":2,"index":1770}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396852,"byte_end":8396854,"line_start":94,"line_end":94,"column_start":17,"column_end":19},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":916},"to":{"krate":2,"index":1775}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8396886,"byte_end":8396888,"line_start":96,"line_end":96,"column_start":24,"column_end":26},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":916},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397190,"byte_end":8397192,"line_start":107,"line_end":107,"column_start":21,"column_end":23},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":916},"to":{"krate":2,"index":6606}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8397434,"byte_end":8397436,"line_start":117,"line_end":117,"column_start":15,"column_end":17},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":916},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398336,"byte_end":8398341,"line_start":145,"line_end":145,"column_start":6,"column_end":11},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":926},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8398739,"byte_end":8398744,"line_start":162,"line_end":162,"column_start":24,"column_end":29},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":926},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399112,"byte_end":8399117,"line_start":176,"line_end":176,"column_start":15,"column_end":20},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":926},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399308,"byte_end":8399313,"line_start":186,"line_end":186,"column_start":27,"column_end":32},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":926},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399409,"byte_end":8399414,"line_start":192,"line_end":192,"column_start":20,"column_end":25},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":926},"to":{"krate":2,"index":1770}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399664,"byte_end":8399669,"line_start":202,"line_end":202,"column_start":13,"column_end":18},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":926},"to":{"krate":2,"index":1775}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8399692,"byte_end":8399697,"line_start":204,"line_end":204,"column_start":15,"column_end":20},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":926},"to":{"krate":2,"index":6794}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400406,"byte_end":8400413,"line_start":238,"line_end":238,"column_start":13,"column_end":20},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":943},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8400922,"byte_end":8400929,"line_start":254,"line_end":254,"column_start":38,"column_end":45},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":943},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8401644,"byte_end":8401651,"line_start":275,"line_end":275,"column_start":28,"column_end":35},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":943},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402059,"byte_end":8402069,"line_start":292,"line_end":292,"column_start":27,"column_end":37},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":962},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402480,"byte_end":8402490,"line_start":309,"line_end":309,"column_start":28,"column_end":38},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":962},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8402914,"byte_end":8402928,"line_start":326,"line_end":326,"column_start":24,"column_end":38},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":975},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8403135,"byte_end":8403141,"line_start":334,"line_end":334,"column_start":24,"column_end":30},"kind":{"Impl":{"id":112}},"from":{"krate":2,"index":32312},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8405628,"byte_end":8405634,"line_start":420,"line_end":420,"column_start":20,"column_end":26},"kind":{"Impl":{"id":113}},"from":{"krate":5,"index":5501},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\token.rs","byte_start":8416750,"byte_end":8416756,"line_start":709,"line_end":709,"column_start":15,"column_end":21},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":910},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\alias.rs","byte_start":8419561,"byte_end":8419566,"line_start":36,"line_end":36,"column_start":24,"column_end":29},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1794},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8421339,"byte_end":8421355,"line_start":30,"line_end":30,"column_start":24,"column_end":40},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1815},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8422518,"byte_end":8422528,"line_start":60,"line_end":60,"column_start":27,"column_end":37},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1848},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\assert_expr.rs","byte_start":8423480,"byte_end":8423491,"line_start":93,"line_end":93,"column_start":24,"column_end":35},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1866},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8426881,"byte_end":8426887,"line_start":54,"line_end":54,"column_start":24,"column_end":30},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1893},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8427456,"byte_end":8427467,"line_start":76,"line_end":76,"column_start":24,"column_end":35},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1902},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\custom.rs","byte_start":8428258,"byte_end":8428275,"line_start":100,"line_end":100,"column_start":24,"column_end":41},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1922},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431379,"byte_end":8431384,"line_start":25,"line_end":25,"column_start":24,"column_end":29},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1961},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\event.rs","byte_start":8431733,"byte_end":8431742,"line_start":40,"line_end":40,"column_start":24,"column_end":33},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1970},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432598,"byte_end":8432604,"line_start":30,"line_end":30,"column_start":24,"column_end":30},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1981},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8432847,"byte_end":8432857,"line_start":40,"line_end":40,"column_start":24,"column_end":34},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1989},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8434791,"byte_end":8434803,"line_start":108,"line_end":108,"column_start":24,"column_end":36},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2052},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\export.rs","byte_start":8435140,"byte_end":8435152,"line_start":121,"line_end":121,"column_start":15,"column_end":27},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2052},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8436247,"byte_end":8436257,"line_start":16,"line_end":16,"column_start":24,"column_end":34},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2058},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8439007,"byte_end":8439023,"line_start":98,"line_end":98,"column_start":10,"column_end":26},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8489682,"byte_end":8489691,"line_start":1152,"line_end":1152,"column_start":24,"column_end":33},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":5585},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490166,"byte_end":8490178,"line_start":1170,"line_end":1170,"column_start":24,"column_end":36},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":5592},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8490623,"byte_end":8490630,"line_start":1188,"line_end":1188,"column_start":24,"column_end":31},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":5598},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8491057,"byte_end":8491071,"line_start":1205,"line_end":1205,"column_start":24,"column_end":38},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":5605},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8491580,"byte_end":8491587,"line_start":1224,"line_end":1224,"column_start":24,"column_end":31},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":5612},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8492686,"byte_end":8492692,"line_start":1259,"line_end":1259,"column_start":10,"column_end":16},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":5616},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8494958,"byte_end":8494973,"line_start":1326,"line_end":1326,"column_start":10,"column_end":25},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":5624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8495570,"byte_end":8495582,"line_start":1344,"line_end":1344,"column_start":24,"column_end":36},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":5631},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8496596,"byte_end":8496605,"line_start":1371,"line_end":1371,"column_start":24,"column_end":33},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":5638},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8497408,"byte_end":8497417,"line_start":1394,"line_end":1394,"column_start":24,"column_end":33},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":5645},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498044,"byte_end":8498052,"line_start":1414,"line_end":1414,"column_start":24,"column_end":32},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":5652},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8498541,"byte_end":8498550,"line_start":1432,"line_end":1432,"column_start":24,"column_end":33},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":5658},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499153,"byte_end":8499163,"line_start":1452,"line_end":1452,"column_start":24,"column_end":34},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":5664},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8499792,"byte_end":8499802,"line_start":1472,"line_end":1472,"column_start":24,"column_end":34},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":5671},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8500541,"byte_end":8500553,"line_start":1494,"line_end":1494,"column_start":24,"column_end":36},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":5678},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8501019,"byte_end":8501028,"line_start":1516,"line_end":1516,"column_start":6,"column_end":15},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":5685},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8504285,"byte_end":8504294,"line_start":1607,"line_end":1607,"column_start":24,"column_end":33},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":5685},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8506524,"byte_end":8506536,"line_start":1677,"line_end":1677,"column_start":24,"column_end":36},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":5714},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\expr.rs","byte_start":8507384,"byte_end":8507395,"line_start":1709,"line_end":1709,"column_start":24,"column_end":35},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":5719},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8509377,"byte_end":8509381,"line_start":46,"line_end":46,"column_start":24,"column_end":28},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":5725},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\func.rs","byte_start":8510727,"byte_end":8510732,"line_start":93,"line_end":93,"column_start":10,"column_end":15},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":5747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\global.rs","byte_start":8512593,"byte_end":8512599,"line_start":34,"line_end":34,"column_start":24,"column_end":30},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":5755},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8513671,"byte_end":8513677,"line_start":17,"line_end":17,"column_start":24,"column_end":30},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":5776},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8514916,"byte_end":8514923,"line_start":59,"line_end":59,"column_start":24,"column_end":31},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":5788},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517555,"byte_end":8517567,"line_start":137,"line_end":137,"column_start":24,"column_end":36},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\import.rs","byte_start":8517841,"byte_end":8517853,"line_start":149,"line_end":149,"column_start":15,"column_end":27},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":5829},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8520067,"byte_end":8520075,"line_start":47,"line_end":47,"column_start":24,"column_end":32},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":5841},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\instance.rs","byte_start":8520971,"byte_end":8520982,"line_start":79,"line_end":79,"column_start":24,"column_end":35},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":5861},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8522464,"byte_end":8522470,"line_start":40,"line_end":40,"column_start":24,"column_end":30},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":5868},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8525057,"byte_end":8525061,"line_start":123,"line_end":123,"column_start":24,"column_end":28},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":5891},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8526812,"byte_end":8526819,"line_start":180,"line_end":180,"column_start":6,"column_end":13},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":5910},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\memory.rs","byte_start":8527391,"byte_end":8527398,"line_start":199,"line_end":199,"column_start":24,"column_end":31},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":5910},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8529755,"byte_end":8529758,"line_start":16,"line_end":16,"column_start":24,"column_end":27},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1459},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8531150,"byte_end":8531156,"line_start":59,"line_end":59,"column_start":10,"column_end":16},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1466},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8534203,"byte_end":8534209,"line_start":132,"line_end":132,"column_start":24,"column_end":30},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1466},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535513,"byte_end":8535524,"line_start":179,"line_end":179,"column_start":10,"column_end":21},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":5921},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\module.rs","byte_start":8535798,"byte_end":8535809,"line_start":189,"line_end":189,"column_start":24,"column_end":35},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5921},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8539100,"byte_end":8539112,"line_start":39,"line_end":39,"column_start":24,"column_end":36},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":5971},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\nested_module.rs","byte_start":8541027,"byte_end":8541037,"line_start":89,"line_end":89,"column_start":15,"column_end":25},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1509},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8543012,"byte_end":8543017,"line_start":41,"line_end":41,"column_start":24,"column_end":29},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":5991},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8546007,"byte_end":8546011,"line_start":134,"line_end":134,"column_start":24,"column_end":28},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":6014},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8547262,"byte_end":8547273,"line_start":174,"line_end":174,"column_start":24,"column_end":35},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":6035},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\table.rs","byte_start":8547406,"byte_end":8547417,"line_start":180,"line_end":180,"column_start":10,"column_end":21},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":6035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8549643,"byte_end":8549650,"line_start":18,"line_end":18,"column_start":24,"column_end":31},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":6049},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8550815,"byte_end":8550822,"line_start":54,"line_end":54,"column_start":19,"column_end":26},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":6049},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8552205,"byte_end":8552213,"line_start":95,"line_end":95,"column_start":24,"column_end":32},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":6091},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553158,"byte_end":8553166,"line_start":124,"line_end":124,"column_start":19,"column_end":27},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":6091},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8553779,"byte_end":8553786,"line_start":147,"line_end":147,"column_start":10,"column_end":17},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":6131},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8554939,"byte_end":8554946,"line_start":197,"line_end":197,"column_start":24,"column_end":31},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":6131},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8556613,"byte_end":8556620,"line_start":247,"line_end":247,"column_start":19,"column_end":26},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":6131},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8557328,"byte_end":8557339,"line_start":272,"line_end":272,"column_start":24,"column_end":35},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":6158},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558096,"byte_end":8558106,"line_start":298,"line_end":298,"column_start":24,"column_end":34},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":6190},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8558864,"byte_end":8558870,"line_start":326,"line_end":326,"column_start":24,"column_end":30},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":6217},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559420,"byte_end":8559428,"line_start":347,"line_end":347,"column_start":24,"column_end":32},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":6235},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8559984,"byte_end":8559993,"line_start":368,"line_end":368,"column_start":24,"column_end":33},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":6253},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8560723,"byte_end":8560733,"line_start":396,"line_end":396,"column_start":24,"column_end":34},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":6280},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8561784,"byte_end":8561796,"line_start":428,"line_end":428,"column_start":10,"column_end":22},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":6302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8563627,"byte_end":8563639,"line_start":474,"line_end":474,"column_start":24,"column_end":36},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":6302},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8563898,"byte_end":8563910,"line_start":485,"line_end":485,"column_start":19,"column_end":31},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":6302},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8564415,"byte_end":8564434,"line_start":506,"line_end":506,"column_start":24,"column_end":43},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":6315},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8564715,"byte_end":8564734,"line_start":517,"line_end":517,"column_start":19,"column_end":38},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":6315},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8564944,"byte_end":8564956,"line_start":527,"line_end":527,"column_start":44,"column_end":56},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":6302},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8565228,"byte_end":8565238,"line_start":540,"line_end":540,"column_start":24,"column_end":34},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":6328},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566095,"byte_end":8566106,"line_start":569,"line_end":569,"column_start":10,"column_end":21},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":6337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8566860,"byte_end":8566869,"line_start":594,"line_end":594,"column_start":24,"column_end":33},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":6348},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8567600,"byte_end":8567610,"line_start":618,"line_end":618,"column_start":24,"column_end":34},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":6358},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568096,"byte_end":8568106,"line_start":635,"line_end":635,"column_start":19,"column_end":29},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":6358},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568652,"byte_end":8568664,"line_start":659,"line_end":659,"column_start":24,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":6371},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8568926,"byte_end":8568938,"line_start":669,"line_end":669,"column_start":19,"column_end":31},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":6371},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8569599,"byte_end":8569609,"line_start":697,"line_end":697,"column_start":24,"column_end":34},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":6383},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8570599,"byte_end":8570603,"line_start":733,"line_end":733,"column_start":24,"column_end":28},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":6414},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8571981,"byte_end":8571988,"line_start":771,"line_end":771,"column_start":13,"column_end":20},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":6422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8572449,"byte_end":8572456,"line_start":786,"line_end":786,"column_start":45,"column_end":52},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":6422},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\types.rs","byte_start":8572792,"byte_end":8572799,"line_start":799,"line_end":799,"column_start":57,"column_end":64},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":6422},"to":{"krate":2,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8573565,"byte_end":8573569,"line_start":15,"line_end":15,"column_start":24,"column_end":28},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1688},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8574221,"byte_end":8574239,"line_start":35,"line_end":35,"column_start":15,"column_end":33},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1695},"to":{"krate":0,"index":552}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8575759,"byte_end":8575772,"line_start":98,"line_end":98,"column_start":6,"column_end":19},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1700},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8576506,"byte_end":8576519,"line_start":116,"line_end":116,"column_start":24,"column_end":37},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1700},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8582754,"byte_end":8582765,"line_start":266,"line_end":266,"column_start":24,"column_end":35},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1758},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8583525,"byte_end":8583535,"line_start":293,"line_end":293,"column_start":24,"column_end":34},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1772},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\ast\\wast.rs","byte_start":8584102,"byte_end":8584113,"line_start":317,"line_end":317,"column_start":24,"column_end":35},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1782},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":139463,"byte_end":139468,"line_start":222,"line_end":222,"column_start":10,"column_end":15},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":7929},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":155887,"byte_end":155892,"line_start":698,"line_end":698,"column_start":23,"column_end":28},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":7929},"to":{"krate":2,"index":5311}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156040,"byte_end":156045,"line_start":706,"line_end":706,"column_start":10,"column_end":15},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":7936},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":156610,"byte_end":156617,"line_start":725,"line_end":725,"column_start":10,"column_end":17},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":8033},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157105,"byte_end":157110,"line_start":743,"line_end":743,"column_start":10,"column_end":15},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":8061},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":157421,"byte_end":157431,"line_start":756,"line_end":756,"column_start":10,"column_end":20},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":8087},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lexer.rs","byte_start":158473,"byte_end":158481,"line_start":815,"line_end":815,"column_start":23,"column_end":31},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":7980},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":176597,"byte_end":176602,"line_start":208,"line_end":208,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":2050},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":181237,"byte_end":181248,"line_start":332,"line_end":332,"column_start":6,"column_end":17},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":558},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":184388,"byte_end":184394,"line_start":415,"line_end":415,"column_start":10,"column_end":16},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":8147},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":201950,"byte_end":201962,"line_start":879,"line_end":879,"column_start":23,"column_end":35},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":612},"to":{"krate":2,"index":2266}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":202218,"byte_end":202224,"line_start":889,"line_end":889,"column_start":10,"column_end":16},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":8155},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":214657,"byte_end":214667,"line_start":1207,"line_end":1207,"column_start":6,"column_end":16},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\parser.rs","byte_start":216330,"byte_end":216336,"line_start":1255,"line_end":1255,"column_start":45,"column_end":51},"kind":{"Impl":{"id":223}},"from":{"krate":2,"index":32312},"to":{"krate":0,"index":549}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":3339,"byte_end":3344,"line_start":100,"line_end":100,"column_start":6,"column_end":11},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":8164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":6209,"byte_end":6214,"line_start":190,"line_end":190,"column_start":23,"column_end":28},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":8164},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":7188,"byte_end":7193,"line_start":227,"line_end":227,"column_start":28,"column_end":33},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":8164},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wast-35.0.2\\src\\lib.rs","byte_start":7203,"byte_end":7207,"line_start":229,"line_end":229,"column_start":6,"column_end":10},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":8175},"to":{"krate":4294967295,"index":4294967295}}]}