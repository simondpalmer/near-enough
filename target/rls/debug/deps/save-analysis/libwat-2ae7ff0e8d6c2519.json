{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37","program":"C:\\Users\\Simon Palmer\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","wat","--edition=2018","C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=2ae7ff0e8d6c2519","-C","extra-filename=-2ae7ff0e8d6c2519","--out-dir","c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","--extern","wast=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libwast-c419cc07d5fa8017.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Simon Palmer\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libwat-2ae7ff0e8d6c2519.rmeta"},"prelude":{"crate_id":{"name":"wat","disambiguator":[4697071702134673285,15168205997484232419]},"crate_root":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src","external_crates":[{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2134305066550747688,1377703208702874155]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1322159461575500717,8297198428669169011]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2376346800744392852,12342541482992122530]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14946502858004023242,6637215598610016319]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5305136910335682758,6890491777619641650]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8079093424489733033,9678018066858265018]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8191054904896780843,65190916132359678]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17454577518104061478,8473922882117178851]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14702801963282246562,3385633331338644346]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4483555191844012602,617965746000623535]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6496369475756502088,8603909216288097824]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[8790568169648576788,8899032378407077408]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":13,"id":{"name":"wast","disambiguator":[2836159809512425877,13275389244983212898]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","num":14,"id":{"name":"leb128","disambiguator":[16768726093417008474,6204905460447709638]}}],"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":0,"byte_end":10375,"line_start":1,"line_end":333,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":0,"byte_end":10375,"line_start":1,"line_end":333,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":24},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":49},{"krate":0,"index":26},{"krate":0,"index":31},{"krate":0,"index":33}],"decl_id":null,"docs":" A Rust parser for the [WebAssembly Text format][wat]","sig":null,"attributes":[{"value":"/ A Rust parser for the [WebAssembly Text format][wat]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":0,"byte_end":56,"line_start":1,"line_end":1,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":57,"byte_end":60,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate contains a stable interface to the parser for the [WAT][wat]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":61,"byte_end":136,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ format of WebAssembly text files. The format parsed by this crate follows","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":137,"byte_end":214,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/ the [online specification][wat].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":215,"byte_end":251,"line_start":5,"line_end":5,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":252,"byte_end":255,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":256,"byte_end":270,"line_start":7,"line_end":7,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":271,"byte_end":274,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Parse an in-memory string:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":275,"byte_end":305,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":306,"byte_end":309,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":310,"byte_end":317,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ # fn foo() -> wat::Result<()> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":318,"byte_end":353,"line_start":12,"line_end":12,"column_start":1,"column_end":36}},{"value":"/ let wat = r#\"","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":354,"byte_end":371,"line_start":13,"line_end":13,"column_start":1,"column_end":18}},{"value":"/     (module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":372,"byte_end":387,"line_start":14,"line_end":14,"column_start":1,"column_end":16}},{"value":"/         (func $foo)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":388,"byte_end":411,"line_start":15,"line_end":15,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":412,"byte_end":415,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/         (func (export \"bar\")","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":416,"byte_end":448,"line_start":17,"line_end":17,"column_start":1,"column_end":33}},{"value":"/             call $foo","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":449,"byte_end":474,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/         )","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":475,"byte_end":488,"line_start":19,"line_end":19,"column_start":1,"column_end":14}},{"value":"/     )","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":489,"byte_end":498,"line_start":20,"line_end":20,"column_start":1,"column_end":10}},{"value":"/ \"#;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":499,"byte_end":506,"line_start":21,"line_end":21,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":507,"byte_end":510,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ let binary = wat::parse_str(wat)?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":511,"byte_end":549,"line_start":23,"line_end":23,"column_start":1,"column_end":39}},{"value":"/ // ...","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":550,"byte_end":560,"line_start":24,"line_end":24,"column_start":1,"column_end":11}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":561,"byte_end":573,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":574,"byte_end":581,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":582,"byte_end":589,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":590,"byte_end":593,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Parse an on-disk file:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":594,"byte_end":620,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":621,"byte_end":624,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":625,"byte_end":632,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/ # fn foo() -> wat::Result<()> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":633,"byte_end":668,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/ let binary = wat::parse_file(\"./foo.wat\")?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":669,"byte_end":716,"line_start":33,"line_end":33,"column_start":1,"column_end":48}},{"value":"/ // ...","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":717,"byte_end":727,"line_start":34,"line_end":34,"column_start":1,"column_end":11}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":728,"byte_end":740,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":741,"byte_end":748,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":749,"byte_end":756,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":757,"byte_end":760,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ ## Evolution of the WAT Format","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":761,"byte_end":795,"line_start":39,"line_end":39,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":796,"byte_end":799,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ WebAssembly, and the WAT format, are an evolving specification. Features are","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":800,"byte_end":880,"line_start":41,"line_end":41,"column_start":1,"column_end":81}},{"value":"/ added to WAT, WAT changes, and sometimes WAT breaks. The policy of this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":881,"byte_end":956,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ crate is that it will always follow the [official specification][wat] for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":957,"byte_end":1034,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/ WAT files.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1035,"byte_end":1049,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1050,"byte_end":1053,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Future WebAssembly features will be accepted to this parser **and they will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1054,"byte_end":1133,"line_start":46,"line_end":46,"column_start":1,"column_end":80}},{"value":"/ not require a feature gate to opt-in**. All implemented WebAssembly features","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1134,"byte_end":1214,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/ will be enabled at all times. Using a future WebAssembly feature in the WAT","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1215,"byte_end":1294,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ format may cause breakage because while specifications are in development","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1295,"byte_end":1372,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ the WAT syntax (and/or binary encoding) will often change. This crate will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1373,"byte_end":1451,"line_start":50,"line_end":50,"column_start":1,"column_end":79}},{"value":"/ do its best to keep up with these proposals, but breaking textual changes","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1452,"byte_end":1529,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ will be published as non-breaking semver changes to this crate.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1530,"byte_end":1597,"line_start":52,"line_end":52,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1598,"byte_end":1601,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Stability","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1602,"byte_end":1618,"line_start":54,"line_end":54,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1619,"byte_end":1622,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This crate is intended to be a very stable shim over the `wast` crate","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1623,"byte_end":1696,"line_start":56,"line_end":56,"column_start":1,"column_end":74}},{"value":"/ which is expected to be much more unstable. The `wast` crate contains","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1697,"byte_end":1770,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ AST data structures for parsing `*.wat` files and they will evolve was the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1771,"byte_end":1849,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/ WAT and WebAssembly specifications evolve over time.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1850,"byte_end":1906,"line_start":59,"line_end":59,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1907,"byte_end":1910,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ This crate is currently at version 1.x.y, and it is intended that it will","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1911,"byte_end":1988,"line_start":61,"line_end":61,"column_start":1,"column_end":78}},{"value":"/ remain here for quite some time. Breaking changes to the WAT format will be","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":1989,"byte_end":2068,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/ landed as a non-semver-breaking version change in this crate. This crate","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2069,"byte_end":2145,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"/ will always follow the [official specification for WAT][wat].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2146,"byte_end":2211,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2212,"byte_end":2215,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ [wat]: http://webassembly.github.io/spec/core/text/index.html","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2216,"byte_end":2281,"line_start":66,"line_end":66,"column_start":1,"column_end":66}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2283,"byte_end":2305,"line_start":68,"line_end":68,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":12},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3034,"byte_end":3044,"line_start":98,"line_end":98,"column_start":8,"column_end":18},"name":"parse_file","qualname":"::parse_file","value":"pub fn parse_file<impl AsRef<Path>: AsRef<Path>>(impl AsRef<Path>)\n-> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a file on disk as a [WebAssembly Text format][wat] file, or a binary\n WebAssembly file","sig":null,"attributes":[{"value":"/ Parses a file on disk as a [WebAssembly Text format][wat] file, or a binary","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2429,"byte_end":2508,"line_start":76,"line_end":76,"column_start":1,"column_end":80}},{"value":"/ WebAssembly file","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2509,"byte_end":2529,"line_start":77,"line_end":77,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2530,"byte_end":2533,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ This function will read the bytes on disk and delegate them to the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2534,"byte_end":2604,"line_start":79,"line_end":79,"column_start":1,"column_end":71}},{"value":"/ [`parse_bytes`] function. For more information on the behavior of parsing","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2605,"byte_end":2682,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/ see [`parse_bytes`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2683,"byte_end":2707,"line_start":81,"line_end":81,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2708,"byte_end":2711,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2712,"byte_end":2724,"line_start":83,"line_end":83,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2725,"byte_end":2728,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ For information about errors, see the [`parse_bytes`] documentation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2729,"byte_end":2801,"line_start":85,"line_end":85,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2802,"byte_end":2805,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2806,"byte_end":2820,"line_start":87,"line_end":87,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2821,"byte_end":2824,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2825,"byte_end":2832,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ # fn foo() -> wat::Result<()> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2833,"byte_end":2868,"line_start":90,"line_end":90,"column_start":1,"column_end":36}},{"value":"/ let binary = wat::parse_file(\"./foo.wat\")?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2869,"byte_end":2916,"line_start":91,"line_end":91,"column_start":1,"column_end":48}},{"value":"/ // ...","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2917,"byte_end":2927,"line_start":92,"line_end":92,"column_start":1,"column_end":11}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2928,"byte_end":2940,"line_start":93,"line_end":93,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2941,"byte_end":2948,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2949,"byte_end":2956,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2957,"byte_end":2960,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ [wat]: http://webassembly.github.io/spec/core/text/index.html","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":2961,"byte_end":3026,"line_start":97,"line_end":97,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":16},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5107,"byte_end":5118,"line_start":157,"line_end":157,"column_start":8,"column_end":19},"name":"parse_bytes","qualname":"::parse_bytes","value":"pub fn parse_bytes(&[u8]) -> Result<Cow<, [u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Parses in-memory bytes as either the [WebAssembly Text format][wat], or a\n binary WebAssembly module.","sig":null,"attributes":[{"value":"/ Parses in-memory bytes as either the [WebAssembly Text format][wat], or a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3524,"byte_end":3601,"line_start":118,"line_end":118,"column_start":1,"column_end":78}},{"value":"/ binary WebAssembly module.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3602,"byte_end":3632,"line_start":119,"line_end":119,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3633,"byte_end":3636,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This function will attempt to interpret the given bytes as one of two","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3637,"byte_end":3710,"line_start":121,"line_end":121,"column_start":1,"column_end":74}},{"value":"/ options:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3711,"byte_end":3723,"line_start":122,"line_end":122,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3724,"byte_end":3727,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ * A utf-8 string which is a `*.wat` file to be parsed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3728,"byte_end":3786,"line_start":124,"line_end":124,"column_start":1,"column_end":59}},{"value":"/ * A binary WebAssembly file starting with `b\"\\0asm\"`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3787,"byte_end":3843,"line_start":125,"line_end":125,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3844,"byte_end":3847,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ If the input is a string then it will be parsed as `*.wat`, and then after","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3848,"byte_end":3926,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/ parsing it will be encoded back into a WebAssembly binary module. If the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":3927,"byte_end":4003,"line_start":128,"line_end":128,"column_start":1,"column_end":77}},{"value":"/ input is a binary that starts with `b\"\\0asm\"` it will be returned verbatim.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4004,"byte_end":4083,"line_start":129,"line_end":129,"column_start":1,"column_end":80}},{"value":"/ Everything that doesn't start with `b\"\\0asm\"` will be parsed as a utf-8","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4084,"byte_end":4159,"line_start":130,"line_end":130,"column_start":1,"column_end":76}},{"value":"/ `*.wat` file, returning errors as appropriate.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4160,"byte_end":4210,"line_start":131,"line_end":131,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4211,"byte_end":4214,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ For more information about parsing wat files, see [`parse_str`].","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4215,"byte_end":4283,"line_start":133,"line_end":133,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4284,"byte_end":4287,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4288,"byte_end":4300,"line_start":135,"line_end":135,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4301,"byte_end":4304,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ In addition to all of the errors that can be returned from [`parse_str`],","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4305,"byte_end":4382,"line_start":137,"line_end":137,"column_start":1,"column_end":78}},{"value":"/ this function will also return an error if the input does not start with","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4383,"byte_end":4459,"line_start":138,"line_end":138,"column_start":1,"column_end":77}},{"value":"/ `b\"\\0asm\"` and is invalid utf-8. (failed to even try to call [`parse_str`]).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4460,"byte_end":4540,"line_start":139,"line_end":139,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4541,"byte_end":4544,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4545,"byte_end":4559,"line_start":141,"line_end":141,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4560,"byte_end":4563,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4564,"byte_end":4571,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/ # fn foo() -> wat::Result<()> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4572,"byte_end":4607,"line_start":144,"line_end":144,"column_start":1,"column_end":36}},{"value":"/ // Parsing bytes that are actually `*.wat` files","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4608,"byte_end":4660,"line_start":145,"line_end":145,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(&*wat::parse_bytes(b\"(module)\")?, b\"\\0asm\\x01\\0\\0\\0\");","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4661,"byte_end":4730,"line_start":146,"line_end":146,"column_start":1,"column_end":70}},{"value":"/ assert!(wat::parse_bytes(b\"module\").is_err());","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4731,"byte_end":4781,"line_start":147,"line_end":147,"column_start":1,"column_end":51}},{"value":"/ assert!(wat::parse_bytes(b\"binary\\0file\\0\\that\\0is\\0not\\0wat\").is_err());","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4782,"byte_end":4859,"line_start":148,"line_end":148,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4860,"byte_end":4863,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ // Pass through binaries that look like real wasm files","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4864,"byte_end":4923,"line_start":150,"line_end":150,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(&*wat::parse_bytes(b\"\\0asm\\x01\\0\\0\\0\")?, b\"\\0asm\\x01\\0\\0\\0\");","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":4924,"byte_end":5000,"line_start":151,"line_end":151,"column_start":1,"column_end":77}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5001,"byte_end":5013,"line_start":152,"line_end":152,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5014,"byte_end":5021,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5022,"byte_end":5029,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5030,"byte_end":5033,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ [wat]: http://webassembly.github.io/spec/core/text/index.html","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5034,"byte_end":5099,"line_start":156,"line_end":156,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6761,"byte_end":6770,"line_start":214,"line_end":214,"column_start":8,"column_end":17},"name":"parse_str","qualname":"::parse_str","value":"pub fn parse_str<impl AsRef<str>: AsRef<str>>(impl AsRef<str>)\n-> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an in-memory string as the [WebAssembly Text format][wat], returning\n the file as a binary WebAssembly file.","sig":null,"attributes":[{"value":"/ Parses an in-memory string as the [WebAssembly Text format][wat], returning","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5529,"byte_end":5608,"line_start":172,"line_end":172,"column_start":1,"column_end":80}},{"value":"/ the file as a binary WebAssembly file.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5609,"byte_end":5651,"line_start":173,"line_end":173,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5652,"byte_end":5655,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ This function is intended to be a stable convenience function for parsing a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5656,"byte_end":5735,"line_start":175,"line_end":175,"column_start":1,"column_end":80}},{"value":"/ wat file into a WebAssembly binary file. This is a high-level operation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5736,"byte_end":5811,"line_start":176,"line_end":176,"column_start":1,"column_end":76}},{"value":"/ which does not expose any parsing internals, for that you'll want to use the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5812,"byte_end":5892,"line_start":177,"line_end":177,"column_start":1,"column_end":81}},{"value":"/ `wast` crate.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5893,"byte_end":5910,"line_start":178,"line_end":178,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5911,"byte_end":5914,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5915,"byte_end":5927,"line_start":180,"line_end":180,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5928,"byte_end":5931,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This function can fail for a number of reasons, including (but not limited","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":5932,"byte_end":6010,"line_start":182,"line_end":182,"column_start":1,"column_end":79}},{"value":"/ to):","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6011,"byte_end":6019,"line_start":183,"line_end":183,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6020,"byte_end":6023,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ * The `wat` input may fail to lex, such as having invalid tokens or syntax","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6024,"byte_end":6102,"line_start":185,"line_end":185,"column_start":1,"column_end":79}},{"value":"/ * The `wat` input may fail to parse, such as having incorrect syntactical","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6103,"byte_end":6180,"line_start":186,"line_end":186,"column_start":1,"column_end":78}},{"value":"/   structure","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6181,"byte_end":6196,"line_start":187,"line_end":187,"column_start":1,"column_end":16}},{"value":"/ * The `wat` input may contain names that could not be resolved","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6197,"byte_end":6263,"line_start":188,"line_end":188,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6264,"byte_end":6267,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6268,"byte_end":6282,"line_start":190,"line_end":190,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6283,"byte_end":6286,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6287,"byte_end":6294,"line_start":192,"line_end":192,"column_start":1,"column_end":8}},{"value":"/ # fn foo() -> wat::Result<()> {","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6295,"byte_end":6330,"line_start":193,"line_end":193,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(wat::parse_str(\"(module)\")?, b\"\\0asm\\x01\\0\\0\\0\");","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6331,"byte_end":6395,"line_start":194,"line_end":194,"column_start":1,"column_end":65}},{"value":"/ assert!(wat::parse_str(\"module\").is_err());","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6396,"byte_end":6443,"line_start":195,"line_end":195,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6444,"byte_end":6447,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ let wat = r#\"","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6448,"byte_end":6465,"line_start":197,"line_end":197,"column_start":1,"column_end":18}},{"value":"/     (module","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6466,"byte_end":6481,"line_start":198,"line_end":198,"column_start":1,"column_end":16}},{"value":"/         (func $foo)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6482,"byte_end":6505,"line_start":199,"line_end":199,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6506,"byte_end":6509,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/         (func (export \"bar\")","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6510,"byte_end":6542,"line_start":201,"line_end":201,"column_start":1,"column_end":33}},{"value":"/             call $foo","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6543,"byte_end":6568,"line_start":202,"line_end":202,"column_start":1,"column_end":26}},{"value":"/         )","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6569,"byte_end":6582,"line_start":203,"line_end":203,"column_start":1,"column_end":14}},{"value":"/     )","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6583,"byte_end":6592,"line_start":204,"line_end":204,"column_start":1,"column_end":10}},{"value":"/ \"#;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6593,"byte_end":6600,"line_start":205,"line_end":205,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6601,"byte_end":6604,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ let binary = wat::parse_str(wat)?;","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6605,"byte_end":6643,"line_start":207,"line_end":207,"column_start":1,"column_end":39}},{"value":"/ // ...","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6644,"byte_end":6654,"line_start":208,"line_end":208,"column_start":1,"column_end":11}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6655,"byte_end":6667,"line_start":209,"line_end":209,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6668,"byte_end":6675,"line_start":210,"line_end":210,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6676,"byte_end":6683,"line_start":211,"line_end":211,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6684,"byte_end":6687,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ [wat]: http://webassembly.github.io/spec/core/text/index.html","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":6688,"byte_end":6753,"line_start":213,"line_end":213,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7197,"byte_end":7203,"line_start":225,"line_end":225,"column_start":10,"column_end":16},"name":"Result","qualname":"::Result","value":"std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A convenience type definition for `Result` where the error is [`Error`]\n","sig":null,"attributes":[{"value":"/ A convenience type definition for `Result` where the error is [`Error`]","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7112,"byte_end":7187,"line_start":224,"line_end":224,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7630,"byte_end":7635,"line_start":237,"line_end":237,"column_start":12,"column_end":17},"name":"Error","qualname":"::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":36}],"decl_id":null,"docs":" Errors from this crate related to parsing WAT files","sig":null,"attributes":[{"value":"/ Errors from this crate related to parsing WAT files","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7241,"byte_end":7296,"line_start":227,"line_end":227,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7297,"byte_end":7300,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ An error can during example phases like:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7301,"byte_end":7345,"line_start":229,"line_end":229,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7346,"byte_end":7349,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ * Lexing can fail if the document is syntactically invalid.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7350,"byte_end":7413,"line_start":231,"line_end":231,"column_start":1,"column_end":64}},{"value":"/ * A string may not be utf-8","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7414,"byte_end":7445,"line_start":232,"line_end":232,"column_start":1,"column_end":32}},{"value":"/ * The syntactical structure of the wat file may be invalid","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7446,"byte_end":7508,"line_start":233,"line_end":233,"column_start":1,"column_end":63}},{"value":"/ * The wat file may be semantically invalid such as having name resolution","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7509,"byte_end":7586,"line_start":234,"line_end":234,"column_start":1,"column_end":78}},{"value":"/   failures","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7587,"byte_end":7601,"line_start":235,"line_end":235,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":8363,"byte_end":8371,"line_start":268,"line_end":268,"column_start":12,"column_end":20},"name":"set_path","qualname":"<Error>::set_path","value":"pub fn set_path<P: AsRef<Path>>(&mut Self, P)","parent":null,"children":[],"decl_id":null,"docs":" To provide a more useful error this function can be used to set\n the file name that this error is associated with.","sig":null,"attributes":[{"value":"/ To provide a more useful error this function can be used to set","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":8105,"byte_end":8172,"line_start":263,"line_end":263,"column_start":5,"column_end":72}},{"value":"/ the file name that this error is associated with.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":8177,"byte_end":8230,"line_start":264,"line_end":264,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":8235,"byte_end":8238,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ The `file` here will be stored in this error and later rendered in the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":8243,"byte_end":8317,"line_start":266,"line_end":266,"column_start":5,"column_end":79}},{"value":"/ `Display` implementation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":8322,"byte_end":8351,"line_start":267,"line_end":267,"column_start":5,"column_end":34}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7880,"byte_end":7885,"line_start":254,"line_end":254,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":8719,"byte_end":8724,"line_start":278,"line_end":278,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":9400,"byte_end":9405,"line_start":298,"line_end":298,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":7880,"byte_end":7885,"line_start":254,"line_end":254,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":35},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":8719,"byte_end":8724,"line_start":278,"line_end":278,"column_start":23,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":35},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\wat-1.0.37\\src\\lib.rs","byte_start":9400,"byte_end":9405,"line_start":298,"line_end":298,"column_start":28,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":35},"to":{"krate":1,"index":1725}}]}