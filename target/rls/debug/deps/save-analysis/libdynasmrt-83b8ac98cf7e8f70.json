{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0","program":"C:\\Users\\Simon Palmer\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","dynasmrt","--edition=2018","C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=83b8ac98cf7e8f70","-C","extra-filename=-83b8ac98cf7e8f70","--out-dir","c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","--extern","byteorder=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libbyteorder-cd75c56f3bf54b4b.rmeta","--extern","dynasm=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\dynasm-ba1882c6f1e81739.dll","--extern","memmap2=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libmemmap2-0c48f52e2f50ab1e.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Simon Palmer\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libdynasmrt-83b8ac98cf7e8f70.rmeta"},"prelude":{"crate_id":{"name":"dynasmrt","disambiguator":[16936194096863396217,9749816438284508158]},"crate_root":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src","external_crates":[{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2134305066550747688,1377703208702874155]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[1322159461575500717,8297198428669169011]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2376346800744392852,12342541482992122530]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[14946502858004023242,6637215598610016319]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5305136910335682758,6890491777619641650]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[8079093424489733033,9678018066858265018]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8191054904896780843,65190916132359678]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17454577518104061478,8473922882117178851]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14702801963282246562,3385633331338644346]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4483555191844012602,617965746000623535]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[6496369475756502088,8603909216288097824]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[8790568169648576788,8899032378407077408]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","num":13,"id":{"name":"memmap2","disambiguator":[2223241974175761963,351645028161603182]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","num":14,"id":{"name":"byteorder","disambiguator":[9688786557185271852,5198782522981442274]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","num":15,"id":{"name":"dynasm","disambiguator":[13714476596256106639,7995481790948980304]}}],"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":0,"byte_end":40535,"line_start":1,"line_end":1085,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77614,"byte_end":77616,"line_start":107,"line_end":107,"column_start":22,"column_end":24},"alias_span":null,"name":"Rh","value":"","parent":{"krate":0,"index":169}},{"kind":"Use","ref_id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77618,"byte_end":77620,"line_start":107,"line_end":107,"column_start":26,"column_end":28},"alias_span":null,"name":"Rf","value":"","parent":{"krate":0,"index":169}},{"kind":"Use","ref_id":{"krate":0,"index":955},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77622,"byte_end":77624,"line_start":107,"line_end":107,"column_start":30,"column_end":32},"alias_span":null,"name":"Rm","value":"","parent":{"krate":0,"index":169}},{"kind":"Use","ref_id":{"krate":0,"index":1041},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77626,"byte_end":77628,"line_start":107,"line_end":107,"column_start":34,"column_end":36},"alias_span":null,"name":"Rs","value":"","parent":{"krate":0,"index":169}},{"kind":"Use","ref_id":{"krate":0,"index":1121},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77630,"byte_end":77632,"line_start":107,"line_end":107,"column_start":38,"column_end":40},"alias_span":null,"name":"RD","value":"","parent":{"krate":0,"index":169}},{"kind":"Use","ref_id":{"krate":0,"index":1188},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77634,"byte_end":77636,"line_start":107,"line_end":107,"column_start":42,"column_end":44},"alias_span":null,"name":"RB","value":"","parent":{"krate":0,"index":169}},{"kind":"Use","ref_id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":853,"byte_end":869,"line_start":32,"line_end":32,"column_start":22,"column_end":38},"alias_span":null,"name":"ExecutableBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":17696},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":888,"byte_end":894,"line_start":33,"line_end":33,"column_start":18,"column_end":24},"alias_span":null,"name":"dynasm","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":15,"index":17698},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":896,"byte_end":912,"line_start":33,"line_end":33,"column_start":26,"column_end":42},"alias_span":null,"name":"dynasm_backwards","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":0,"byte_end":40535,"line_start":1,"line_end":1085,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":36},{"krate":0,"index":138},{"krate":0,"index":169},{"krate":0,"index":198},{"krate":0,"index":219},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":263},{"krate":0,"index":1889},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":1905},{"krate":0,"index":274},{"krate":0,"index":1582},{"krate":0,"index":1606},{"krate":0,"index":1604},{"krate":0,"index":1603},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1590},{"krate":0,"index":1588},{"krate":0,"index":1585},{"krate":0,"index":1608},{"krate":0,"index":1624},{"krate":0,"index":1622},{"krate":0,"index":1621},{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1611},{"krate":0,"index":277},{"krate":0,"index":1626},{"krate":0,"index":1630},{"krate":0,"index":1628},{"krate":0,"index":279},{"krate":0,"index":1632},{"krate":0,"index":1655},{"krate":0,"index":1653},{"krate":0,"index":1652},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1642},{"krate":0,"index":281},{"krate":0,"index":1657},{"krate":0,"index":1688},{"krate":0,"index":1686},{"krate":0,"index":1685},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1675},{"krate":0,"index":283},{"krate":0,"index":1690},{"krate":0,"index":1711},{"krate":0,"index":1709},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":285},{"krate":0,"index":287},{"krate":0,"index":289},{"krate":0,"index":302},{"krate":0,"index":1713},{"krate":0,"index":1717},{"krate":0,"index":1715},{"krate":0,"index":317},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":328},{"krate":0,"index":1719},{"krate":0,"index":1726},{"krate":0,"index":332},{"krate":0,"index":341},{"krate":0,"index":345},{"krate":0,"index":350},{"krate":0,"index":355},{"krate":0,"index":1729},{"krate":0,"index":1737},{"krate":0,"index":366},{"krate":0,"index":381},{"krate":0,"index":385},{"krate":0,"index":390},{"krate":0,"index":395},{"krate":0,"index":1740},{"krate":0,"index":1751},{"krate":0,"index":406},{"krate":0,"index":413},{"krate":0,"index":418},{"krate":0,"index":424},{"krate":0,"index":430},{"krate":0,"index":1755},{"krate":0,"index":1760},{"krate":0,"index":442},{"krate":0,"index":448},{"krate":0,"index":453},{"krate":0,"index":457},{"krate":0,"index":462}],"decl_id":null,"docs":" This crate provides runtime support for dynasm-rs. It contains traits that document the interface used by the dynasm proc_macro to generate code,\n Assemblers that implement these traits, and relocation models for the various supported architectures. Additionally, it also provides the tools\n to write your own Assemblers using these components.\n","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/ This crate provides runtime support for dynasm-rs. It contains traits that document the interface used by the dynasm proc_macro to generate code,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":24,"byte_end":173,"line_start":3,"line_end":3,"column_start":1,"column_end":150}},{"value":"/ Assemblers that implement these traits, and relocation models for the various supported architectures. Additionally, it also provides the tools","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":174,"byte_end":321,"line_start":4,"line_end":4,"column_start":1,"column_end":148}},{"value":"/ to write your own Assemblers using these components.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":322,"byte_end":378,"line_start":5,"line_end":5,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mmap","qualname":"::mmap","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":1773},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34}],"decl_id":null,"docs":" This module implements some wrappers around Mmap/MmapMut to also support a cheap \"empty\" variant.\n","sig":null,"attributes":[{"value":"/ This module implements some wrappers around Mmap/MmapMut to also support a cheap \"empty\" variant.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":40537,"byte_end":40638,"line_start":1,"line_end":1,"column_start":1,"column_end":102}}]},{"kind":"Struct","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":40990,"byte_end":41006,"line_start":14,"line_end":14,"column_start":12,"column_end":28},"name":"ExecutableBuffer","qualname":"::mmap::ExecutableBuffer","value":"ExecutableBuffer {  }","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466}],"decl_id":null,"docs":" A structure holding a buffer of executable memory. It also derefs to a `&[u8]`.\n This structure does not allocate when its size is 0.\n","sig":null,"attributes":[{"value":"/ A structure holding a buffer of executable memory. It also derefs to a `&[u8]`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":40821,"byte_end":40904,"line_start":11,"line_end":11,"column_start":1,"column_end":84}},{"value":"/ This structure does not allocate when its size is 0.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":40905,"byte_end":40961,"line_start":12,"line_end":12,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41358,"byte_end":41371,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"MutableBuffer","qualname":"::mmap::MutableBuffer","value":"MutableBuffer {  }","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" ExecutableBuffer equivalent that holds a buffer of mutable memory instead of executable memory. It also derefs to a `&mut [u8]`.\n This structure does not allocate when its size is 0.\n","sig":null,"attributes":[{"value":"/ ExecutableBuffer equivalent that holds a buffer of mutable memory instead of executable memory. It also derefs to a `&mut [u8]`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41140,"byte_end":41272,"line_start":21,"line_end":21,"column_start":1,"column_end":133}},{"value":"/ This structure does not allocate when its size is 0.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41273,"byte_end":41329,"line_start":22,"line_end":22,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42164,"byte_end":42167,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"ptr","qualname":"<ExecutableBuffer>::ptr","value":"pub fn ptr(&Self, AssemblyOffset) -> *const u8","parent":null,"children":[],"decl_id":null,"docs":" Obtain a pointer into the executable memory from an offset into it.\n When an offset returned from `DynasmLabelApi::offset` is used, the resulting pointer\n will point to the start of the first instruction after the offset call,\n which can then be jumped or called to divert control flow into the executable\n buffer. Note that if this buffer is accessed through an Executor, these pointers\n will only be valid as long as its lock is held. When no locks are held,\n The assembler is free to relocate the executable buffer when it requires\n more memory than available.\n","sig":null,"attributes":[{"value":"/ Obtain a pointer into the executable memory from an offset into it.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41536,"byte_end":41607,"line_start":32,"line_end":32,"column_start":5,"column_end":76}},{"value":"/ When an offset returned from `DynasmLabelApi::offset` is used, the resulting pointer","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41612,"byte_end":41700,"line_start":33,"line_end":33,"column_start":5,"column_end":93}},{"value":"/ will point to the start of the first instruction after the offset call,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41705,"byte_end":41780,"line_start":34,"line_end":34,"column_start":5,"column_end":80}},{"value":"/ which can then be jumped or called to divert control flow into the executable","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41785,"byte_end":41866,"line_start":35,"line_end":35,"column_start":5,"column_end":86}},{"value":"/ buffer. Note that if this buffer is accessed through an Executor, these pointers","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41871,"byte_end":41955,"line_start":36,"line_end":36,"column_start":5,"column_end":89}},{"value":"/ will only be valid as long as its lock is held. When no locks are held,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41960,"byte_end":42035,"line_start":37,"line_end":37,"column_start":5,"column_end":80}},{"value":"/ The assembler is free to relocate the executable buffer when it requires","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42040,"byte_end":42116,"line_start":38,"line_end":38,"column_start":5,"column_end":81}},{"value":"/ more memory than available.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42121,"byte_end":42152,"line_start":39,"line_end":39,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42399,"byte_end":42402,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"new","qualname":"<ExecutableBuffer>::new","value":"pub fn new(usize) -> io::Result<ExecutableBuffer>","parent":null,"children":[],"decl_id":null,"docs":" Create a new executable buffer, backed by a buffer of size `size`.\n It will start with an initialized length of 0.\n","sig":null,"attributes":[{"value":"/ Create a new executable buffer, backed by a buffer of size `size`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42262,"byte_end":42332,"line_start":44,"line_end":44,"column_start":5,"column_end":75}},{"value":"/ It will start with an initialized length of 0.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42337,"byte_end":42387,"line_start":45,"line_end":45,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42746,"byte_end":42750,"line_start":60,"line_end":60,"column_start":12,"column_end":16},"name":"size","qualname":"<ExecutableBuffer>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Query the backing size of this executable buffer\n","sig":null,"attributes":[{"value":"/ Query the backing size of this executable buffer","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42682,"byte_end":42734,"line_start":59,"line_end":59,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42916,"byte_end":42924,"line_start":65,"line_end":65,"column_start":12,"column_end":20},"name":"make_mut","qualname":"<ExecutableBuffer>::make_mut","value":"pub fn make_mut(Self) -> io::Result<MutableBuffer>","parent":null,"children":[],"decl_id":null,"docs":" Change this executable buffer into a mutable buffer.\n","sig":null,"attributes":[{"value":"/ Change this executable buffer into a mutable buffer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":42848,"byte_end":42904,"line_start":64,"line_end":64,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43354,"byte_end":43357,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<MutableBuffer>::new","value":"pub fn new(usize) -> io::Result<MutableBuffer>","parent":null,"children":[],"decl_id":null,"docs":" Create a new mutable buffer, backed by a buffer of size `size`.\n It will start with an initialized length of 0.\n","sig":null,"attributes":[{"value":"/ Create a new mutable buffer, backed by a buffer of size `size`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43220,"byte_end":43287,"line_start":80,"line_end":80,"column_start":5,"column_end":72}},{"value":"/ It will start with an initialized length of 0.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43292,"byte_end":43342,"line_start":81,"line_end":81,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43679,"byte_end":43683,"line_start":96,"line_end":96,"column_start":12,"column_end":16},"name":"size","qualname":"<MutableBuffer>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Query the backing size of this mutable buffer\n","sig":null,"attributes":[{"value":"/ Query the backing size of this mutable buffer","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43618,"byte_end":43667,"line_start":95,"line_end":95,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43952,"byte_end":43959,"line_start":102,"line_end":102,"column_start":12,"column_end":19},"name":"set_len","qualname":"<MutableBuffer>::set_len","value":"pub fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the length of the usable part of this mutable buffer. The length\n should not be set larger than the allocated size, otherwise methods can panic.\n","sig":null,"attributes":[{"value":"/ Set the length of the usable part of this mutable buffer. The length","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43781,"byte_end":43853,"line_start":100,"line_end":100,"column_start":5,"column_end":77}},{"value":"/ should not be set larger than the allocated size, otherwise methods can panic.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43858,"byte_end":43940,"line_start":101,"line_end":101,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44097,"byte_end":44106,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"make_exec","qualname":"<MutableBuffer>::make_exec","value":"pub fn make_exec(Self) -> io::Result<ExecutableBuffer>","parent":null,"children":[],"decl_id":null,"docs":" Change this mutable buffer into an executable buffer.\n","sig":null,"attributes":[{"value":"/ Change this mutable buffer into an executable buffer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44028,"byte_end":44085,"line_start":106,"line_end":106,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"components","qualname":"::components","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":1791},{"krate":0,"index":49},{"krate":0,"index":1793},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":474},{"krate":0,"index":479},{"krate":0,"index":61},{"krate":0,"index":481},{"krate":0,"index":489},{"krate":0,"index":487},{"krate":0,"index":485},{"krate":0,"index":70},{"krate":0,"index":491},{"krate":0,"index":501},{"krate":0,"index":498},{"krate":0,"index":83},{"krate":0,"index":504},{"krate":0,"index":512},{"krate":0,"index":509},{"krate":0,"index":91},{"krate":0,"index":515},{"krate":0,"index":521},{"krate":0,"index":518},{"krate":0,"index":112},{"krate":0,"index":524},{"krate":0,"index":559},{"krate":0,"index":557},{"krate":0,"index":561},{"krate":0,"index":568},{"krate":0,"index":566},{"krate":0,"index":564},{"krate":0,"index":122}],"decl_id":null,"docs":" This module provides several reusable compoments for implementing assemblers\n","sig":null,"attributes":[{"value":"/ This module provides several reusable compoments for implementing assemblers","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":45355,"byte_end":45435,"line_start":1,"line_end":1,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":474},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":45919,"byte_end":45932,"line_start":16,"line_end":16,"column_start":12,"column_end":25},"name":"MemoryManager","qualname":"::components::MemoryManager","value":"MemoryManager {  }","parent":null,"children":[{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478}],"decl_id":null,"docs":" This struct implements a protection-swapping assembling buffer\n","sig":null,"attributes":[{"value":"/ This struct implements a protection-swapping assembling buffer","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":45824,"byte_end":45890,"line_start":14,"line_end":14,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":46427,"byte_end":46430,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<MemoryManager>::new","value":"pub fn new(usize) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new memory manager, with `initial_mmap_size` data allocated\n","sig":null,"attributes":[{"value":"/ Create a new memory manager, with `initial_mmap_size` data allocated","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":46343,"byte_end":46415,"line_start":30,"line_end":30,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":46894,"byte_end":46903,"line_start":44,"line_end":44,"column_start":12,"column_end":21},"name":"committed","qualname":"<MemoryManager>::committed","value":"pub fn committed(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the amount of bytes already committed to the manager\n","sig":null,"attributes":[{"value":"/ Returns the amount of bytes already committed to the manager","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":46818,"byte_end":46882,"line_start":43,"line_end":43,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":47038,"byte_end":47053,"line_start":49,"line_end":49,"column_start":12,"column_end":27},"name":"execbuffer_addr","qualname":"<MemoryManager>::execbuffer_addr","value":"pub fn execbuffer_addr(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current start address of the managed executable memory\n","sig":null,"attributes":[{"value":"/ Returns the current start address of the managed executable memory","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":46956,"byte_end":47026,"line_start":48,"line_end":48,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":47282,"byte_end":47288,"line_start":55,"line_end":55,"column_start":12,"column_end":18},"name":"commit","qualname":"<MemoryManager>::commit","value":"pub fn commit<F>(&mut Self, &mut Vec<u8>, F) where\nF: FnOnce(&mut [u8], usize, usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Commits the data from `new` into the managed memory, calling `f` when the buffer is moved to fix anything\n that relies on the address of the buffer\n","sig":null,"attributes":[{"value":"/ Commits the data from `new` into the managed memory, calling `f` when the buffer is moved to fix anything","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":47112,"byte_end":47221,"line_start":53,"line_end":53,"column_start":5,"column_end":114}},{"value":"/ that relies on the address of the buffer","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":47226,"byte_end":47270,"line_start":54,"line_end":54,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":49313,"byte_end":49318,"line_start":106,"line_end":106,"column_start":12,"column_end":17},"name":"write","qualname":"<MemoryManager>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, ExecutableBuffer>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the internal memory buffer mutably\n","sig":null,"attributes":[{"value":"/ Borrow the internal memory buffer mutably","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":49256,"byte_end":49301,"line_start":105,"line_end":105,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":49487,"byte_end":49495,"line_start":111,"line_end":111,"column_start":12,"column_end":20},"name":"finalize","qualname":"<MemoryManager>::finalize","value":"pub fn finalize(Self) -> Result<ExecutableBuffer, Self>","parent":null,"children":[],"decl_id":null,"docs":" finalizes the currently committed part of the buffer.\n","sig":null,"attributes":[{"value":"/ finalizes the currently committed part of the buffer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":49418,"byte_end":49475,"line_start":110,"line_end":110,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":49873,"byte_end":49879,"line_start":122,"line_end":122,"column_start":12,"column_end":18},"name":"reader","qualname":"<MemoryManager>::reader","value":"pub fn reader(&Self) -> Arc<RwLock<ExecutableBuffer>>","parent":null,"children":[],"decl_id":null,"docs":" Create an atomically refcounted reference to the internal executable buffer\n","sig":null,"attributes":[{"value":"/ Create an atomically refcounted reference to the internal executable buffer","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":49782,"byte_end":49861,"line_start":121,"line_end":121,"column_start":5,"column_end":84}}]},{"kind":"Struct","id":{"krate":0,"index":481},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":50226,"byte_end":50239,"line_start":132,"line_end":132,"column_start":12,"column_end":25},"name":"LabelRegistry","qualname":"::components::LabelRegistry","value":"LabelRegistry {  }","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"decl_id":null,"docs":" A registry of labels. Contains all necessessities for keeping track of dynasm labels.\n This is useful when implementing your own assembler and can also be used to query\n assemblers for the offsets of labels.\n","sig":null,"attributes":[{"value":"/ A registry of labels. Contains all necessessities for keeping track of dynasm labels.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":49964,"byte_end":50053,"line_start":128,"line_end":128,"column_start":1,"column_end":90}},{"value":"/ This is useful when implementing your own assembler and can also be used to query","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":50054,"byte_end":50139,"line_start":129,"line_end":129,"column_start":1,"column_end":86}},{"value":"/ assemblers for the offsets of labels.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":50140,"byte_end":50181,"line_start":130,"line_end":130,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":50616,"byte_end":50619,"line_start":143,"line_end":143,"column_start":12,"column_end":15},"name":"new","qualname":"<LabelRegistry>::new","value":"pub fn new() -> LabelRegistry","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty label registry\n","sig":null,"attributes":[{"value":"/ Create a new, empty label registry","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":50566,"byte_end":50604,"line_start":142,"line_end":142,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":50856,"byte_end":50873,"line_start":152,"line_end":152,"column_start":12,"column_end":29},"name":"new_dynamic_label","qualname":"<LabelRegistry>::new_dynamic_label","value":"pub fn new_dynamic_label(&mut Self) -> DynamicLabel","parent":null,"children":[],"decl_id":null,"docs":" Create a new dynamic label id\n","sig":null,"attributes":[{"value":"/ Create a new dynamic label id","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":50811,"byte_end":50844,"line_start":151,"line_end":151,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":51097,"byte_end":51111,"line_start":159,"line_end":159,"column_start":12,"column_end":26},"name":"define_dynamic","qualname":"<LabelRegistry>::define_dynamic","value":"pub fn define_dynamic(&mut Self, DynamicLabel, AssemblyOffset)\n-> Result<(), DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Define a the dynamic label `id` to be located at `offset`.\n","sig":null,"attributes":[{"value":"/ Define a the dynamic label `id` to be located at `offset`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":51023,"byte_end":51085,"line_start":158,"line_end":158,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":51495,"byte_end":51508,"line_start":170,"line_end":170,"column_start":12,"column_end":25},"name":"define_global","qualname":"<LabelRegistry>::define_global","value":"pub fn define_global(&mut Self, &'static str, AssemblyOffset)\n-> Result<(), DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Define a the global label `name` to be located at `offset`.\n","sig":null,"attributes":[{"value":"/ Define a the global label `name` to be located at `offset`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":51420,"byte_end":51483,"line_start":169,"line_end":169,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":51933,"byte_end":51945,"line_start":181,"line_end":181,"column_start":12,"column_end":24},"name":"define_local","qualname":"<LabelRegistry>::define_local","value":"pub fn define_local(&mut Self, &'static str, AssemblyOffset)","parent":null,"children":[],"decl_id":null,"docs":" Define a the local label `name` to be located at `offset`.\n","sig":null,"attributes":[{"value":"/ Define a the local label `name` to be located at `offset`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":51859,"byte_end":51921,"line_start":180,"line_end":180,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":52161,"byte_end":52176,"line_start":186,"line_end":186,"column_start":12,"column_end":27},"name":"resolve_dynamic","qualname":"<LabelRegistry>::resolve_dynamic","value":"pub fn resolve_dynamic(&Self, DynamicLabel)\n-> Result<AssemblyOffset, DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset at which the dynamic label `id` was defined, if one was defined.\n","sig":null,"attributes":[{"value":"/ Returns the offset at which the dynamic label `id` was defined, if one was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":52062,"byte_end":52149,"line_start":185,"line_end":185,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":52474,"byte_end":52488,"line_start":191,"line_end":191,"column_start":12,"column_end":26},"name":"resolve_global","qualname":"<LabelRegistry>::resolve_global","value":"pub fn resolve_global(&Self, &'static str)\n-> Result<AssemblyOffset, DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset at which the global label `name` was defined, if one was defined.\n","sig":null,"attributes":[{"value":"/ Returns the offset at which the global label `name` was defined, if one was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":52374,"byte_end":52462,"line_start":190,"line_end":190,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":52789,"byte_end":52802,"line_start":196,"line_end":196,"column_start":12,"column_end":25},"name":"resolve_local","qualname":"<LabelRegistry>::resolve_local","value":"pub fn resolve_local(&Self, &'static str)\n-> Result<AssemblyOffset, DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Returns the offset at which the last local label named `id` was defined, if one was defined.\n","sig":null,"attributes":[{"value":"/ Returns the offset at which the last local label named `id` was defined, if one was defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":52681,"byte_end":52777,"line_start":195,"line_end":195,"column_start":5,"column_end":101}}]},{"kind":"Struct","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53098,"byte_end":53106,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"PatchLoc","qualname":"::components::PatchLoc","value":"PatchLoc { location, field_offset, ref_offset, relocation, target_offset }","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":497}],"decl_id":null,"docs":" An abstraction of a relocation of type `R`, located at `location`.\n","sig":null,"attributes":[{"value":"/ An abstraction of a relocation of type `R`, located at `location`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":52992,"byte_end":53062,"line_start":202,"line_end":202,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":493},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53196,"byte_end":53204,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"name":"location","qualname":"::components::PatchLoc::location","value":"AssemblyOffset","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" The AssemblyOffset at which this relocation was emitted\n","sig":null,"attributes":[{"value":"/ The AssemblyOffset at which this relocation was emitted","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53128,"byte_end":53187,"line_start":205,"line_end":205,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53322,"byte_end":53334,"line_start":208,"line_end":208,"column_start":9,"column_end":21},"name":"field_offset","qualname":"::components::PatchLoc::field_offset","value":"u8","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" The offset, backwards, from location that the actual field to be modified starts at\n","sig":null,"attributes":[{"value":"/ The offset, backwards, from location that the actual field to be modified starts at","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53226,"byte_end":53313,"line_start":207,"line_end":207,"column_start":5,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":495},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53483,"byte_end":53493,"line_start":210,"line_end":210,"column_start":9,"column_end":19},"name":"ref_offset","qualname":"::components::PatchLoc::ref_offset","value":"u8","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" The offset, backwards, to be subtracted from location to get the address that the relocation should be calculated relative to.\n","sig":null,"attributes":[{"value":"/ The offset, backwards, to be subtracted from location to get the address that the relocation should be calculated relative to.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53344,"byte_end":53474,"line_start":209,"line_end":209,"column_start":5,"column_end":135}}]},{"kind":"Field","id":{"krate":0,"index":496},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53553,"byte_end":53563,"line_start":212,"line_end":212,"column_start":9,"column_end":19},"name":"relocation","qualname":"::components::PatchLoc::relocation","value":"R","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" The type of relocation to be emitted.\n","sig":null,"attributes":[{"value":"/ The type of relocation to be emitted.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53503,"byte_end":53544,"line_start":211,"line_end":211,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":497},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53677,"byte_end":53690,"line_start":214,"line_end":214,"column_start":9,"column_end":22},"name":"target_offset","qualname":"::components::PatchLoc::target_offset","value":"isize","parent":{"krate":0,"index":491},"children":[],"decl_id":null,"docs":" A constant offset added to the destination address of this relocation when it is calculated.\n","sig":null,"attributes":[{"value":"/ A constant offset added to the destination address of this relocation when it is calculated.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53572,"byte_end":53668,"line_start":213,"line_end":213,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53779,"byte_end":53782,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<PatchLoc<R>>::new","value":"pub fn new(AssemblyOffset, isize, u8, u8, R) -> PatchLoc<R>","parent":null,"children":[],"decl_id":null,"docs":" create a new `PatchLoc`\n","sig":null,"attributes":[{"value":"/ create a new `PatchLoc`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53740,"byte_end":53767,"line_start":218,"line_end":218,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":54309,"byte_end":54314,"line_start":232,"line_end":232,"column_start":12,"column_end":17},"name":"range","qualname":"<PatchLoc<R>>::range","value":"pub fn range(&Self, usize) -> std::ops::Range<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns a range that covers the entire relocation in its assembling buffer\n `buf_offset` is a value that is subtracted from this range when the buffer you want to slice\n with this range is only a part of a bigger buffer.\n","sig":null,"attributes":[{"value":"/ Returns a range that covers the entire relocation in its assembling buffer","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":54059,"byte_end":54137,"line_start":229,"line_end":229,"column_start":5,"column_end":83}},{"value":"/ `buf_offset` is a value that is subtracted from this range when the buffer you want to slice","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":54142,"byte_end":54238,"line_start":230,"line_end":230,"column_start":5,"column_end":101}},{"value":"/ with this range is only a part of a bigger buffer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":54243,"byte_end":54297,"line_start":231,"line_end":231,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":54617,"byte_end":54622,"line_start":238,"line_end":238,"column_start":12,"column_end":17},"name":"value","qualname":"<PatchLoc<R>>::value","value":"pub fn value(&Self, usize, usize) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Returns the actual value that should be inserted at the relocation site.\n","sig":null,"attributes":[{"value":"/ Returns the actual value that should be inserted at the relocation site.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":54529,"byte_end":54605,"line_start":237,"line_end":237,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":55306,"byte_end":55311,"line_start":249,"line_end":249,"column_start":12,"column_end":17},"name":"patch","qualname":"<PatchLoc<R>>::patch","value":"pub fn patch(&Self, &mut [u8], usize, usize)\n-> Result<(), ImpossibleRelocation>","parent":null,"children":[],"decl_id":null,"docs":" Patch `buffer` so that this relocation patch will point to `target`.\n `buf_addr` is the address that the assembling buffer will come to reside at when it is assembled.\n `target` is the offset that this relocation will be targetting.\n","sig":null,"attributes":[{"value":"/ Patch `buffer` so that this relocation patch will point to `target`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":55044,"byte_end":55116,"line_start":246,"line_end":246,"column_start":5,"column_end":77}},{"value":"/ `buf_addr` is the address that the assembling buffer will come to reside at when it is assembled.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":55121,"byte_end":55222,"line_start":247,"line_end":247,"column_start":5,"column_end":106}},{"value":"/ `target` is the offset that this relocation will be targetting.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":55227,"byte_end":55294,"line_start":248,"line_end":248,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":55832,"byte_end":55838,"line_start":257,"line_end":257,"column_start":12,"column_end":18},"name":"adjust","qualname":"<PatchLoc<R>>::adjust","value":"pub fn adjust(&Self, &mut [u8], isize) -> Result<(), ImpossibleRelocation>","parent":null,"children":[],"decl_id":null,"docs":" Patch `buffer` so that this relocation will still point to the right location due to a change in the address of the containing buffer.\n `buffer` is a subsection of a larger buffer, located at offset `buf_offset` in this larger buffer.\n `adjustment` is `new_buf_addr - old_buf_addr`.\n","sig":null,"attributes":[{"value":"/ Patch `buffer` so that this relocation will still point to the right location due to a change in the address of the containing buffer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":55520,"byte_end":55658,"line_start":254,"line_end":254,"column_start":5,"column_end":143}},{"value":"/ `buffer` is a subsection of a larger buffer, located at offset `buf_offset` in this larger buffer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":55663,"byte_end":55765,"line_start":255,"line_end":255,"column_start":5,"column_end":107}},{"value":"/ `adjustment` is `new_buf_addr - old_buf_addr`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":55770,"byte_end":55820,"line_start":256,"line_end":256,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":56407,"byte_end":56423,"line_start":268,"line_end":268,"column_start":12,"column_end":28},"name":"needs_adjustment","qualname":"<PatchLoc<R>>::needs_adjustment","value":"pub fn needs_adjustment(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if this patch requires adjustment when the address of the buffer it resides in is altered.\n","sig":null,"attributes":[{"value":"/ Returns if this patch requires adjustment when the address of the buffer it resides in is altered.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":56293,"byte_end":56395,"line_start":267,"line_end":267,"column_start":5,"column_end":107}}]},{"kind":"Struct","id":{"krate":0,"index":504},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":56745,"byte_end":56758,"line_start":280,"line_end":280,"column_start":12,"column_end":25},"name":"RelocRegistry","qualname":"::components::RelocRegistry","value":"RelocRegistry {  }","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508}],"decl_id":null,"docs":" A registry of relocations and the respective labels they point towards.\n","sig":null,"attributes":[{"value":"/ A registry of relocations and the respective labels they point towards.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":56632,"byte_end":56707,"line_start":278,"line_end":278,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":57022,"byte_end":57025,"line_start":288,"line_end":288,"column_start":12,"column_end":15},"name":"new","qualname":"<RelocRegistry<R>>::new","value":"pub fn new() -> RelocRegistry<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty relocation registry.\n","sig":null,"attributes":[{"value":"/ Create a new, empty relocation registry.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":56966,"byte_end":57010,"line_start":287,"line_end":287,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":57261,"byte_end":57271,"line_start":297,"line_end":297,"column_start":12,"column_end":22},"name":"add_global","qualname":"<RelocRegistry<R>>::add_global","value":"pub fn add_global(&mut Self, &'static str, PatchLoc<R>)","parent":null,"children":[],"decl_id":null,"docs":" Add a new patch targetting the global label `name`.\n","sig":null,"attributes":[{"value":"/ Add a new patch targetting the global label `name`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":57194,"byte_end":57249,"line_start":296,"line_end":296,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":57449,"byte_end":57460,"line_start":302,"line_end":302,"column_start":12,"column_end":23},"name":"add_dynamic","qualname":"<RelocRegistry<R>>::add_dynamic","value":"pub fn add_dynamic(&mut Self, DynamicLabel, PatchLoc<R>)","parent":null,"children":[],"decl_id":null,"docs":" Add a new patch targetting the dynamic label `id`.\n","sig":null,"attributes":[{"value":"/ Add a new patch targetting the dynamic label `id`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":57383,"byte_end":57437,"line_start":301,"line_end":301,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":57757,"byte_end":57766,"line_start":308,"line_end":308,"column_start":12,"column_end":21},"name":"add_local","qualname":"<RelocRegistry<R>>::add_local","value":"pub fn add_local(&mut Self, &'static str, PatchLoc<R>)","parent":null,"children":[],"decl_id":null,"docs":" Add a new patch targetting the next local label `name`.\n As any relocation targetting a previous local label can be immediately resolved these should not be recorded.\n","sig":null,"attributes":[{"value":"/ Add a new patch targetting the next local label `name`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":57568,"byte_end":57627,"line_start":306,"line_end":306,"column_start":5,"column_end":64}},{"value":"/ As any relocation targetting a previous local label can be immediately resolved these should not be recorded.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":57632,"byte_end":57745,"line_start":307,"line_end":307,"column_start":5,"column_end":118}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58193,"byte_end":58210,"line_start":319,"line_end":319,"column_start":12,"column_end":29},"name":"take_locals_named","qualname":"<RelocRegistry<R>>::take_locals_named","value":"pub fn take_locals_named<'a>(&'a mut Self, &'static str) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator through all defined relocations targetting local label `name`.\n These relocations are removed from the registry.\n","sig":null,"attributes":[{"value":"/ Return an iterator through all defined relocations targetting local label `name`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58039,"byte_end":58124,"line_start":317,"line_end":317,"column_start":5,"column_end":90}},{"value":"/ These relocations are removed from the registry.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58129,"byte_end":58181,"line_start":318,"line_end":318,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58549,"byte_end":58561,"line_start":325,"line_end":325,"column_start":12,"column_end":24},"name":"take_globals","qualname":"<RelocRegistry<R>>::take_globals","value":"pub fn take_globals<'a>(&'a mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator through all defined relocations targeting global labels and the labels they target.\n These relocations are removed from the registry.\n","sig":null,"attributes":[{"value":"/ Return an iterator through all defined relocations targeting global labels and the labels they target.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58374,"byte_end":58480,"line_start":323,"line_end":323,"column_start":5,"column_end":111}},{"value":"/ These relocations are removed from the registry.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58485,"byte_end":58537,"line_start":324,"line_end":324,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58855,"byte_end":58868,"line_start":331,"line_end":331,"column_start":12,"column_end":25},"name":"take_dynamics","qualname":"<RelocRegistry<R>>::take_dynamics","value":"pub fn take_dynamics<'a>(&'a mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator through all defined relocations targeting dynamic labels and the labels they target.\n These relocations are removed from the registry.\n","sig":null,"attributes":[{"value":"/ Return an iterator through all defined relocations targeting dynamic labels and the labels they target.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58679,"byte_end":58786,"line_start":329,"line_end":329,"column_start":5,"column_end":112}},{"value":"/ These relocations are removed from the registry.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58791,"byte_end":58843,"line_start":330,"line_end":330,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59161,"byte_end":59172,"line_start":337,"line_end":337,"column_start":12,"column_end":23},"name":"take_locals","qualname":"<RelocRegistry<R>>::take_locals","value":"pub fn take_locals<'a>(&'a mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator through all defined relocations targeting local labels and the labels they target.\n These relocations are removed from the registry.\n","sig":null,"attributes":[{"value":"/ Return an iterator through all defined relocations targeting local labels and the labels they target.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":58987,"byte_end":59092,"line_start":335,"line_end":335,"column_start":5,"column_end":110}},{"value":"/ These relocations are removed from the registry.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59097,"byte_end":59149,"line_start":336,"line_end":336,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":515},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59527,"byte_end":59540,"line_start":346,"line_end":346,"column_start":12,"column_end":25},"name":"ManagedRelocs","qualname":"::components::ManagedRelocs","value":"ManagedRelocs {  }","parent":null,"children":[{"krate":0,"index":517}],"decl_id":null,"docs":" A registry of relocations that have been encoded previously, but need to be adjusted when the address of the buffer they\n reside in changes.\n","sig":null,"attributes":[{"value":"/ A registry of relocations that have been encoded previously, but need to be adjusted when the address of the buffer they","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59342,"byte_end":59466,"line_start":343,"line_end":343,"column_start":1,"column_end":125}},{"value":"/ reside in changes.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59467,"byte_end":59489,"line_start":344,"line_end":344,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59710,"byte_end":59713,"line_start":352,"line_end":352,"column_start":12,"column_end":15},"name":"new","qualname":"<ManagedRelocs<R>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty managed relocation registry.\n","sig":null,"attributes":[{"value":"/ Create a new, empty managed relocation registry.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59646,"byte_end":59698,"line_start":351,"line_end":351,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59849,"byte_end":59852,"line_start":359,"line_end":359,"column_start":12,"column_end":15},"name":"add","qualname":"<ManagedRelocs<R>>::add","value":"pub fn add(&mut Self, PatchLoc<R>)","parent":null,"children":[],"decl_id":null,"docs":" Add a relocation to this registry.\n","sig":null,"attributes":[{"value":"/ Add a relocation to this registry.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59799,"byte_end":59837,"line_start":358,"line_end":358,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":60075,"byte_end":60081,"line_start":364,"line_end":364,"column_start":12,"column_end":18},"name":"append","qualname":"<ManagedRelocs<R>>::append","value":"pub fn append(&mut Self, &mut ManagedRelocs<R>)","parent":null,"children":[],"decl_id":null,"docs":" Take all items from another registry and add them to this registry\n","sig":null,"attributes":[{"value":"/ Take all items from another registry and add them to this registry","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59993,"byte_end":60063,"line_start":363,"line_end":363,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":60540,"byte_end":60554,"line_start":372,"line_end":372,"column_start":12,"column_end":26},"name":"remove_between","qualname":"<ManagedRelocs<R>>::remove_between","value":"pub fn remove_between(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Remove all managed relocations whose byte fields start in the range start .. end.\n This is useful when implementing an `Assembler::alter` API, as any managed relocations\n that were overwritten should be removed from the registry, otherwise the replacement code\n would be corrupted when managed relocations are updated.\n","sig":null,"attributes":[{"value":"/ Remove all managed relocations whose byte fields start in the range start .. end.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":60185,"byte_end":60270,"line_start":368,"line_end":368,"column_start":5,"column_end":90}},{"value":"/ This is useful when implementing an `Assembler::alter` API, as any managed relocations","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":60275,"byte_end":60365,"line_start":369,"line_end":369,"column_start":5,"column_end":95}},{"value":"/ that were overwritten should be removed from the registry, otherwise the replacement code","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":60370,"byte_end":60463,"line_start":370,"line_end":370,"column_start":5,"column_end":98}},{"value":"/ would be corrupted when managed relocations are updated.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":60468,"byte_end":60528,"line_start":371,"line_end":371,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":60885,"byte_end":60889,"line_start":384,"line_end":384,"column_start":12,"column_end":16},"name":"iter","qualname":"<ManagedRelocs<R>>::iter","value":"pub fn iter<'a>(&'a Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterate through all defined managed relocations.\n","sig":null,"attributes":[{"value":"/ Iterate through all defined managed relocations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":60821,"byte_end":60873,"line_start":383,"line_end":383,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":61687,"byte_end":61694,"line_start":407,"line_end":407,"column_start":12,"column_end":19},"name":"LitPool","qualname":"::components::LitPool","value":"LitPool {  }","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563}],"decl_id":null,"docs":" Literal pool implementation. One can programmatically push items in this literal pool and retrieve offsets to them in the pool.\n Then later, the pool will be encoded into the instruction stream and items can be retrieved using the address of the literal pool.\n and the previously emitted offsets. Values are always at least aligned to their size.\n","sig":null,"attributes":[{"value":"/ Literal pool implementation. One can programmatically push items in this literal pool and retrieve offsets to them in the pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":61286,"byte_end":61417,"line_start":403,"line_end":403,"column_start":1,"column_end":132}},{"value":"/ Then later, the pool will be encoded into the instruction stream and items can be retrieved using the address of the literal pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":61418,"byte_end":61552,"line_start":404,"line_end":404,"column_start":1,"column_end":135}},{"value":"/ and the previously emitted offsets. Values are always at least aligned to their size.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":61553,"byte_end":61642,"line_start":405,"line_end":405,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":61818,"byte_end":61821,"line_start":414,"line_end":414,"column_start":12,"column_end":15},"name":"new","qualname":"<LitPool>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty literal pool\n","sig":null,"attributes":[{"value":"/ Create a new, empty literal pool","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":61770,"byte_end":61806,"line_start":413,"line_end":413,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":62324,"byte_end":62329,"line_start":431,"line_end":431,"column_start":12,"column_end":17},"name":"align","qualname":"<LitPool>::align","value":"pub fn align(&mut Self, usize, u8)","parent":null,"children":[],"decl_id":null,"docs":" Add extra alignment for the next value in the literal pool\n","sig":null,"attributes":[{"value":"/ Add extra alignment for the next value in the literal pool","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":62250,"byte_end":62312,"line_start":430,"line_end":430,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":62651,"byte_end":62658,"line_start":442,"line_end":442,"column_start":12,"column_end":19},"name":"push_u8","qualname":"<LitPool>::push_u8","value":"pub fn push_u8(&mut Self, u8) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Encode `value` into the literal pool.\n","sig":null,"attributes":[{"value":"/ Encode `value` into the literal pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":62598,"byte_end":62639,"line_start":441,"line_end":441,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":62884,"byte_end":62892,"line_start":449,"line_end":449,"column_start":12,"column_end":20},"name":"push_u16","qualname":"<LitPool>::push_u16","value":"pub fn push_u16(&mut Self, u16) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Encode `value` into the literal pool.\n","sig":null,"attributes":[{"value":"/ Encode `value` into the literal pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":62831,"byte_end":62872,"line_start":448,"line_end":448,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":63120,"byte_end":63128,"line_start":456,"line_end":456,"column_start":12,"column_end":20},"name":"push_u32","qualname":"<LitPool>::push_u32","value":"pub fn push_u32(&mut Self, u32) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Encode `value` into the literal pool.\n","sig":null,"attributes":[{"value":"/ Encode `value` into the literal pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":63067,"byte_end":63108,"line_start":455,"line_end":455,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":63357,"byte_end":63365,"line_start":463,"line_end":463,"column_start":12,"column_end":20},"name":"push_u64","qualname":"<LitPool>::push_u64","value":"pub fn push_u64(&mut Self, u64) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Encode `value` into the literal pool.\n","sig":null,"attributes":[{"value":"/ Encode `value` into the literal pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":63304,"byte_end":63345,"line_start":462,"line_end":462,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":63656,"byte_end":63668,"line_start":470,"line_end":470,"column_start":12,"column_end":24},"name":"push_dynamic","qualname":"<LitPool>::push_dynamic","value":"pub fn push_dynamic(&mut Self, DynamicLabel, RelocationSize) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Encode the relative address of a label into the literal pool (relative to the location in the pool)\n","sig":null,"attributes":[{"value":"/ Encode the relative address of a label into the literal pool (relative to the location in the pool)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":63541,"byte_end":63644,"line_start":469,"line_end":469,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":63977,"byte_end":63988,"line_start":477,"line_end":477,"column_start":12,"column_end":23},"name":"push_global","qualname":"<LitPool>::push_global","value":"pub fn push_global(&mut Self, &'static str, RelocationSize) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Encode the relative address of a label into the literal pool (relative to the location in the pool)\n","sig":null,"attributes":[{"value":"/ Encode the relative address of a label into the literal pool (relative to the location in the pool)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":63862,"byte_end":63965,"line_start":476,"line_end":476,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":64300,"byte_end":64312,"line_start":484,"line_end":484,"column_start":12,"column_end":24},"name":"push_forward","qualname":"<LitPool>::push_forward","value":"pub fn push_forward(&mut Self, &'static str, RelocationSize) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Encode the relative address of a label into the literal pool (relative to the location in the pool)\n","sig":null,"attributes":[{"value":"/ Encode the relative address of a label into the literal pool (relative to the location in the pool)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":64185,"byte_end":64288,"line_start":483,"line_end":483,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":64625,"byte_end":64638,"line_start":491,"line_end":491,"column_start":12,"column_end":25},"name":"push_backward","qualname":"<LitPool>::push_backward","value":"pub fn push_backward(&mut Self, &'static str, RelocationSize) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Encode the relative address of a label into the literal pool (relative to the location in the pool)\n","sig":null,"attributes":[{"value":"/ Encode the relative address of a label into the literal pool (relative to the location in the pool)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":64510,"byte_end":64613,"line_start":490,"line_end":490,"column_start":5,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":65255,"byte_end":65259,"line_start":507,"line_end":507,"column_start":12,"column_end":16},"name":"emit","qualname":"<LitPool>::emit","value":"pub fn emit<D: DynasmLabelApi>(Self, &mut D)","parent":null,"children":[],"decl_id":null,"docs":" Emit this literal pool into the specified assembler\n","sig":null,"attributes":[{"value":"/ Emit this literal pool into the specified assembler","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":65188,"byte_end":65243,"line_start":506,"line_end":506,"column_start":5,"column_end":60}}]},{"kind":"Mod","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"relocations","qualname":"::relocations","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":143},{"krate":0,"index":573},{"krate":0,"index":595},{"krate":0,"index":594},{"krate":0,"index":592},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":583},{"krate":0,"index":152},{"krate":0,"index":597},{"krate":0,"index":622},{"krate":0,"index":621},{"krate":0,"index":619},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":610},{"krate":0,"index":154},{"krate":0,"index":167}],"decl_id":null,"docs":" This module defines the `Relocation` trait and several utilities for implementing relocations.\n","sig":null,"attributes":[{"value":"/ This module defines the `Relocation` trait and several utilities for implementing relocations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":68805,"byte_end":68903,"line_start":1,"line_end":1,"column_start":1,"column_end":99}}]},{"kind":"Struct","id":{"krate":0,"index":570},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69057,"byte_end":69077,"line_start":9,"line_end":9,"column_start":12,"column_end":32},"name":"ImpossibleRelocation","qualname":"::relocations::ImpossibleRelocation","value":"ImpossibleRelocation {  }","parent":null,"children":[],"decl_id":null,"docs":" Error returned when encoding a relocation failed\n","sig":null,"attributes":[{"value":"/ Error returned when encoding a relocation failed","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":68976,"byte_end":69028,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69310,"byte_end":69320,"line_start":15,"line_end":15,"column_start":11,"column_end":21},"name":"Relocation","qualname":"::relocations::Relocation","value":"Relocation","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151}],"decl_id":null,"docs":" Used to inform assemblers on how to implement relocations for each architecture.\n When implementing a new architecture, one simply has to implement this trait for\n the architecture's relocation definition.\n","sig":null,"attributes":[{"value":"/ Used to inform assemblers on how to implement relocations for each architecture.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69084,"byte_end":69168,"line_start":12,"line_end":12,"column_start":1,"column_end":85}},{"value":"/ When implementing a new architecture, one simply has to implement this trait for","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69169,"byte_end":69253,"line_start":13,"line_end":13,"column_start":1,"column_end":85}},{"value":"/ the architecture's relocation definition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69254,"byte_end":69299,"line_start":14,"line_end":14,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69425,"byte_end":69433,"line_start":17,"line_end":17,"column_start":10,"column_end":18},"name":"Encoding","qualname":"::relocations::Relocation::Encoding","value":"type Encoding;","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" The encoded representation for this relocation that is emitted by the dynasm! macro.\n","sig":null,"attributes":[{"value":"/ The encoded representation for this relocation that is emitted by the dynasm! macro.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69327,"byte_end":69415,"line_start":16,"line_end":16,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69508,"byte_end":69521,"line_start":19,"line_end":19,"column_start":8,"column_end":21},"name":"from_encoding","qualname":"::relocations::Relocation::from_encoding","value":"pub fn from_encoding(Self::Encoding) -> Self","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" construct this relocation from an encoded representation.\n","sig":null,"attributes":[{"value":"/ construct this relocation from an encoded representation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69439,"byte_end":69500,"line_start":18,"line_end":18,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69689,"byte_end":69698,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"from_size","qualname":"::relocations::Relocation::from_size","value":"pub fn from_size(RelocationSize) -> Self","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" construct this relocation from a simple size. This is used to implement relocations in directives and literal pools.\n","sig":null,"attributes":[{"value":"/ construct this relocation from a simple size. This is used to implement relocations in directives and literal pools.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69561,"byte_end":69681,"line_start":20,"line_end":20,"column_start":5,"column_end":125}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69804,"byte_end":69808,"line_start":23,"line_end":23,"column_start":8,"column_end":12},"name":"size","qualname":"::relocations::Relocation::size","value":"pub fn size(&Self) -> usize","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" The size of the slice of bytes affected by this relocation\n","sig":null,"attributes":[{"value":"/ The size of the slice of bytes affected by this relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69734,"byte_end":69796,"line_start":22,"line_end":22,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69990,"byte_end":70001,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"write_value","qualname":"::relocations::Relocation::write_value","value":"pub fn write_value(&Self, &mut [u8], isize)\n-> Result<(), ImpossibleRelocation>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Write a value into a buffer of size `self.size()` in the format of this relocation.\n Any bits not part of the relocation should be preserved.\n","sig":null,"attributes":[{"value":"/ Write a value into a buffer of size `self.size()` in the format of this relocation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69830,"byte_end":69917,"line_start":24,"line_end":24,"column_start":5,"column_end":92}},{"value":"/ Any bits not part of the relocation should be preserved.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":69922,"byte_end":69982,"line_start":25,"line_end":25,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70174,"byte_end":70184,"line_start":28,"line_end":28,"column_start":8,"column_end":18},"name":"read_value","qualname":"::relocations::Relocation::read_value","value":"pub fn read_value(&Self, &[u8]) -> isize","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Read a value from a buffer of size `self.size()` in the format of this relocation.\n","sig":null,"attributes":[{"value":"/ Read a value from a buffer of size `self.size()` in the format of this relocation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70080,"byte_end":70166,"line_start":27,"line_end":27,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70292,"byte_end":70296,"line_start":30,"line_end":30,"column_start":8,"column_end":12},"name":"kind","qualname":"::relocations::Relocation::kind","value":"pub fn kind(&Self) -> RelocationKind","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Specifies what kind of relocation this relocation instance is.\n","sig":null,"attributes":[{"value":"/ Specifies what kind of relocation this relocation instance is.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70218,"byte_end":70284,"line_start":29,"line_end":29,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70388,"byte_end":70397,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"page_size","qualname":"::relocations::Relocation::page_size","value":"pub fn page_size() -> usize","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Specifies the default page size on this platform.\n","sig":null,"attributes":[{"value":"/ Specifies the default page size on this platform.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70327,"byte_end":70380,"line_start":31,"line_end":31,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":574},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70694,"byte_end":70702,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"name":"Relative","qualname":"::relocations::RelocationKind::Relative","value":"RelocationKind::Relative","parent":{"krate":0,"index":573},"children":[],"decl_id":null,"docs":" A simple, PC-relative relocation. These can be encoded once and do not need\n to be adjusted when the executable buffer is moved.\n","sig":null,"attributes":[{"value":"/ A simple, PC-relative relocation. These can be encoded once and do not need","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70550,"byte_end":70629,"line_start":39,"line_end":39,"column_start":5,"column_end":84}},{"value":"/ to be adjusted when the executable buffer is moved.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70634,"byte_end":70689,"line_start":40,"line_end":40,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":577},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70923,"byte_end":70931,"line_start":45,"line_end":45,"column_start":5,"column_end":13},"name":"AbsToRel","qualname":"::relocations::RelocationKind::AbsToRel","value":"RelocationKind::AbsToRel","parent":{"krate":0,"index":573},"children":[],"decl_id":null,"docs":" An absolute relocation to a relative address,\n i.e. trying to put the address of a dynasm x86 function in a register\n This means adjustment is necessary when the executable buffer is moved\n","sig":null,"attributes":[{"value":"/ An absolute relocation to a relative address,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70712,"byte_end":70761,"line_start":42,"line_end":42,"column_start":5,"column_end":54}},{"value":"/ i.e. trying to put the address of a dynasm x86 function in a register","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70766,"byte_end":70839,"line_start":43,"line_end":43,"column_start":5,"column_end":78}},{"value":"/ This means adjustment is necessary when the executable buffer is moved","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70844,"byte_end":70918,"line_start":44,"line_end":44,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":580},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71142,"byte_end":71150,"line_start":49,"line_end":49,"column_start":5,"column_end":13},"name":"RelToAbs","qualname":"::relocations::RelocationKind::RelToAbs","value":"RelocationKind::RelToAbs","parent":{"krate":0,"index":573},"children":[],"decl_id":null,"docs":" A relative relocation to an absolute address,\n i.e. trying to call a rust function with a dynasm x86 call.\n This means adjustment is necessary when the executable buffer is moved\n","sig":null,"attributes":[{"value":"/ A relative relocation to an absolute address,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70941,"byte_end":70990,"line_start":46,"line_end":46,"column_start":5,"column_end":54}},{"value":"/ i.e. trying to call a rust function with a dynasm x86 call.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70995,"byte_end":71058,"line_start":47,"line_end":47,"column_start":5,"column_end":68}},{"value":"/ This means adjustment is necessary when the executable buffer is moved","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71063,"byte_end":71137,"line_start":48,"line_end":48,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70529,"byte_end":70543,"line_start":38,"line_end":38,"column_start":10,"column_end":24},"name":"RelocationKind","qualname":"::relocations::RelocationKind","value":"pub enum RelocationKind {\n\n    /// A simple, PC-relative relocation. These can be encoded once and do not need\n    /// to be adjusted when the executable buffer is moved.\n    Relative = ,\n\n    /// An absolute relocation to a relative address,\n    /// i.e. trying to put the address of a dynasm x86 function in a register\n    /// This means adjustment is necessary when the executable buffer is moved\n    AbsToRel = ,\n\n    /// A relative relocation to an absolute address,\n    /// i.e. trying to call a rust function with a dynasm x86 call.\n    /// This means adjustment is necessary when the executable buffer is moved\n    RelToAbs = ,\n}","parent":null,"children":[{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580}],"decl_id":null,"docs":" Specifies what kind of relocation a relocation is.\n","sig":null,"attributes":[{"value":"/ Specifies what kind of relocation a relocation is.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":70414,"byte_end":70468,"line_start":36,"line_end":36,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71251,"byte_end":71264,"line_start":54,"line_end":54,"column_start":12,"column_end":25},"name":"from_encoding","qualname":"<RelocationKind>::from_encoding","value":"pub fn from_encoding(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts back from numeric value to RelocationKind\n","sig":null,"attributes":[{"value":"/ Converts back from numeric value to RelocationKind","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71185,"byte_end":71239,"line_start":53,"line_end":53,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":598},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71830,"byte_end":71834,"line_start":71,"line_end":71,"column_start":5,"column_end":9},"name":"Byte","qualname":"::relocations::RelocationSize::Byte","value":"RelocationSize::Byte","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" A byte-sized relocation\n","sig":null,"attributes":[{"value":"/ A byte-sized relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71798,"byte_end":71825,"line_start":70,"line_end":70,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":601},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71874,"byte_end":71878,"line_start":73,"line_end":73,"column_start":5,"column_end":9},"name":"Word","qualname":"::relocations::RelocationSize::Word","value":"RelocationSize::Word","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" A two-byte relocation\n","sig":null,"attributes":[{"value":"/ A two-byte relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71844,"byte_end":71869,"line_start":72,"line_end":72,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71925,"byte_end":71930,"line_start":75,"line_end":75,"column_start":5,"column_end":10},"name":"DWord","qualname":"::relocations::RelocationSize::DWord","value":"RelocationSize::DWord","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" A four-byte sized relocation\n","sig":null,"attributes":[{"value":"/ A four-byte sized relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71888,"byte_end":71920,"line_start":74,"line_end":74,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":607},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71975,"byte_end":71980,"line_start":77,"line_end":77,"column_start":5,"column_end":10},"name":"QWord","qualname":"::relocations::RelocationSize::QWord","value":"RelocationSize::QWord","parent":{"krate":0,"index":597},"children":[],"decl_id":null,"docs":" An 8-byte sized relocation\n","sig":null,"attributes":[{"value":"/ An 8-byte sized relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71940,"byte_end":71970,"line_start":76,"line_end":76,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":597},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71777,"byte_end":71791,"line_start":69,"line_end":69,"column_start":10,"column_end":24},"name":"RelocationSize","qualname":"::relocations::RelocationSize","value":"pub enum RelocationSize {\n\n    /// A byte-sized relocation\n    Byte = ,\n\n    /// A two-byte relocation\n    Word = ,\n\n    /// A four-byte sized relocation\n    DWord = ,\n\n    /// An 8-byte sized relocation\n    QWord = ,\n}","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607}],"decl_id":null,"docs":" A descriptor for the size of a relocation. This also doubles as a relocation itself\n for relocations in data directives. Can be converted to relocations of any kind of architecture\n using `Relocation::from_size`.\n","sig":null,"attributes":[{"value":"/ A descriptor for the size of a relocation. This also doubles as a relocation itself","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71494,"byte_end":71581,"line_start":65,"line_end":65,"column_start":1,"column_end":88}},{"value":"/ for relocations in data directives. Can be converted to relocations of any kind of architecture","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71582,"byte_end":71681,"line_start":66,"line_end":66,"column_start":1,"column_end":100}},{"value":"/ using `Relocation::from_size`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71682,"byte_end":71716,"line_start":67,"line_end":67,"column_start":1,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"x64","qualname":"::x64","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":1829},{"krate":0,"index":624},{"krate":0,"index":628},{"krate":0,"index":626},{"krate":0,"index":177},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":630},{"krate":0,"index":691},{"krate":0,"index":689},{"krate":0,"index":688},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":679},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":758},{"krate":0,"index":756},{"krate":0,"index":755},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":746},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":825},{"krate":0,"index":823},{"krate":0,"index":822},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":813},{"krate":0,"index":827},{"krate":0,"index":829},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" Runtime support for the x64 architecture assembling target.","sig":null,"attributes":[{"value":"/ Runtime support for the x64 architecture assembling target.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":73939,"byte_end":74002,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74003,"byte_end":74006,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The x64 instruction set features variable-length instructions and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74007,"byte_end":74076,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"/ relative relocations up to 32 bits in size.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74077,"byte_end":74124,"line_start":4,"line_end":4,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74125,"byte_end":74128,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The core relocation behaviour for this architecture is provided by the [`X64Relocation`] type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74129,"byte_end":74227,"line_start":6,"line_end":6,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74228,"byte_end":74231,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Next to that, this module contains the following:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74232,"byte_end":74285,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74286,"byte_end":74289,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## Type aliases","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74290,"byte_end":74309,"line_start":10,"line_end":10,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74310,"byte_end":74313,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Several specialized type aliases of the generic [`Assembler`] are provided as these are by far the most common usecase.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74314,"byte_end":74437,"line_start":12,"line_end":12,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74438,"byte_end":74441,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ## Enums","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74442,"byte_end":74454,"line_start":14,"line_end":14,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74455,"byte_end":74458,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ There are enumerator of every logically distinct register family usable in x64. ","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74459,"byte_end":74543,"line_start":16,"line_end":16,"column_start":1,"column_end":85}},{"value":"/ These enums implement the [`Register`] trait and their discriminant values match their numeric encoding in dynamic register literals.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74544,"byte_end":74681,"line_start":17,"line_end":17,"column_start":1,"column_end":138}},{"value":"/ Some of these are re-exported from the x86 architecture.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74682,"byte_end":74742,"line_start":18,"line_end":18,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74743,"byte_end":74746,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ *Note: The presence of some registers listed here is purely what is encodable. Check the relevant architecture documentation to find what is architecturally valid.*","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":74747,"byte_end":74915,"line_start":20,"line_end":20,"column_start":1,"column_end":169}}]},{"kind":"Struct","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":75145,"byte_end":75158,"line_start":30,"line_end":30,"column_start":12,"column_end":25},"name":"X64Relocation","qualname":"::x64::X64Relocation","value":"X64Relocation {  }","parent":null,"children":[{"krate":0,"index":625}],"decl_id":null,"docs":" Relocation implementation for the x64 architecture.\n","sig":null,"attributes":[{"value":"/ Relocation implementation for the x64 architecture.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":75054,"byte_end":75109,"line_start":28,"line_end":28,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76002,"byte_end":76011,"line_start":64,"line_end":64,"column_start":10,"column_end":19},"name":"Assembler","qualname":"::x64::Assembler","value":"crate::Assembler<X64Relocation>","parent":null,"children":[],"decl_id":null,"docs":" An x64 Assembler. This is aliased here for backwards compatability.\n","sig":null,"attributes":[{"value":"/ An x64 Assembler. This is aliased here for backwards compatability.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":75921,"byte_end":75992,"line_start":63,"line_end":63,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":187},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76135,"byte_end":76151,"line_start":66,"line_end":66,"column_start":10,"column_end":26},"name":"AssemblyModifier","qualname":"::x64::AssemblyModifier","value":"crate::Modifier","parent":null,"children":[],"decl_id":null,"docs":" An x64 AssemblyModifier. This is aliased here for backwards compatability.\n","sig":null,"attributes":[{"value":"/ An x64 AssemblyModifier. This is aliased here for backwards compatability.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76047,"byte_end":76125,"line_start":65,"line_end":65,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76285,"byte_end":76304,"line_start":68,"line_end":68,"column_start":10,"column_end":29},"name":"UncommittedModifier","qualname":"::x64::UncommittedModifier","value":"crate::UncommittedModifier","parent":null,"children":[],"decl_id":null,"docs":" An x64 UncommittedModifier. This is aliased here for backwards compatability.\n","sig":null,"attributes":[{"value":"/ An x64 UncommittedModifier. This is aliased here for backwards compatability.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76194,"byte_end":76275,"line_start":67,"line_end":67,"column_start":1,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":631},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76570,"byte_end":76573,"line_start":77,"line_end":77,"column_start":5,"column_end":8},"name":"RAX","qualname":"::x64::Rq::RAX","value":"Rq::RAX","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76581,"byte_end":76584,"line_start":77,"line_end":77,"column_start":16,"column_end":19},"name":"RCX","qualname":"::x64::Rq::RCX","value":"Rq::RCX","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":637},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76592,"byte_end":76595,"line_start":77,"line_end":77,"column_start":27,"column_end":30},"name":"RDX","qualname":"::x64::Rq::RDX","value":"Rq::RDX","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":640},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76603,"byte_end":76606,"line_start":77,"line_end":77,"column_start":38,"column_end":41},"name":"RBX","qualname":"::x64::Rq::RBX","value":"Rq::RBX","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76618,"byte_end":76621,"line_start":78,"line_end":78,"column_start":5,"column_end":8},"name":"RSP","qualname":"::x64::Rq::RSP","value":"Rq::RSP","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76629,"byte_end":76632,"line_start":78,"line_end":78,"column_start":16,"column_end":19},"name":"RBP","qualname":"::x64::Rq::RBP","value":"Rq::RBP","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76640,"byte_end":76643,"line_start":78,"line_end":78,"column_start":27,"column_end":30},"name":"RSI","qualname":"::x64::Rq::RSI","value":"Rq::RSI","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76651,"byte_end":76654,"line_start":78,"line_end":78,"column_start":38,"column_end":41},"name":"RDI","qualname":"::x64::Rq::RDI","value":"Rq::RDI","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76666,"byte_end":76668,"line_start":79,"line_end":79,"column_start":5,"column_end":7},"name":"R8","qualname":"::x64::Rq::R8","value":"Rq::R8","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76677,"byte_end":76679,"line_start":79,"line_end":79,"column_start":16,"column_end":18},"name":"R9","qualname":"::x64::Rq::R9","value":"Rq::R9","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":661},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76688,"byte_end":76691,"line_start":79,"line_end":79,"column_start":27,"column_end":30},"name":"R10","qualname":"::x64::Rq::R10","value":"Rq::R10","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76699,"byte_end":76702,"line_start":79,"line_end":79,"column_start":38,"column_end":41},"name":"R11","qualname":"::x64::Rq::R11","value":"Rq::R11","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":667},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76714,"byte_end":76717,"line_start":80,"line_end":80,"column_start":5,"column_end":8},"name":"R12","qualname":"::x64::Rq::R12","value":"Rq::R12","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":670},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76725,"byte_end":76728,"line_start":80,"line_end":80,"column_start":16,"column_end":19},"name":"R13","qualname":"::x64::Rq::R13","value":"Rq::R13","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":673},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76736,"byte_end":76739,"line_start":80,"line_end":80,"column_start":27,"column_end":30},"name":"R14","qualname":"::x64::Rq::R14","value":"Rq::R14","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":676},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76747,"byte_end":76750,"line_start":80,"line_end":80,"column_start":38,"column_end":41},"name":"R15","qualname":"::x64::Rq::R15","value":"Rq::R15","parent":{"krate":0,"index":630},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":630},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76561,"byte_end":76563,"line_start":76,"line_end":76,"column_start":10,"column_end":12},"name":"Rq","qualname":"::x64::Rq","value":"pub enum Rq {\n    RAX = ,\n    RCX = ,\n    RDX = ,\n    RBX = ,\n    RSP = ,\n    RBP = ,\n    RSI = ,\n    RDI = ,\n    R8 = ,\n    R9 = ,\n    R10 = ,\n    R11 = ,\n    R12 = ,\n    R13 = ,\n    R14 = ,\n    R15 = ,\n}","parent":null,"children":[{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":643},{"krate":0,"index":646},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":670},{"krate":0,"index":673},{"krate":0,"index":676}],"decl_id":null,"docs":" 1, 2, 4 or 8-byte general purpose \"quad-word\" registers.","sig":null,"attributes":[{"value":"/ 1, 2, 4 or 8-byte general purpose \"quad-word\" registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76345,"byte_end":76405,"line_start":71,"line_end":71,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76406,"byte_end":76409,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ RIP does not appear here as it cannot be addressed dynamically.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76410,"byte_end":76477,"line_start":73,"line_end":73,"column_start":1,"column_end":68}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76478,"byte_end":76500,"line_start":74,"line_end":74,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":698},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76902,"byte_end":76906,"line_start":88,"line_end":88,"column_start":5,"column_end":9},"name":"XMM0","qualname":"::x64::Rx::XMM0","value":"Rx::XMM0","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":701},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76915,"byte_end":76919,"line_start":88,"line_end":88,"column_start":18,"column_end":22},"name":"XMM1","qualname":"::x64::Rx::XMM1","value":"Rx::XMM1","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":704},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76928,"byte_end":76932,"line_start":88,"line_end":88,"column_start":31,"column_end":35},"name":"XMM2","qualname":"::x64::Rx::XMM2","value":"Rx::XMM2","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":707},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76941,"byte_end":76945,"line_start":88,"line_end":88,"column_start":44,"column_end":48},"name":"XMM3","qualname":"::x64::Rx::XMM3","value":"Rx::XMM3","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76958,"byte_end":76962,"line_start":89,"line_end":89,"column_start":5,"column_end":9},"name":"XMM4","qualname":"::x64::Rx::XMM4","value":"Rx::XMM4","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":713},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76971,"byte_end":76975,"line_start":89,"line_end":89,"column_start":18,"column_end":22},"name":"XMM5","qualname":"::x64::Rx::XMM5","value":"Rx::XMM5","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":716},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76984,"byte_end":76988,"line_start":89,"line_end":89,"column_start":31,"column_end":35},"name":"XMM6","qualname":"::x64::Rx::XMM6","value":"Rx::XMM6","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76997,"byte_end":77001,"line_start":89,"line_end":89,"column_start":44,"column_end":48},"name":"XMM7","qualname":"::x64::Rx::XMM7","value":"Rx::XMM7","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":722},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77014,"byte_end":77018,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"XMM8","qualname":"::x64::Rx::XMM8","value":"Rx::XMM8","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":725},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77027,"byte_end":77031,"line_start":90,"line_end":90,"column_start":18,"column_end":22},"name":"XMM9","qualname":"::x64::Rx::XMM9","value":"Rx::XMM9","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":728},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77040,"byte_end":77045,"line_start":90,"line_end":90,"column_start":31,"column_end":36},"name":"XMM10","qualname":"::x64::Rx::XMM10","value":"Rx::XMM10","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":731},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77053,"byte_end":77058,"line_start":90,"line_end":90,"column_start":44,"column_end":49},"name":"XMM11","qualname":"::x64::Rx::XMM11","value":"Rx::XMM11","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77070,"byte_end":77075,"line_start":91,"line_end":91,"column_start":5,"column_end":10},"name":"XMM12","qualname":"::x64::Rx::XMM12","value":"Rx::XMM12","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77083,"byte_end":77088,"line_start":91,"line_end":91,"column_start":18,"column_end":23},"name":"XMM13","qualname":"::x64::Rx::XMM13","value":"Rx::XMM13","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":740},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77096,"byte_end":77101,"line_start":91,"line_end":91,"column_start":31,"column_end":36},"name":"XMM14","qualname":"::x64::Rx::XMM14","value":"Rx::XMM14","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77109,"byte_end":77114,"line_start":91,"line_end":91,"column_start":44,"column_end":49},"name":"XMM15","qualname":"::x64::Rx::XMM15","value":"Rx::XMM15","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":697},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76893,"byte_end":76895,"line_start":87,"line_end":87,"column_start":10,"column_end":12},"name":"Rx","qualname":"::x64::Rx","value":"pub enum Rx {\n    XMM0 = ,\n    XMM1 = ,\n    XMM2 = ,\n    XMM3 = ,\n    XMM4 = ,\n    XMM5 = ,\n    XMM6 = ,\n    XMM7 = ,\n    XMM8 = ,\n    XMM9 = ,\n    XMM10 = ,\n    XMM11 = ,\n    XMM12 = ,\n    XMM13 = ,\n    XMM14 = ,\n    XMM15 = ,\n}","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":734},{"krate":0,"index":737},{"krate":0,"index":740},{"krate":0,"index":743}],"decl_id":null,"docs":" 16 or 32-byte SSE registers.\n","sig":null,"attributes":[{"value":"/ 16 or 32-byte SSE registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76777,"byte_end":76809,"line_start":84,"line_end":84,"column_start":1,"column_end":33}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":76810,"byte_end":76832,"line_start":85,"line_end":85,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77263,"byte_end":77266,"line_start":99,"line_end":99,"column_start":5,"column_end":8},"name":"CR0","qualname":"::x64::RC::CR0","value":"RC::CR0","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":768},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77275,"byte_end":77278,"line_start":99,"line_end":99,"column_start":17,"column_end":20},"name":"CR1","qualname":"::x64::RC::CR1","value":"RC::CR1","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":771},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77287,"byte_end":77290,"line_start":99,"line_end":99,"column_start":29,"column_end":32},"name":"CR2","qualname":"::x64::RC::CR2","value":"RC::CR2","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":774},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77299,"byte_end":77302,"line_start":99,"line_end":99,"column_start":41,"column_end":44},"name":"CR3","qualname":"::x64::RC::CR3","value":"RC::CR3","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77315,"byte_end":77318,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"CR4","qualname":"::x64::RC::CR4","value":"RC::CR4","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":780},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77327,"byte_end":77330,"line_start":100,"line_end":100,"column_start":17,"column_end":20},"name":"CR5","qualname":"::x64::RC::CR5","value":"RC::CR5","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":783},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77339,"byte_end":77342,"line_start":100,"line_end":100,"column_start":29,"column_end":32},"name":"CR6","qualname":"::x64::RC::CR6","value":"RC::CR6","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77351,"byte_end":77354,"line_start":100,"line_end":100,"column_start":41,"column_end":44},"name":"CR7","qualname":"::x64::RC::CR7","value":"RC::CR7","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77367,"byte_end":77370,"line_start":101,"line_end":101,"column_start":5,"column_end":8},"name":"CR8","qualname":"::x64::RC::CR8","value":"RC::CR8","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":792},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77379,"byte_end":77382,"line_start":101,"line_end":101,"column_start":17,"column_end":20},"name":"CR9","qualname":"::x64::RC::CR9","value":"RC::CR9","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":795},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77391,"byte_end":77395,"line_start":101,"line_end":101,"column_start":29,"column_end":33},"name":"CR10","qualname":"::x64::RC::CR10","value":"RC::CR10","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":798},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77403,"byte_end":77407,"line_start":101,"line_end":101,"column_start":41,"column_end":45},"name":"CR11","qualname":"::x64::RC::CR11","value":"RC::CR11","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77419,"byte_end":77423,"line_start":102,"line_end":102,"column_start":5,"column_end":9},"name":"CR12","qualname":"::x64::RC::CR12","value":"RC::CR12","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":804},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77431,"byte_end":77435,"line_start":102,"line_end":102,"column_start":17,"column_end":21},"name":"CR13","qualname":"::x64::RC::CR13","value":"RC::CR13","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77443,"byte_end":77447,"line_start":102,"line_end":102,"column_start":29,"column_end":33},"name":"CR14","qualname":"::x64::RC::CR14","value":"RC::CR14","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":810},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77455,"byte_end":77459,"line_start":102,"line_end":102,"column_start":41,"column_end":45},"name":"CR15","qualname":"::x64::RC::CR15","value":"RC::CR15","parent":{"krate":0,"index":764},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":764},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77254,"byte_end":77256,"line_start":98,"line_end":98,"column_start":10,"column_end":12},"name":"RC","qualname":"::x64::RC","value":"pub enum RC {\n    CR0 = ,\n    CR1 = ,\n    CR2 = ,\n    CR3 = ,\n    CR4 = ,\n    CR5 = ,\n    CR6 = ,\n    CR7 = ,\n    CR8 = ,\n    CR9 = ,\n    CR10 = ,\n    CR11 = ,\n    CR12 = ,\n    CR13 = ,\n    CR14 = ,\n    CR15 = ,\n}","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":768},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":783},{"krate":0,"index":786},{"krate":0,"index":789},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810}],"decl_id":null,"docs":" 8-byte control registers.\n","sig":null,"attributes":[{"value":"/ 8-byte control registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77141,"byte_end":77170,"line_start":95,"line_end":95,"column_start":1,"column_end":30}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":77171,"byte_end":77193,"line_start":96,"line_end":96,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":198},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"x86","qualname":"::x86","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":831},{"krate":0,"index":836},{"krate":0,"index":834},{"krate":0,"index":205},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":838},{"krate":0,"index":875},{"krate":0,"index":873},{"krate":0,"index":872},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":863},{"krate":0,"index":877},{"krate":0,"index":879},{"krate":0,"index":881},{"krate":0,"index":906},{"krate":0,"index":904},{"krate":0,"index":903},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":894},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":949},{"krate":0,"index":947},{"krate":0,"index":946},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":937},{"krate":0,"index":951},{"krate":0,"index":953},{"krate":0,"index":955},{"krate":0,"index":992},{"krate":0,"index":990},{"krate":0,"index":989},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":980},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":1035},{"krate":0,"index":1033},{"krate":0,"index":1032},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1023},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1072},{"krate":0,"index":1070},{"krate":0,"index":1069},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1060},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1115},{"krate":0,"index":1113},{"krate":0,"index":1112},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1103},{"krate":0,"index":1117},{"krate":0,"index":1119},{"krate":0,"index":1121},{"krate":0,"index":1182},{"krate":0,"index":1180},{"krate":0,"index":1179},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1173},{"krate":0,"index":1174},{"krate":0,"index":1170},{"krate":0,"index":1184},{"krate":0,"index":1186},{"krate":0,"index":1188},{"krate":0,"index":1213},{"krate":0,"index":1211},{"krate":0,"index":1210},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1201},{"krate":0,"index":1215},{"krate":0,"index":1217}],"decl_id":null,"docs":" Runtime support for the x86 architecture assembling target.","sig":null,"attributes":[{"value":"/ Runtime support for the x86 architecture assembling target.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":77872,"byte_end":77935,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":77936,"byte_end":77939,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The x86 instruction set features variable-length instructions and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":77940,"byte_end":78009,"line_start":3,"line_end":3,"column_start":1,"column_end":70}},{"value":"/ relative relocations up to 16 bits in size, or absolute relocations of 32 bits in size.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78010,"byte_end":78101,"line_start":4,"line_end":4,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78102,"byte_end":78105,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ The core relocation behaviour for this architecture is provided by the [`X86Relocation`] type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78106,"byte_end":78204,"line_start":6,"line_end":6,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78205,"byte_end":78208,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Next to that, this module contains the following:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78209,"byte_end":78262,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78263,"byte_end":78266,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ## Type aliases","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78267,"byte_end":78286,"line_start":10,"line_end":10,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78287,"byte_end":78290,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Several specialized type aliases of the generic [`Assembler`] are provided as these are by far the most common usecase.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78291,"byte_end":78414,"line_start":12,"line_end":12,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78415,"byte_end":78418,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ## Enums","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78419,"byte_end":78431,"line_start":14,"line_end":14,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78432,"byte_end":78435,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ There are enumerator of every logically distinct register family usable in x86. ","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78436,"byte_end":78520,"line_start":16,"line_end":16,"column_start":1,"column_end":85}},{"value":"/ These enums implement the [`Register`] trait and their discriminant values match their numeric encoding in dynamic register literals.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78521,"byte_end":78658,"line_start":17,"line_end":17,"column_start":1,"column_end":138}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78659,"byte_end":78662,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ *Note: The presence of some registers listed here is purely what is encodable. Check the relevant architecture documentation to find what is architecturally valid.*","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78663,"byte_end":78831,"line_start":19,"line_end":19,"column_start":1,"column_end":169}}]},{"kind":"Struct","id":{"krate":0,"index":831},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":79040,"byte_end":79053,"line_start":28,"line_end":28,"column_start":12,"column_end":25},"name":"X86Relocation","qualname":"::x86::X86Relocation","value":"X86Relocation {  }","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833}],"decl_id":null,"docs":" Relocation implementation for the x86 architecture.\n","sig":null,"attributes":[{"value":"/ Relocation implementation for the x86 architecture.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":78949,"byte_end":79004,"line_start":26,"line_end":26,"column_start":1,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":214},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80017,"byte_end":80026,"line_start":66,"line_end":66,"column_start":10,"column_end":19},"name":"Assembler","qualname":"::x86::Assembler","value":"crate::Assembler<X86Relocation>","parent":null,"children":[],"decl_id":null,"docs":" An x86 Assembler. This is aliased here for backwards compatability.\n","sig":null,"attributes":[{"value":"/ An x86 Assembler. This is aliased here for backwards compatability.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":79936,"byte_end":80007,"line_start":65,"line_end":65,"column_start":1,"column_end":72}}]},{"kind":"Type","id":{"krate":0,"index":215},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80150,"byte_end":80166,"line_start":68,"line_end":68,"column_start":10,"column_end":26},"name":"AssemblyModifier","qualname":"::x86::AssemblyModifier","value":"crate::Modifier","parent":null,"children":[],"decl_id":null,"docs":" An x86 AssemblyModifier. This is aliased here for backwards compatability.\n","sig":null,"attributes":[{"value":"/ An x86 AssemblyModifier. This is aliased here for backwards compatability.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80062,"byte_end":80140,"line_start":67,"line_end":67,"column_start":1,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80300,"byte_end":80319,"line_start":70,"line_end":70,"column_start":10,"column_end":29},"name":"UncommittedModifier","qualname":"::x86::UncommittedModifier","value":"crate::UncommittedModifier","parent":null,"children":[],"decl_id":null,"docs":" An x86 UncommittedModifier. This is aliased here for backwards compatability.\n","sig":null,"attributes":[{"value":"/ An x86 UncommittedModifier. This is aliased here for backwards compatability.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80209,"byte_end":80290,"line_start":69,"line_end":69,"column_start":1,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":839},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80584,"byte_end":80587,"line_start":79,"line_end":79,"column_start":5,"column_end":8},"name":"EAX","qualname":"::x86::Rd::EAX","value":"Rd::EAX","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":842},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80596,"byte_end":80599,"line_start":79,"line_end":79,"column_start":17,"column_end":20},"name":"ECX","qualname":"::x86::Rd::ECX","value":"Rd::ECX","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":845},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80608,"byte_end":80611,"line_start":79,"line_end":79,"column_start":29,"column_end":32},"name":"EDX","qualname":"::x86::Rd::EDX","value":"Rd::EDX","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":848},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80620,"byte_end":80623,"line_start":79,"line_end":79,"column_start":41,"column_end":44},"name":"EBX","qualname":"::x86::Rd::EBX","value":"Rd::EBX","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":851},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80636,"byte_end":80639,"line_start":80,"line_end":80,"column_start":5,"column_end":8},"name":"ESP","qualname":"::x86::Rd::ESP","value":"Rd::ESP","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":854},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80648,"byte_end":80651,"line_start":80,"line_end":80,"column_start":17,"column_end":20},"name":"EBP","qualname":"::x86::Rd::EBP","value":"Rd::EBP","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":857},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80660,"byte_end":80663,"line_start":80,"line_end":80,"column_start":29,"column_end":32},"name":"ESI","qualname":"::x86::Rd::ESI","value":"Rd::ESI","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":860},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80672,"byte_end":80675,"line_start":80,"line_end":80,"column_start":41,"column_end":44},"name":"EDI","qualname":"::x86::Rd::EDI","value":"Rd::EDI","parent":{"krate":0,"index":838},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":838},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80575,"byte_end":80577,"line_start":78,"line_end":78,"column_start":10,"column_end":12},"name":"Rd","qualname":"::x86::Rd","value":"pub enum Rd {\n    EAX = ,\n    ECX = ,\n    EDX = ,\n    EBX = ,\n    ESP = ,\n    EBP = ,\n    ESI = ,\n    EDI = ,\n}","parent":null,"children":[{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":848},{"krate":0,"index":851},{"krate":0,"index":854},{"krate":0,"index":857},{"krate":0,"index":860}],"decl_id":null,"docs":" 1, 2 or 4-byte general purpose \"double-word\" registers.","sig":null,"attributes":[{"value":"/ 1, 2 or 4-byte general purpose \"double-word\" registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80360,"byte_end":80419,"line_start":73,"line_end":73,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80420,"byte_end":80423,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ EIP does not appear here as it cannot be addressed dynamically.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80424,"byte_end":80491,"line_start":75,"line_end":75,"column_start":1,"column_end":68}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80492,"byte_end":80514,"line_start":76,"line_end":76,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":882},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80836,"byte_end":80838,"line_start":88,"line_end":88,"column_start":5,"column_end":7},"name":"AH","qualname":"::x86::Rh::AH","value":"Rh::AH","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":885},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80846,"byte_end":80848,"line_start":88,"line_end":88,"column_start":15,"column_end":17},"name":"CH","qualname":"::x86::Rh::CH","value":"Rh::CH","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":888},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80856,"byte_end":80858,"line_start":88,"line_end":88,"column_start":25,"column_end":27},"name":"DH","qualname":"::x86::Rh::DH","value":"Rh::DH","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":891},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80866,"byte_end":80868,"line_start":88,"line_end":88,"column_start":35,"column_end":37},"name":"BH","qualname":"::x86::Rh::BH","value":"Rh::BH","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80827,"byte_end":80829,"line_start":87,"line_end":87,"column_start":10,"column_end":12},"name":"Rh","qualname":"::x86::Rh","value":"pub enum Rh { AH = , CH = , DH = , BH = , }","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":885},{"krate":0,"index":888},{"krate":0,"index":891}],"decl_id":null,"docs":" High-byte general purpose registers.\n","sig":null,"attributes":[{"value":"/ High-byte general purpose registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80703,"byte_end":80743,"line_start":84,"line_end":84,"column_start":1,"column_end":41}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80744,"byte_end":80766,"line_start":85,"line_end":85,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":913},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81025,"byte_end":81028,"line_start":96,"line_end":96,"column_start":5,"column_end":8},"name":"ST0","qualname":"::x86::Rf::ST0","value":"Rf::ST0","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81036,"byte_end":81039,"line_start":96,"line_end":96,"column_start":16,"column_end":19},"name":"ST1","qualname":"::x86::Rf::ST1","value":"Rf::ST1","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":919},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81047,"byte_end":81050,"line_start":96,"line_end":96,"column_start":27,"column_end":30},"name":"ST2","qualname":"::x86::Rf::ST2","value":"Rf::ST2","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":922},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81058,"byte_end":81061,"line_start":96,"line_end":96,"column_start":38,"column_end":41},"name":"ST3","qualname":"::x86::Rf::ST3","value":"Rf::ST3","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":925},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81073,"byte_end":81076,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"ST4","qualname":"::x86::Rf::ST4","value":"Rf::ST4","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":928},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81084,"byte_end":81087,"line_start":97,"line_end":97,"column_start":16,"column_end":19},"name":"ST5","qualname":"::x86::Rf::ST5","value":"Rf::ST5","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81095,"byte_end":81098,"line_start":97,"line_end":97,"column_start":27,"column_end":30},"name":"ST6","qualname":"::x86::Rf::ST6","value":"Rf::ST6","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81106,"byte_end":81109,"line_start":97,"line_end":97,"column_start":38,"column_end":41},"name":"ST7","qualname":"::x86::Rf::ST7","value":"Rf::ST7","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":912},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81016,"byte_end":81018,"line_start":95,"line_end":95,"column_start":10,"column_end":12},"name":"Rf","qualname":"::x86::Rf","value":"pub enum Rf {\n    ST0 = ,\n    ST1 = ,\n    ST2 = ,\n    ST3 = ,\n    ST4 = ,\n    ST5 = ,\n    ST6 = ,\n    ST7 = ,\n}","parent":null,"children":[{"krate":0,"index":913},{"krate":0,"index":916},{"krate":0,"index":919},{"krate":0,"index":922},{"krate":0,"index":925},{"krate":0,"index":928},{"krate":0,"index":931},{"krate":0,"index":934}],"decl_id":null,"docs":" 10-byte floating point registers.\n","sig":null,"attributes":[{"value":"/ 10-byte floating point registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80895,"byte_end":80932,"line_start":92,"line_end":92,"column_start":1,"column_end":38}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":80933,"byte_end":80955,"line_start":93,"line_end":93,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":956},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81254,"byte_end":81258,"line_start":105,"line_end":105,"column_start":5,"column_end":9},"name":"MMX0","qualname":"::x86::Rm::MMX0","value":"Rm::MMX0","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":959},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81266,"byte_end":81270,"line_start":105,"line_end":105,"column_start":17,"column_end":21},"name":"MMX1","qualname":"::x86::Rm::MMX1","value":"Rm::MMX1","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":962},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81278,"byte_end":81282,"line_start":105,"line_end":105,"column_start":29,"column_end":33},"name":"MMX2","qualname":"::x86::Rm::MMX2","value":"Rm::MMX2","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":965},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81290,"byte_end":81294,"line_start":105,"line_end":105,"column_start":41,"column_end":45},"name":"MMX3","qualname":"::x86::Rm::MMX3","value":"Rm::MMX3","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":968},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81306,"byte_end":81310,"line_start":106,"line_end":106,"column_start":5,"column_end":9},"name":"MMX4","qualname":"::x86::Rm::MMX4","value":"Rm::MMX4","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":971},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81318,"byte_end":81322,"line_start":106,"line_end":106,"column_start":17,"column_end":21},"name":"MMX5","qualname":"::x86::Rm::MMX5","value":"Rm::MMX5","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":974},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81330,"byte_end":81334,"line_start":106,"line_end":106,"column_start":29,"column_end":33},"name":"MMX6","qualname":"::x86::Rm::MMX6","value":"Rm::MMX6","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":977},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81342,"byte_end":81346,"line_start":106,"line_end":106,"column_start":41,"column_end":45},"name":"MMX7","qualname":"::x86::Rm::MMX7","value":"Rm::MMX7","parent":{"krate":0,"index":955},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":955},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81245,"byte_end":81247,"line_start":104,"line_end":104,"column_start":10,"column_end":12},"name":"Rm","qualname":"::x86::Rm","value":"pub enum Rm {\n    MMX0 = ,\n    MMX1 = ,\n    MMX2 = ,\n    MMX3 = ,\n    MMX4 = ,\n    MMX5 = ,\n    MMX6 = ,\n    MMX7 = ,\n}","parent":null,"children":[{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":974},{"krate":0,"index":977}],"decl_id":null,"docs":" 8-byte MMX registers.\n","sig":null,"attributes":[{"value":"/ 8-byte MMX registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81136,"byte_end":81161,"line_start":101,"line_end":101,"column_start":1,"column_end":26}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81162,"byte_end":81184,"line_start":102,"line_end":102,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":999},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81498,"byte_end":81502,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"XMM0","qualname":"::x86::Rx::XMM0","value":"Rx::XMM0","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1002},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81511,"byte_end":81515,"line_start":114,"line_end":114,"column_start":18,"column_end":22},"name":"XMM1","qualname":"::x86::Rx::XMM1","value":"Rx::XMM1","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1005},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81524,"byte_end":81528,"line_start":114,"line_end":114,"column_start":31,"column_end":35},"name":"XMM2","qualname":"::x86::Rx::XMM2","value":"Rx::XMM2","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1008},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81537,"byte_end":81541,"line_start":114,"line_end":114,"column_start":44,"column_end":48},"name":"XMM3","qualname":"::x86::Rx::XMM3","value":"Rx::XMM3","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1011},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81554,"byte_end":81558,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"XMM4","qualname":"::x86::Rx::XMM4","value":"Rx::XMM4","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81567,"byte_end":81571,"line_start":115,"line_end":115,"column_start":18,"column_end":22},"name":"XMM5","qualname":"::x86::Rx::XMM5","value":"Rx::XMM5","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81580,"byte_end":81584,"line_start":115,"line_end":115,"column_start":31,"column_end":35},"name":"XMM6","qualname":"::x86::Rx::XMM6","value":"Rx::XMM6","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81593,"byte_end":81597,"line_start":115,"line_end":115,"column_start":44,"column_end":48},"name":"XMM7","qualname":"::x86::Rx::XMM7","value":"Rx::XMM7","parent":{"krate":0,"index":998},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":998},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81489,"byte_end":81491,"line_start":113,"line_end":113,"column_start":10,"column_end":12},"name":"Rx","qualname":"::x86::Rx","value":"pub enum Rx {\n    XMM0 = ,\n    XMM1 = ,\n    XMM2 = ,\n    XMM3 = ,\n    XMM4 = ,\n    XMM5 = ,\n    XMM6 = ,\n    XMM7 = ,\n}","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1008},{"krate":0,"index":1011},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020}],"decl_id":null,"docs":" 16 or 32-byte SSE registers.\n","sig":null,"attributes":[{"value":"/ 16 or 32-byte SSE registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81373,"byte_end":81405,"line_start":110,"line_end":110,"column_start":1,"column_end":33}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81406,"byte_end":81428,"line_start":111,"line_end":111,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1042},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81747,"byte_end":81749,"line_start":123,"line_end":123,"column_start":5,"column_end":7},"name":"ES","qualname":"::x86::Rs::ES","value":"Rs::ES","parent":{"krate":0,"index":1041},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1045},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81757,"byte_end":81759,"line_start":123,"line_end":123,"column_start":15,"column_end":17},"name":"CS","qualname":"::x86::Rs::CS","value":"Rs::CS","parent":{"krate":0,"index":1041},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1048},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81767,"byte_end":81769,"line_start":123,"line_end":123,"column_start":25,"column_end":27},"name":"SS","qualname":"::x86::Rs::SS","value":"Rs::SS","parent":{"krate":0,"index":1041},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1051},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81777,"byte_end":81779,"line_start":123,"line_end":123,"column_start":35,"column_end":37},"name":"DS","qualname":"::x86::Rs::DS","value":"Rs::DS","parent":{"krate":0,"index":1041},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1054},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81791,"byte_end":81793,"line_start":124,"line_end":124,"column_start":5,"column_end":7},"name":"FS","qualname":"::x86::Rs::FS","value":"Rs::FS","parent":{"krate":0,"index":1041},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1057},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81801,"byte_end":81803,"line_start":124,"line_end":124,"column_start":15,"column_end":17},"name":"GS","qualname":"::x86::Rs::GS","value":"Rs::GS","parent":{"krate":0,"index":1041},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1041},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81738,"byte_end":81740,"line_start":122,"line_end":122,"column_start":10,"column_end":12},"name":"Rs","qualname":"::x86::Rs","value":"pub enum Rs { ES = , CS = , SS = , DS = , FS = , GS = , }","parent":null,"children":[{"krate":0,"index":1042},{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1051},{"krate":0,"index":1054},{"krate":0,"index":1057}],"decl_id":null,"docs":" 2-byte segment registers.\n","sig":null,"attributes":[{"value":"/ 2-byte segment registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81625,"byte_end":81654,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81655,"byte_end":81677,"line_start":120,"line_end":120,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1079},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81952,"byte_end":81955,"line_start":132,"line_end":132,"column_start":5,"column_end":8},"name":"CR0","qualname":"::x86::RC::CR0","value":"RC::CR0","parent":{"krate":0,"index":1078},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1082},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81964,"byte_end":81967,"line_start":132,"line_end":132,"column_start":17,"column_end":20},"name":"CR1","qualname":"::x86::RC::CR1","value":"RC::CR1","parent":{"krate":0,"index":1078},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1085},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81976,"byte_end":81979,"line_start":132,"line_end":132,"column_start":29,"column_end":32},"name":"CR2","qualname":"::x86::RC::CR2","value":"RC::CR2","parent":{"krate":0,"index":1078},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1088},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81988,"byte_end":81991,"line_start":132,"line_end":132,"column_start":41,"column_end":44},"name":"CR3","qualname":"::x86::RC::CR3","value":"RC::CR3","parent":{"krate":0,"index":1078},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1091},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82004,"byte_end":82007,"line_start":133,"line_end":133,"column_start":5,"column_end":8},"name":"CR4","qualname":"::x86::RC::CR4","value":"RC::CR4","parent":{"krate":0,"index":1078},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82016,"byte_end":82019,"line_start":133,"line_end":133,"column_start":17,"column_end":20},"name":"CR5","qualname":"::x86::RC::CR5","value":"RC::CR5","parent":{"krate":0,"index":1078},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1097},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82028,"byte_end":82031,"line_start":133,"line_end":133,"column_start":29,"column_end":32},"name":"CR6","qualname":"::x86::RC::CR6","value":"RC::CR6","parent":{"krate":0,"index":1078},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1100},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82040,"byte_end":82043,"line_start":133,"line_end":133,"column_start":41,"column_end":44},"name":"CR7","qualname":"::x86::RC::CR7","value":"RC::CR7","parent":{"krate":0,"index":1078},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1078},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81943,"byte_end":81945,"line_start":131,"line_end":131,"column_start":10,"column_end":12},"name":"RC","qualname":"::x86::RC","value":"pub enum RC {\n    CR0 = ,\n    CR1 = ,\n    CR2 = ,\n    CR3 = ,\n    CR4 = ,\n    CR5 = ,\n    CR6 = ,\n    CR7 = ,\n}","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1094},{"krate":0,"index":1097},{"krate":0,"index":1100}],"decl_id":null,"docs":" 4-byte control registers.\n","sig":null,"attributes":[{"value":"/ 4-byte control registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81830,"byte_end":81859,"line_start":128,"line_end":128,"column_start":1,"column_end":30}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":81860,"byte_end":81882,"line_start":129,"line_end":129,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1122},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82191,"byte_end":82194,"line_start":141,"line_end":141,"column_start":5,"column_end":8},"name":"DR0","qualname":"::x86::RD::DR0","value":"RD::DR0","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1125},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82203,"byte_end":82206,"line_start":141,"line_end":141,"column_start":17,"column_end":20},"name":"DR1","qualname":"::x86::RD::DR1","value":"RD::DR1","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1128},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82215,"byte_end":82218,"line_start":141,"line_end":141,"column_start":29,"column_end":32},"name":"DR2","qualname":"::x86::RD::DR2","value":"RD::DR2","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1131},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82227,"byte_end":82230,"line_start":141,"line_end":141,"column_start":41,"column_end":44},"name":"DR3","qualname":"::x86::RD::DR3","value":"RD::DR3","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1134},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82243,"byte_end":82246,"line_start":142,"line_end":142,"column_start":5,"column_end":8},"name":"DR4","qualname":"::x86::RD::DR4","value":"RD::DR4","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1137},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82255,"byte_end":82258,"line_start":142,"line_end":142,"column_start":17,"column_end":20},"name":"DR5","qualname":"::x86::RD::DR5","value":"RD::DR5","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1140},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82267,"byte_end":82270,"line_start":142,"line_end":142,"column_start":29,"column_end":32},"name":"DR6","qualname":"::x86::RD::DR6","value":"RD::DR6","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1143},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82279,"byte_end":82282,"line_start":142,"line_end":142,"column_start":41,"column_end":44},"name":"DR7","qualname":"::x86::RD::DR7","value":"RD::DR7","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1146},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82295,"byte_end":82298,"line_start":143,"line_end":143,"column_start":5,"column_end":8},"name":"DR8","qualname":"::x86::RD::DR8","value":"RD::DR8","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1149},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82307,"byte_end":82310,"line_start":143,"line_end":143,"column_start":17,"column_end":20},"name":"DR9","qualname":"::x86::RD::DR9","value":"RD::DR9","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1152},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82319,"byte_end":82323,"line_start":143,"line_end":143,"column_start":29,"column_end":33},"name":"DR10","qualname":"::x86::RD::DR10","value":"RD::DR10","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82331,"byte_end":82335,"line_start":143,"line_end":143,"column_start":41,"column_end":45},"name":"DR11","qualname":"::x86::RD::DR11","value":"RD::DR11","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1158},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82347,"byte_end":82351,"line_start":144,"line_end":144,"column_start":5,"column_end":9},"name":"DR12","qualname":"::x86::RD::DR12","value":"RD::DR12","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82359,"byte_end":82363,"line_start":144,"line_end":144,"column_start":17,"column_end":21},"name":"DR13","qualname":"::x86::RD::DR13","value":"RD::DR13","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1164},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82371,"byte_end":82375,"line_start":144,"line_end":144,"column_start":29,"column_end":33},"name":"DR14","qualname":"::x86::RD::DR14","value":"RD::DR14","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1167},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82383,"byte_end":82387,"line_start":144,"line_end":144,"column_start":41,"column_end":45},"name":"DR15","qualname":"::x86::RD::DR15","value":"RD::DR15","parent":{"krate":0,"index":1121},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1121},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82182,"byte_end":82184,"line_start":140,"line_end":140,"column_start":10,"column_end":12},"name":"RD","qualname":"::x86::RD","value":"pub enum RD {\n    DR0 = ,\n    DR1 = ,\n    DR2 = ,\n    DR3 = ,\n    DR4 = ,\n    DR5 = ,\n    DR6 = ,\n    DR7 = ,\n    DR8 = ,\n    DR9 = ,\n    DR10 = ,\n    DR11 = ,\n    DR12 = ,\n    DR13 = ,\n    DR14 = ,\n    DR15 = ,\n}","parent":null,"children":[{"krate":0,"index":1122},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1134},{"krate":0,"index":1137},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1158},{"krate":0,"index":1161},{"krate":0,"index":1164},{"krate":0,"index":1167}],"decl_id":null,"docs":" 4-byte debug registers.\n","sig":null,"attributes":[{"value":"/ 4-byte debug registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82071,"byte_end":82098,"line_start":137,"line_end":137,"column_start":1,"column_end":28}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82099,"byte_end":82121,"line_start":138,"line_end":138,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82535,"byte_end":82539,"line_start":152,"line_end":152,"column_start":5,"column_end":9},"name":"BND0","qualname":"::x86::RB::BND0","value":"RB::BND0","parent":{"krate":0,"index":1188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1192},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82547,"byte_end":82551,"line_start":152,"line_end":152,"column_start":17,"column_end":21},"name":"BND1","qualname":"::x86::RB::BND1","value":"RB::BND1","parent":{"krate":0,"index":1188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1195},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82559,"byte_end":82563,"line_start":152,"line_end":152,"column_start":29,"column_end":33},"name":"BND2","qualname":"::x86::RB::BND2","value":"RB::BND2","parent":{"krate":0,"index":1188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1198},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82571,"byte_end":82575,"line_start":152,"line_end":152,"column_start":41,"column_end":45},"name":"BND3","qualname":"::x86::RB::BND3","value":"RB::BND3","parent":{"krate":0,"index":1188},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1188},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82526,"byte_end":82528,"line_start":151,"line_end":151,"column_start":10,"column_end":12},"name":"RB","qualname":"::x86::RB","value":"pub enum RB { BND0 = , BND1 = , BND2 = , BND3 = , }","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1192},{"krate":0,"index":1195},{"krate":0,"index":1198}],"decl_id":null,"docs":" 16-byte bound registers.\n","sig":null,"attributes":[{"value":"/ 16-byte bound registers.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82414,"byte_end":82442,"line_start":148,"line_end":148,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":82443,"byte_end":82465,"line_start":149,"line_end":149,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"aarch64","qualname":"::aarch64","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":1219},{"krate":0,"index":1235},{"krate":0,"index":1233},{"krate":0,"index":231},{"krate":0,"index":235},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":247},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":1237},{"krate":0,"index":1346},{"krate":0,"index":1344},{"krate":0,"index":1343},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1334},{"krate":0,"index":1348},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1461},{"krate":0,"index":1459},{"krate":0,"index":1458},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1449},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1576},{"krate":0,"index":1574},{"krate":0,"index":1573},{"krate":0,"index":1570},{"krate":0,"index":1571},{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1564},{"krate":0,"index":1578},{"krate":0,"index":1580}],"decl_id":null,"docs":" Runtime support for the aarch64 architecture assembling target.","sig":null,"attributes":[{"value":"/ Runtime support for the aarch64 architecture assembling target.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":82832,"byte_end":82899,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":82900,"byte_end":82903,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The aarch64 instruction set features fixed-width 32-bit instructions and relative relocations up to 28 bits in size.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":82904,"byte_end":83024,"line_start":3,"line_end":3,"column_start":1,"column_end":121}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83025,"byte_end":83028,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The core relocation behaviour for this architecture is provided by the [`Aarch64Relocation`] type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83029,"byte_end":83131,"line_start":5,"line_end":5,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83132,"byte_end":83135,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Next to that, this module contains the following:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83136,"byte_end":83189,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83190,"byte_end":83193,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Type aliases","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83194,"byte_end":83213,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83214,"byte_end":83217,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Several specialized type aliases of the generic [`Assembler`] are provided as these are by far the most common usecase.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83218,"byte_end":83341,"line_start":11,"line_end":11,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83342,"byte_end":83345,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Enums","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83346,"byte_end":83358,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83359,"byte_end":83362,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ There are enumerator of every logically distinct register family usable in aarch64. ","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83363,"byte_end":83451,"line_start":15,"line_end":15,"column_start":1,"column_end":89}},{"value":"/ These enums implement the [`Register`] trait and their discriminant values match their numeric encoding in dynamic register literals.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83452,"byte_end":83589,"line_start":16,"line_end":16,"column_start":1,"column_end":138}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83590,"byte_end":83593,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ *Note: The presence of some registers listed here is purely what is encodable. Check the relevant architecture documentation to find what is architecturally valid.*","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83594,"byte_end":83762,"line_start":18,"line_end":18,"column_start":1,"column_end":169}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83763,"byte_end":83766,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ ## Functions","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83767,"byte_end":83783,"line_start":20,"line_end":20,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83784,"byte_end":83787,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The aarch64 architecture allows encoding several special types of immediates. The encoding implementations for these immediate types have been exposed to assist the user","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83788,"byte_end":83961,"line_start":22,"line_end":22,"column_start":1,"column_end":174}},{"value":"/ in correctly using these instructions. They will return `Some(encoding)` only if the given value can be encoded losslessly in that immediate type.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":83962,"byte_end":84112,"line_start":23,"line_end":23,"column_start":1,"column_end":151}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1220},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84495,"byte_end":84496,"line_start":35,"line_end":35,"column_start":5,"column_end":6},"name":"B","qualname":"::aarch64::Aarch64Relocation::B","value":"Aarch64Relocation::B","parent":{"krate":0,"index":1219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1222},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84569,"byte_end":84574,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"name":"BCOND","qualname":"::aarch64::Aarch64Relocation::BCOND","value":"Aarch64Relocation::BCOND","parent":{"krate":0,"index":1219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1224},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84618,"byte_end":84621,"line_start":39,"line_end":39,"column_start":5,"column_end":8},"name":"ADR","qualname":"::aarch64::Aarch64Relocation::ADR","value":"Aarch64Relocation::ADR","parent":{"krate":0,"index":1219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84671,"byte_end":84675,"line_start":41,"line_end":41,"column_start":5,"column_end":9},"name":"ADRP","qualname":"::aarch64::Aarch64Relocation::ADRP","value":"Aarch64Relocation::ADRP","parent":{"krate":0,"index":1219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1228},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84722,"byte_end":84725,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"TBZ","qualname":"::aarch64::Aarch64Relocation::TBZ","value":"Aarch64Relocation::TBZ","parent":{"krate":0,"index":1219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84761,"byte_end":84766,"line_start":45,"line_end":45,"column_start":5,"column_end":10},"name":"Plain","qualname":"::aarch64::Aarch64Relocation::Plain","value":"Aarch64Relocation::Plain(RelocationSize)","parent":{"krate":0,"index":1219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1219},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84435,"byte_end":84452,"line_start":33,"line_end":33,"column_start":10,"column_end":27},"name":"Aarch64Relocation","qualname":"::aarch64::Aarch64Relocation","value":"pub enum Aarch64Relocation {\n    B,\n    BCOND,\n    ADR,\n    ADRP,\n    TBZ,\n    Plain(RelocationSize),\n}","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1230}],"decl_id":null,"docs":" Relocation implementation for the aarch64 architecture.\n","sig":null,"attributes":[{"value":"/ Relocation implementation for the aarch64 architecture.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84319,"byte_end":84378,"line_start":30,"line_end":30,"column_start":1,"column_end":60}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84403,"byte_end":84425,"line_start":32,"line_end":32,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":89416,"byte_end":89425,"line_start":191,"line_end":191,"column_start":10,"column_end":19},"name":"Assembler","qualname":"::aarch64::Assembler","value":"crate::Assembler<Aarch64Relocation>","parent":null,"children":[],"decl_id":null,"docs":" An aarch64 Assembler. This is aliased here for backwards compatability.\n","sig":null,"attributes":[{"value":"/ An aarch64 Assembler. This is aliased here for backwards compatability.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":89331,"byte_end":89406,"line_start":190,"line_end":190,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":245},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":89557,"byte_end":89573,"line_start":193,"line_end":193,"column_start":10,"column_end":26},"name":"AssemblyModifier","qualname":"::aarch64::AssemblyModifier","value":"crate::Modifier","parent":null,"children":[],"decl_id":null,"docs":" An aarch64 AssemblyModifier. This is aliased here for backwards compatability.\n","sig":null,"attributes":[{"value":"/ An aarch64 AssemblyModifier. This is aliased here for backwards compatability.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":89465,"byte_end":89547,"line_start":192,"line_end":192,"column_start":1,"column_end":83}}]},{"kind":"Type","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":89715,"byte_end":89734,"line_start":195,"line_end":195,"column_start":10,"column_end":29},"name":"UncommittedModifier","qualname":"::aarch64::UncommittedModifier","value":"crate::UncommittedModifier","parent":null,"children":[],"decl_id":null,"docs":" An aarch64 UncommittedModifier. This is aliased here for backwards compatability.\n","sig":null,"attributes":[{"value":"/ An aarch64 UncommittedModifier. This is aliased here for backwards compatability.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":89620,"byte_end":89705,"line_start":194,"line_end":194,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":89881,"byte_end":89911,"line_start":199,"line_end":199,"column_start":8,"column_end":38},"name":"encode_logical_immediate_32bit","qualname":"::aarch64::encode_logical_immediate_32bit","value":"pub fn encode_logical_immediate_32bit(u32) -> Option<u16>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for validating that a given value can be encoded as a 32-bit logical immediate\n","sig":null,"attributes":[{"value":"/ Helper function for validating that a given value can be encoded as a 32-bit logical immediate","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":89775,"byte_end":89873,"line_start":198,"line_end":198,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":90667,"byte_end":90697,"line_start":222,"line_end":222,"column_start":8,"column_end":38},"name":"encode_logical_immediate_64bit","qualname":"::aarch64::encode_logical_immediate_64bit","value":"pub fn encode_logical_immediate_64bit(u64) -> Option<u16>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for validating that a given value can be encoded as a 64-bit logical immediate\n","sig":null,"attributes":[{"value":"/ Helper function for validating that a given value can be encoded as a 64-bit logical immediate","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":90561,"byte_end":90659,"line_start":221,"line_end":221,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":91534,"byte_end":91565,"line_start":248,"line_end":248,"column_start":8,"column_end":39},"name":"encode_floating_point_immediate","qualname":"::aarch64::encode_floating_point_immediate","value":"pub fn encode_floating_point_immediate(f32) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for validating that a given value can be encoded as a floating point immediate\n","sig":null,"attributes":[{"value":"/ Helper function for validating that a given value can be encoded as a floating point immediate","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":91428,"byte_end":91526,"line_start":247,"line_end":247,"column_start":1,"column_end":99}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1238},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92233,"byte_end":92235,"line_start":269,"line_end":269,"column_start":5,"column_end":7},"name":"X0","qualname":"::aarch64::RX::X0","value":"RX::X0","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1241},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92244,"byte_end":92246,"line_start":269,"line_end":269,"column_start":16,"column_end":18},"name":"X1","qualname":"::aarch64::RX::X1","value":"RX::X1","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92255,"byte_end":92257,"line_start":269,"line_end":269,"column_start":27,"column_end":29},"name":"X2","qualname":"::aarch64::RX::X2","value":"RX::X2","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1247},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92266,"byte_end":92268,"line_start":269,"line_end":269,"column_start":38,"column_end":40},"name":"X3","qualname":"::aarch64::RX::X3","value":"RX::X3","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92281,"byte_end":92283,"line_start":270,"line_end":270,"column_start":5,"column_end":7},"name":"X4","qualname":"::aarch64::RX::X4","value":"RX::X4","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92292,"byte_end":92294,"line_start":270,"line_end":270,"column_start":16,"column_end":18},"name":"X5","qualname":"::aarch64::RX::X5","value":"RX::X5","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1256},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92303,"byte_end":92305,"line_start":270,"line_end":270,"column_start":27,"column_end":29},"name":"X6","qualname":"::aarch64::RX::X6","value":"RX::X6","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92314,"byte_end":92316,"line_start":270,"line_end":270,"column_start":38,"column_end":40},"name":"X7","qualname":"::aarch64::RX::X7","value":"RX::X7","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1262},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92329,"byte_end":92331,"line_start":271,"line_end":271,"column_start":5,"column_end":7},"name":"X8","qualname":"::aarch64::RX::X8","value":"RX::X8","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1265},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92340,"byte_end":92342,"line_start":271,"line_end":271,"column_start":16,"column_end":18},"name":"X9","qualname":"::aarch64::RX::X9","value":"RX::X9","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1268},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92351,"byte_end":92354,"line_start":271,"line_end":271,"column_start":27,"column_end":30},"name":"X10","qualname":"::aarch64::RX::X10","value":"RX::X10","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1271},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92362,"byte_end":92365,"line_start":271,"line_end":271,"column_start":38,"column_end":41},"name":"X11","qualname":"::aarch64::RX::X11","value":"RX::X11","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1274},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92377,"byte_end":92380,"line_start":272,"line_end":272,"column_start":5,"column_end":8},"name":"X12","qualname":"::aarch64::RX::X12","value":"RX::X12","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1277},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92388,"byte_end":92391,"line_start":272,"line_end":272,"column_start":16,"column_end":19},"name":"X13","qualname":"::aarch64::RX::X13","value":"RX::X13","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1280},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92399,"byte_end":92402,"line_start":272,"line_end":272,"column_start":27,"column_end":30},"name":"X14","qualname":"::aarch64::RX::X14","value":"RX::X14","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1283},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92410,"byte_end":92413,"line_start":272,"line_end":272,"column_start":38,"column_end":41},"name":"X15","qualname":"::aarch64::RX::X15","value":"RX::X15","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1286},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92425,"byte_end":92428,"line_start":273,"line_end":273,"column_start":5,"column_end":8},"name":"X16","qualname":"::aarch64::RX::X16","value":"RX::X16","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92436,"byte_end":92439,"line_start":273,"line_end":273,"column_start":16,"column_end":19},"name":"X17","qualname":"::aarch64::RX::X17","value":"RX::X17","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1292},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92447,"byte_end":92450,"line_start":273,"line_end":273,"column_start":27,"column_end":30},"name":"X18","qualname":"::aarch64::RX::X18","value":"RX::X18","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1295},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92458,"byte_end":92461,"line_start":273,"line_end":273,"column_start":38,"column_end":41},"name":"X19","qualname":"::aarch64::RX::X19","value":"RX::X19","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1298},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92473,"byte_end":92476,"line_start":274,"line_end":274,"column_start":5,"column_end":8},"name":"X20","qualname":"::aarch64::RX::X20","value":"RX::X20","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1301},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92484,"byte_end":92487,"line_start":274,"line_end":274,"column_start":16,"column_end":19},"name":"X21","qualname":"::aarch64::RX::X21","value":"RX::X21","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1304},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92495,"byte_end":92498,"line_start":274,"line_end":274,"column_start":27,"column_end":30},"name":"X22","qualname":"::aarch64::RX::X22","value":"RX::X22","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1307},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92506,"byte_end":92509,"line_start":274,"line_end":274,"column_start":38,"column_end":41},"name":"X23","qualname":"::aarch64::RX::X23","value":"RX::X23","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1310},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92521,"byte_end":92524,"line_start":275,"line_end":275,"column_start":5,"column_end":8},"name":"X24","qualname":"::aarch64::RX::X24","value":"RX::X24","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1313},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92532,"byte_end":92535,"line_start":275,"line_end":275,"column_start":16,"column_end":19},"name":"X25","qualname":"::aarch64::RX::X25","value":"RX::X25","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1316},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92543,"byte_end":92546,"line_start":275,"line_end":275,"column_start":27,"column_end":30},"name":"X26","qualname":"::aarch64::RX::X26","value":"RX::X26","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1319},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92554,"byte_end":92557,"line_start":275,"line_end":275,"column_start":38,"column_end":41},"name":"X27","qualname":"::aarch64::RX::X27","value":"RX::X27","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1322},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92569,"byte_end":92572,"line_start":276,"line_end":276,"column_start":5,"column_end":8},"name":"X28","qualname":"::aarch64::RX::X28","value":"RX::X28","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1325},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92580,"byte_end":92583,"line_start":276,"line_end":276,"column_start":16,"column_end":19},"name":"X29","qualname":"::aarch64::RX::X29","value":"RX::X29","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1328},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92591,"byte_end":92594,"line_start":276,"line_end":276,"column_start":27,"column_end":30},"name":"X30","qualname":"::aarch64::RX::X30","value":"RX::X30","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1331},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92602,"byte_end":92605,"line_start":276,"line_end":276,"column_start":38,"column_end":41},"name":"XZR","qualname":"::aarch64::RX::XZR","value":"RX::XZR","parent":{"krate":0,"index":1237},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92224,"byte_end":92226,"line_start":268,"line_end":268,"column_start":10,"column_end":12},"name":"RX","qualname":"::aarch64::RX","value":"pub enum RX {\n    X0 = ,\n    X1 = ,\n    X2 = ,\n    X3 = ,\n    X4 = ,\n    X5 = ,\n    X6 = ,\n    X7 = ,\n    X8 = ,\n    X9 = ,\n    X10 = ,\n    X11 = ,\n    X12 = ,\n    X13 = ,\n    X14 = ,\n    X15 = ,\n    X16 = ,\n    X17 = ,\n    X18 = ,\n    X19 = ,\n    X20 = ,\n    X21 = ,\n    X22 = ,\n    X23 = ,\n    X24 = ,\n    X25 = ,\n    X26 = ,\n    X27 = ,\n    X28 = ,\n    X29 = ,\n    X30 = ,\n    XZR = ,\n}","parent":null,"children":[{"krate":0,"index":1238},{"krate":0,"index":1241},{"krate":0,"index":1244},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1265},{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":1280},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1295},{"krate":0,"index":1298},{"krate":0,"index":1301},{"krate":0,"index":1304},{"krate":0,"index":1307},{"krate":0,"index":1310},{"krate":0,"index":1313},{"krate":0,"index":1316},{"krate":0,"index":1319},{"krate":0,"index":1322},{"krate":0,"index":1325},{"krate":0,"index":1328},{"krate":0,"index":1331}],"decl_id":null,"docs":" 4 or 8-byte general purpopse registers, where X31 is the zero register.\n","sig":null,"attributes":[{"value":"/ 4 or 8-byte general purpopse registers, where X31 is the zero register.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92065,"byte_end":92140,"line_start":265,"line_end":265,"column_start":1,"column_end":76}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92141,"byte_end":92163,"line_start":266,"line_end":266,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1353},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92855,"byte_end":92857,"line_start":285,"line_end":285,"column_start":5,"column_end":7},"name":"X0","qualname":"::aarch64::RXSP::X0","value":"RXSP::X0","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1356},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92866,"byte_end":92868,"line_start":285,"line_end":285,"column_start":16,"column_end":18},"name":"X1","qualname":"::aarch64::RXSP::X1","value":"RXSP::X1","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1359},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92877,"byte_end":92879,"line_start":285,"line_end":285,"column_start":27,"column_end":29},"name":"X2","qualname":"::aarch64::RXSP::X2","value":"RXSP::X2","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1362},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92888,"byte_end":92890,"line_start":285,"line_end":285,"column_start":38,"column_end":40},"name":"X3","qualname":"::aarch64::RXSP::X3","value":"RXSP::X3","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92903,"byte_end":92905,"line_start":286,"line_end":286,"column_start":5,"column_end":7},"name":"X4","qualname":"::aarch64::RXSP::X4","value":"RXSP::X4","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1368},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92914,"byte_end":92916,"line_start":286,"line_end":286,"column_start":16,"column_end":18},"name":"X5","qualname":"::aarch64::RXSP::X5","value":"RXSP::X5","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1371},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92925,"byte_end":92927,"line_start":286,"line_end":286,"column_start":27,"column_end":29},"name":"X6","qualname":"::aarch64::RXSP::X6","value":"RXSP::X6","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1374},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92936,"byte_end":92938,"line_start":286,"line_end":286,"column_start":38,"column_end":40},"name":"X7","qualname":"::aarch64::RXSP::X7","value":"RXSP::X7","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1377},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92951,"byte_end":92953,"line_start":287,"line_end":287,"column_start":5,"column_end":7},"name":"X8","qualname":"::aarch64::RXSP::X8","value":"RXSP::X8","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1380},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92962,"byte_end":92964,"line_start":287,"line_end":287,"column_start":16,"column_end":18},"name":"X9","qualname":"::aarch64::RXSP::X9","value":"RXSP::X9","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1383},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92973,"byte_end":92976,"line_start":287,"line_end":287,"column_start":27,"column_end":30},"name":"X10","qualname":"::aarch64::RXSP::X10","value":"RXSP::X10","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1386},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92984,"byte_end":92987,"line_start":287,"line_end":287,"column_start":38,"column_end":41},"name":"X11","qualname":"::aarch64::RXSP::X11","value":"RXSP::X11","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1389},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92999,"byte_end":93002,"line_start":288,"line_end":288,"column_start":5,"column_end":8},"name":"X12","qualname":"::aarch64::RXSP::X12","value":"RXSP::X12","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1392},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93010,"byte_end":93013,"line_start":288,"line_end":288,"column_start":16,"column_end":19},"name":"X13","qualname":"::aarch64::RXSP::X13","value":"RXSP::X13","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1395},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93021,"byte_end":93024,"line_start":288,"line_end":288,"column_start":27,"column_end":30},"name":"X14","qualname":"::aarch64::RXSP::X14","value":"RXSP::X14","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1398},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93032,"byte_end":93035,"line_start":288,"line_end":288,"column_start":38,"column_end":41},"name":"X15","qualname":"::aarch64::RXSP::X15","value":"RXSP::X15","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93047,"byte_end":93050,"line_start":289,"line_end":289,"column_start":5,"column_end":8},"name":"X16","qualname":"::aarch64::RXSP::X16","value":"RXSP::X16","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1404},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93058,"byte_end":93061,"line_start":289,"line_end":289,"column_start":16,"column_end":19},"name":"X17","qualname":"::aarch64::RXSP::X17","value":"RXSP::X17","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1407},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93069,"byte_end":93072,"line_start":289,"line_end":289,"column_start":27,"column_end":30},"name":"X18","qualname":"::aarch64::RXSP::X18","value":"RXSP::X18","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1410},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93080,"byte_end":93083,"line_start":289,"line_end":289,"column_start":38,"column_end":41},"name":"X19","qualname":"::aarch64::RXSP::X19","value":"RXSP::X19","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1413},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93095,"byte_end":93098,"line_start":290,"line_end":290,"column_start":5,"column_end":8},"name":"X20","qualname":"::aarch64::RXSP::X20","value":"RXSP::X20","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93106,"byte_end":93109,"line_start":290,"line_end":290,"column_start":16,"column_end":19},"name":"X21","qualname":"::aarch64::RXSP::X21","value":"RXSP::X21","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93117,"byte_end":93120,"line_start":290,"line_end":290,"column_start":27,"column_end":30},"name":"X22","qualname":"::aarch64::RXSP::X22","value":"RXSP::X22","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1422},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93128,"byte_end":93131,"line_start":290,"line_end":290,"column_start":38,"column_end":41},"name":"X23","qualname":"::aarch64::RXSP::X23","value":"RXSP::X23","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1425},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93143,"byte_end":93146,"line_start":291,"line_end":291,"column_start":5,"column_end":8},"name":"X24","qualname":"::aarch64::RXSP::X24","value":"RXSP::X24","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1428},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93154,"byte_end":93157,"line_start":291,"line_end":291,"column_start":16,"column_end":19},"name":"X25","qualname":"::aarch64::RXSP::X25","value":"RXSP::X25","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93165,"byte_end":93168,"line_start":291,"line_end":291,"column_start":27,"column_end":30},"name":"X26","qualname":"::aarch64::RXSP::X26","value":"RXSP::X26","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1434},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93176,"byte_end":93179,"line_start":291,"line_end":291,"column_start":38,"column_end":41},"name":"X27","qualname":"::aarch64::RXSP::X27","value":"RXSP::X27","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1437},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93191,"byte_end":93194,"line_start":292,"line_end":292,"column_start":5,"column_end":8},"name":"X28","qualname":"::aarch64::RXSP::X28","value":"RXSP::X28","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1440},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93202,"byte_end":93205,"line_start":292,"line_end":292,"column_start":16,"column_end":19},"name":"X29","qualname":"::aarch64::RXSP::X29","value":"RXSP::X29","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93213,"byte_end":93216,"line_start":292,"line_end":292,"column_start":27,"column_end":30},"name":"X30","qualname":"::aarch64::RXSP::X30","value":"RXSP::X30","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93224,"byte_end":93226,"line_start":292,"line_end":292,"column_start":38,"column_end":40},"name":"SP","qualname":"::aarch64::RXSP::SP","value":"RXSP::SP","parent":{"krate":0,"index":1352},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1352},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92844,"byte_end":92848,"line_start":284,"line_end":284,"column_start":10,"column_end":14},"name":"RXSP","qualname":"::aarch64::RXSP","value":"pub enum RXSP {\n    X0 = ,\n    X1 = ,\n    X2 = ,\n    X3 = ,\n    X4 = ,\n    X5 = ,\n    X6 = ,\n    X7 = ,\n    X8 = ,\n    X9 = ,\n    X10 = ,\n    X11 = ,\n    X12 = ,\n    X13 = ,\n    X14 = ,\n    X15 = ,\n    X16 = ,\n    X17 = ,\n    X18 = ,\n    X19 = ,\n    X20 = ,\n    X21 = ,\n    X22 = ,\n    X23 = ,\n    X24 = ,\n    X25 = ,\n    X26 = ,\n    X27 = ,\n    X28 = ,\n    X29 = ,\n    X30 = ,\n    SP = ,\n}","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1359},{"krate":0,"index":1362},{"krate":0,"index":1365},{"krate":0,"index":1368},{"krate":0,"index":1371},{"krate":0,"index":1374},{"krate":0,"index":1377},{"krate":0,"index":1380},{"krate":0,"index":1383},{"krate":0,"index":1386},{"krate":0,"index":1389},{"krate":0,"index":1392},{"krate":0,"index":1395},{"krate":0,"index":1398},{"krate":0,"index":1401},{"krate":0,"index":1404},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1416},{"krate":0,"index":1419},{"krate":0,"index":1422},{"krate":0,"index":1425},{"krate":0,"index":1428},{"krate":0,"index":1431},{"krate":0,"index":1434},{"krate":0,"index":1437},{"krate":0,"index":1440},{"krate":0,"index":1443},{"krate":0,"index":1446}],"decl_id":null,"docs":" 0x1F addresses both XZR and SP (disambiguated by context). This enum is a mirror of RX just\n with the SP in place of XZR.\n","sig":null,"attributes":[{"value":"/ 0x1F addresses both XZR and SP (disambiguated by context). This enum is a mirror of RX just","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92632,"byte_end":92727,"line_start":280,"line_end":280,"column_start":1,"column_end":96}},{"value":"/ with the SP in place of XZR.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92728,"byte_end":92760,"line_start":281,"line_end":281,"column_start":1,"column_end":33}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":92761,"byte_end":92783,"line_start":282,"line_end":282,"column_start":1,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1468},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93411,"byte_end":93413,"line_start":300,"line_end":300,"column_start":5,"column_end":7},"name":"V0","qualname":"::aarch64::RV::V0","value":"RV::V0","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1471},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93422,"byte_end":93424,"line_start":300,"line_end":300,"column_start":16,"column_end":18},"name":"V1","qualname":"::aarch64::RV::V1","value":"RV::V1","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1474},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93433,"byte_end":93435,"line_start":300,"line_end":300,"column_start":27,"column_end":29},"name":"V2","qualname":"::aarch64::RV::V2","value":"RV::V2","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1477},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93444,"byte_end":93446,"line_start":300,"line_end":300,"column_start":38,"column_end":40},"name":"V3","qualname":"::aarch64::RV::V3","value":"RV::V3","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1480},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93459,"byte_end":93461,"line_start":301,"line_end":301,"column_start":5,"column_end":7},"name":"V4","qualname":"::aarch64::RV::V4","value":"RV::V4","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1483},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93470,"byte_end":93472,"line_start":301,"line_end":301,"column_start":16,"column_end":18},"name":"V5","qualname":"::aarch64::RV::V5","value":"RV::V5","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1486},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93481,"byte_end":93483,"line_start":301,"line_end":301,"column_start":27,"column_end":29},"name":"V6","qualname":"::aarch64::RV::V6","value":"RV::V6","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1489},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93492,"byte_end":93494,"line_start":301,"line_end":301,"column_start":38,"column_end":40},"name":"V7","qualname":"::aarch64::RV::V7","value":"RV::V7","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1492},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93507,"byte_end":93509,"line_start":302,"line_end":302,"column_start":5,"column_end":7},"name":"V8","qualname":"::aarch64::RV::V8","value":"RV::V8","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1495},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93518,"byte_end":93520,"line_start":302,"line_end":302,"column_start":16,"column_end":18},"name":"V9","qualname":"::aarch64::RV::V9","value":"RV::V9","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1498},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93529,"byte_end":93532,"line_start":302,"line_end":302,"column_start":27,"column_end":30},"name":"V10","qualname":"::aarch64::RV::V10","value":"RV::V10","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1501},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93540,"byte_end":93543,"line_start":302,"line_end":302,"column_start":38,"column_end":41},"name":"V11","qualname":"::aarch64::RV::V11","value":"RV::V11","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1504},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93555,"byte_end":93558,"line_start":303,"line_end":303,"column_start":5,"column_end":8},"name":"V12","qualname":"::aarch64::RV::V12","value":"RV::V12","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1507},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93566,"byte_end":93569,"line_start":303,"line_end":303,"column_start":16,"column_end":19},"name":"V13","qualname":"::aarch64::RV::V13","value":"RV::V13","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1510},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93577,"byte_end":93580,"line_start":303,"line_end":303,"column_start":27,"column_end":30},"name":"V14","qualname":"::aarch64::RV::V14","value":"RV::V14","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1513},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93588,"byte_end":93591,"line_start":303,"line_end":303,"column_start":38,"column_end":41},"name":"V15","qualname":"::aarch64::RV::V15","value":"RV::V15","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1516},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93603,"byte_end":93606,"line_start":304,"line_end":304,"column_start":5,"column_end":8},"name":"V16","qualname":"::aarch64::RV::V16","value":"RV::V16","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1519},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93614,"byte_end":93617,"line_start":304,"line_end":304,"column_start":16,"column_end":19},"name":"V17","qualname":"::aarch64::RV::V17","value":"RV::V17","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1522},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93625,"byte_end":93628,"line_start":304,"line_end":304,"column_start":27,"column_end":30},"name":"V18","qualname":"::aarch64::RV::V18","value":"RV::V18","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1525},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93636,"byte_end":93639,"line_start":304,"line_end":304,"column_start":38,"column_end":41},"name":"V19","qualname":"::aarch64::RV::V19","value":"RV::V19","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93651,"byte_end":93654,"line_start":305,"line_end":305,"column_start":5,"column_end":8},"name":"V20","qualname":"::aarch64::RV::V20","value":"RV::V20","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1531},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93662,"byte_end":93665,"line_start":305,"line_end":305,"column_start":16,"column_end":19},"name":"V21","qualname":"::aarch64::RV::V21","value":"RV::V21","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1534},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93673,"byte_end":93676,"line_start":305,"line_end":305,"column_start":27,"column_end":30},"name":"V22","qualname":"::aarch64::RV::V22","value":"RV::V22","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1537},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93684,"byte_end":93687,"line_start":305,"line_end":305,"column_start":38,"column_end":41},"name":"V23","qualname":"::aarch64::RV::V23","value":"RV::V23","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1540},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93699,"byte_end":93702,"line_start":306,"line_end":306,"column_start":5,"column_end":8},"name":"V24","qualname":"::aarch64::RV::V24","value":"RV::V24","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1543},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93710,"byte_end":93713,"line_start":306,"line_end":306,"column_start":16,"column_end":19},"name":"V25","qualname":"::aarch64::RV::V25","value":"RV::V25","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1546},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93721,"byte_end":93724,"line_start":306,"line_end":306,"column_start":27,"column_end":30},"name":"V26","qualname":"::aarch64::RV::V26","value":"RV::V26","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1549},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93732,"byte_end":93735,"line_start":306,"line_end":306,"column_start":38,"column_end":41},"name":"V27","qualname":"::aarch64::RV::V27","value":"RV::V27","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1552},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93747,"byte_end":93750,"line_start":307,"line_end":307,"column_start":5,"column_end":8},"name":"V28","qualname":"::aarch64::RV::V28","value":"RV::V28","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1555},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93758,"byte_end":93761,"line_start":307,"line_end":307,"column_start":16,"column_end":19},"name":"V29","qualname":"::aarch64::RV::V29","value":"RV::V29","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1558},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93769,"byte_end":93772,"line_start":307,"line_end":307,"column_start":27,"column_end":30},"name":"V30","qualname":"::aarch64::RV::V30","value":"RV::V30","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1561},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93780,"byte_end":93783,"line_start":307,"line_end":307,"column_start":38,"column_end":41},"name":"V31","qualname":"::aarch64::RV::V31","value":"RV::V31","parent":{"krate":0,"index":1467},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1467},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93402,"byte_end":93404,"line_start":299,"line_end":299,"column_start":10,"column_end":12},"name":"RV","qualname":"::aarch64::RV","value":"pub enum RV {\n    V0 = ,\n    V1 = ,\n    V2 = ,\n    V3 = ,\n    V4 = ,\n    V5 = ,\n    V6 = ,\n    V7 = ,\n    V8 = ,\n    V9 = ,\n    V10 = ,\n    V11 = ,\n    V12 = ,\n    V13 = ,\n    V14 = ,\n    V15 = ,\n    V16 = ,\n    V17 = ,\n    V18 = ,\n    V19 = ,\n    V20 = ,\n    V21 = ,\n    V22 = ,\n    V23 = ,\n    V24 = ,\n    V25 = ,\n    V26 = ,\n    V27 = ,\n    V28 = ,\n    V29 = ,\n    V30 = ,\n    V31 = ,\n}","parent":null,"children":[{"krate":0,"index":1468},{"krate":0,"index":1471},{"krate":0,"index":1474},{"krate":0,"index":1477},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1489},{"krate":0,"index":1492},{"krate":0,"index":1495},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1507},{"krate":0,"index":1510},{"krate":0,"index":1513},{"krate":0,"index":1516},{"krate":0,"index":1519},{"krate":0,"index":1522},{"krate":0,"index":1525},{"krate":0,"index":1528},{"krate":0,"index":1531},{"krate":0,"index":1534},{"krate":0,"index":1537},{"krate":0,"index":1540},{"krate":0,"index":1543},{"krate":0,"index":1546},{"krate":0,"index":1549},{"krate":0,"index":1552},{"krate":0,"index":1555},{"krate":0,"index":1558},{"krate":0,"index":1561}],"decl_id":null,"docs":" 1, 2, 4, 8 or 16-bytes scalar FP / vector SIMD registers. \n","sig":null,"attributes":[{"value":"/ 1, 2, 4, 8 or 16-bytes scalar FP / vector SIMD registers. ","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93256,"byte_end":93318,"line_start":296,"line_end":296,"column_start":1,"column_end":63}},{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":93319,"byte_end":93341,"line_start":297,"line_end":297,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1582},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":1933,"byte_end":1947,"line_start":63,"line_end":63,"column_start":12,"column_end":26},"name":"AssemblyOffset","qualname":"::AssemblyOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" A struct representing an offset into the assembling buffer of a `DynasmLabelApi` struct.\n The wrapped `usize` is the offset from the start of the assembling buffer in bytes.\n","sig":null,"attributes":[{"value":"/ A struct representing an offset into the assembling buffer of a `DynasmLabelApi` struct.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":1673,"byte_end":1765,"line_start":60,"line_end":60,"column_start":1,"column_end":93}},{"value":"/ The wrapped `usize` is the offset from the start of the assembling buffer in bytes.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":1766,"byte_end":1853,"line_start":61,"line_end":61,"column_start":1,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":1584},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":1948,"byte_end":1957,"line_start":63,"line_end":63,"column_start":27,"column_end":36},"name":"0","qualname":"::AssemblyOffset::0","value":"usize","parent":{"krate":0,"index":1582},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1608},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2043,"byte_end":2055,"line_start":67,"line_end":67,"column_start":12,"column_end":24},"name":"DynamicLabel","qualname":"::DynamicLabel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A dynamic label\n","sig":null,"attributes":[{"value":"/ A dynamic label","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":1961,"byte_end":1980,"line_start":65,"line_end":65,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2192,"byte_end":2198,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"get_id","qualname":"<DynamicLabel>::get_id","value":"pub fn get_id(Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the internal ID of this dynamic label. This is only useful for debugging purposes.\n","sig":null,"attributes":[{"value":"/ Get the internal ID of this dynamic label. This is only useful for debugging purposes.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2090,"byte_end":2180,"line_start":71,"line_end":71,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":1626},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2435,"byte_end":2443,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"Executor","qualname":"::Executor","value":"Executor {  }","parent":null,"children":[{"krate":0,"index":1627}],"decl_id":null,"docs":" A read-only shared reference to the executable buffer inside an Assembler. By\n locking it the internal `ExecutableBuffer` can be accessed and executed.\n","sig":null,"attributes":[{"value":"/ A read-only shared reference to the executable buffer inside an Assembler. By","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2241,"byte_end":2322,"line_start":78,"line_end":78,"column_start":1,"column_end":82}},{"value":"/ locking it the internal `ExecutableBuffer` can be accessed and executed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2323,"byte_end":2399,"line_start":79,"line_end":79,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2960,"byte_end":2964,"line_start":93,"line_end":93,"column_start":12,"column_end":16},"name":"lock","qualname":"<Executor>::lock","value":"pub fn lock(&Self) -> RwLockReadGuard<, ExecutableBuffer>","parent":null,"children":[],"decl_id":null,"docs":" Gain read-access to the internal `ExecutableBuffer`. While the returned guard\n is alive, it can be used to read and execute from the `ExecutableBuffer`.\n Any pointers created to the `Executablebuffer` should no longer be used when\n the guard is dropped.\n","sig":null,"attributes":[{"value":"/ Gain read-access to the internal `ExecutableBuffer`. While the returned guard","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2656,"byte_end":2737,"line_start":88,"line_end":88,"column_start":5,"column_end":86}},{"value":"/ is alive, it can be used to read and execute from the `ExecutableBuffer`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2742,"byte_end":2819,"line_start":89,"line_end":89,"column_start":5,"column_end":82}},{"value":"/ Any pointers created to the `Executablebuffer` should no longer be used when","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2824,"byte_end":2904,"line_start":90,"line_end":90,"column_start":5,"column_end":85}},{"value":"/ the guard is dropped.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2909,"byte_end":2934,"line_start":91,"line_end":91,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2939,"byte_end":2948,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1633},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3230,"byte_end":3235,"line_start":103,"line_end":103,"column_start":5,"column_end":10},"name":"Local","qualname":"::LabelKind::Local","value":"LabelKind::Local(&'static str)","parent":{"krate":0,"index":1632},"children":[],"decl_id":null,"docs":" A local label, like `label:`\n","sig":null,"attributes":[{"value":"/ A local label, like `label:`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3193,"byte_end":3225,"line_start":102,"line_end":102,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1636},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3295,"byte_end":3301,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Global","qualname":"::LabelKind::Global","value":"LabelKind::Global(&'static str)","parent":{"krate":0,"index":1632},"children":[],"decl_id":null,"docs":" A global label, like `->label:`\n","sig":null,"attributes":[{"value":"/ A global label, like `->label:`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3255,"byte_end":3290,"line_start":104,"line_end":104,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1639},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3362,"byte_end":3369,"line_start":107,"line_end":107,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::LabelKind::Dynamic","value":"LabelKind::Dynamic(DynamicLabel)","parent":{"krate":0,"index":1632},"children":[],"decl_id":null,"docs":" A dynamic label, like `=>value:`\n","sig":null,"attributes":[{"value":"/ A dynamic label, like `=>value:`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3321,"byte_end":3357,"line_start":106,"line_end":106,"column_start":5,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":1632},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3177,"byte_end":3186,"line_start":101,"line_end":101,"column_start":10,"column_end":19},"name":"LabelKind","qualname":"::LabelKind","value":"pub enum LabelKind {\n\n    /// A local label, like `label:`\n    Local(&'static str),\n\n    /// A global label, like `->label:`\n    Global(&'static str),\n\n    /// A dynamic label, like `=>value:`\n    Dynamic(DynamicLabel),\n}","parent":null,"children":[{"krate":0,"index":1633},{"krate":0,"index":1636},{"krate":0,"index":1639}],"decl_id":null,"docs":" A description of a label. Used for error reporting.\n","sig":null,"attributes":[{"value":"/ A description of a label. Used for error reporting.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3061,"byte_end":3116,"line_start":99,"line_end":99,"column_start":1,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1658},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3940,"byte_end":3947,"line_start":125,"line_end":125,"column_start":5,"column_end":12},"name":"Forward","qualname":"::TargetKind::Forward","value":"TargetKind::Forward(&'static str)","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" This targets a local label with the specified name that still has to be defined.\n","sig":null,"attributes":[{"value":"/ This targets a local label with the specified name that still has to be defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3851,"byte_end":3935,"line_start":124,"line_end":124,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1661},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4063,"byte_end":4071,"line_start":127,"line_end":127,"column_start":5,"column_end":13},"name":"Backward","qualname":"::TargetKind::Backward","value":"TargetKind::Backward(&'static str)","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" This targets a local label with the specified name that was already previously defined.\n","sig":null,"attributes":[{"value":"/ This targets a local label with the specified name that was already previously defined.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3967,"byte_end":4058,"line_start":126,"line_end":126,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1664},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4152,"byte_end":4158,"line_start":129,"line_end":129,"column_start":5,"column_end":11},"name":"Global","qualname":"::TargetKind::Global","value":"TargetKind::Global(&'static str)","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" This targets a global label with the specified name.\n","sig":null,"attributes":[{"value":"/ This targets a global label with the specified name.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4091,"byte_end":4147,"line_start":128,"line_end":128,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1667},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4228,"byte_end":4235,"line_start":131,"line_end":131,"column_start":5,"column_end":12},"name":"Dynamic","qualname":"::TargetKind::Dynamic","value":"TargetKind::Dynamic(DynamicLabel)","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" This targets the specified dynamic label.\n","sig":null,"attributes":[{"value":"/ This targets the specified dynamic label.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4178,"byte_end":4223,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1670},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4299,"byte_end":4305,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Extern","qualname":"::TargetKind::Extern","value":"TargetKind::Extern(usize)","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" This targets the specified address.\n","sig":null,"attributes":[{"value":"/ This targets the specified address.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4255,"byte_end":4294,"line_start":132,"line_end":132,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1673},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4416,"byte_end":4423,"line_start":135,"line_end":135,"column_start":5,"column_end":12},"name":"Managed","qualname":"::TargetKind::Managed","value":"TargetKind::Managed","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An already resolved relocation that needs to be adjusted when the buffer moves in memory.\n","sig":null,"attributes":[{"value":"/ An already resolved relocation that needs to be adjusted when the buffer moves in memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4318,"byte_end":4411,"line_start":134,"line_end":134,"column_start":5,"column_end":98}}]},{"kind":"Enum","id":{"krate":0,"index":1657},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3834,"byte_end":3844,"line_start":123,"line_end":123,"column_start":10,"column_end":20},"name":"TargetKind","qualname":"::TargetKind","value":"pub enum TargetKind {\n\n    /// This targets a local label with the specified name that still has to be defined.\n    Forward(&'static str),\n\n    /// This targets a local label with the specified name that was already previously defined.\n    Backward(&'static str),\n\n    /// This targets a global label with the specified name.\n    Global(&'static str),\n\n    /// This targets the specified dynamic label.\n    Dynamic(DynamicLabel),\n\n    /// This targets the specified address.\n    Extern(usize),\n\n    /// An already resolved relocation that needs to be adjusted when the buffer moves in memory.\n    Managed,\n}","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1661},{"krate":0,"index":1664},{"krate":0,"index":1667},{"krate":0,"index":1670},{"krate":0,"index":1673}],"decl_id":null,"docs":" A description of a relocation target. Used for error reporting.\n","sig":null,"attributes":[{"value":"/ A description of a relocation target. Used for error reporting.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3706,"byte_end":3773,"line_start":121,"line_end":121,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1691},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5172,"byte_end":5183,"line_start":156,"line_end":156,"column_start":5,"column_end":16},"name":"CheckFailed","qualname":"::DynasmError::CheckFailed","value":"DynasmError::CheckFailed","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" A check (like `Modifier::check` or `Modifier::check_exact`) that failed\n","sig":null,"attributes":[{"value":"/ A check (like `Modifier::check` or `Modifier::check_exact`) that failed","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5092,"byte_end":5167,"line_start":155,"line_end":155,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1693},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5248,"byte_end":5262,"line_start":158,"line_end":158,"column_start":5,"column_end":19},"name":"DuplicateLabel","qualname":"::DynasmError::DuplicateLabel","value":"DynasmError::DuplicateLabel(LabelKind)","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" A duplicate label dynamic/global label was defined\n","sig":null,"attributes":[{"value":"/ A duplicate label dynamic/global label was defined","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5189,"byte_end":5243,"line_start":157,"line_end":157,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1696},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5304,"byte_end":5316,"line_start":160,"line_end":160,"column_start":5,"column_end":17},"name":"UnknownLabel","qualname":"::DynasmError::UnknownLabel","value":"DynasmError::UnknownLabel(LabelKind)","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" An unknown label\n","sig":null,"attributes":[{"value":"/ An unknown label","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5279,"byte_end":5299,"line_start":159,"line_end":159,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1699},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5419,"byte_end":5439,"line_start":162,"line_end":162,"column_start":5,"column_end":25},"name":"ImpossibleRelocation","qualname":"::DynasmError::ImpossibleRelocation","value":"DynasmError::ImpossibleRelocation(TargetKind)","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" The user tried to declare a relocation too far away from the label it targets\n","sig":null,"attributes":[{"value":"/ The user tried to declare a relocation too far away from the label it targets","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5333,"byte_end":5414,"line_start":161,"line_end":161,"column_start":5,"column_end":86}}]},{"kind":"Enum","id":{"krate":0,"index":1690},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5074,"byte_end":5085,"line_start":154,"line_end":154,"column_start":10,"column_end":21},"name":"DynasmError","qualname":"::DynasmError","value":"pub enum DynasmError {\n\n    /// A check (like `Modifier::check` or `Modifier::check_exact`) that failed\n    CheckFailed,\n\n    /// A duplicate label dynamic/global label was defined\n    DuplicateLabel(LabelKind),\n\n    /// An unknown label\n    UnknownLabel(LabelKind),\n\n    /// The user tried to declare a relocation too far away from the label it targets\n    ImpossibleRelocation(TargetKind),\n}","parent":null,"children":[{"krate":0,"index":1691},{"krate":0,"index":1693},{"krate":0,"index":1696},{"krate":0,"index":1699}],"decl_id":null,"docs":" The various error types generated by dynasm functions.\n","sig":null,"attributes":[{"value":"/ The various error types generated by dynasm functions.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4967,"byte_end":5025,"line_start":152,"line_end":152,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":289},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6512,"byte_end":6521,"line_start":190,"line_end":190,"column_start":11,"column_end":20},"name":"DynasmApi","qualname":"::DynasmApi","value":"DynasmApi: Extend<u8> + for<'a> Extend<&'a u8>","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301}],"decl_id":null,"docs":" This trait represents the interface that must be implemented to allow\n the dynasm preprocessor to assemble into a datastructure.\n","sig":null,"attributes":[{"value":"/ This trait represents the interface that must be implemented to allow","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6366,"byte_end":6439,"line_start":188,"line_end":188,"column_start":1,"column_end":74}},{"value":"/ the dynasm preprocessor to assemble into a datastructure.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6440,"byte_end":6501,"line_start":189,"line_end":189,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6629,"byte_end":6635,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"offset","qualname":"::DynasmApi::offset","value":"pub fn offset(&Self) -> AssemblyOffset","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Report the current offset into the assembling target\n","sig":null,"attributes":[{"value":"/ Report the current offset into the assembling target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6565,"byte_end":6621,"line_start":191,"line_end":191,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6716,"byte_end":6720,"line_start":194,"line_end":194,"column_start":8,"column_end":12},"name":"push","qualname":"::DynasmApi::push","value":"pub fn push(&mut Self, u8)","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Push a byte into the assembling target\n","sig":null,"attributes":[{"value":"/ Push a byte into the assembling target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6666,"byte_end":6708,"line_start":193,"line_end":193,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6837,"byte_end":6842,"line_start":196,"line_end":196,"column_start":8,"column_end":13},"name":"align","qualname":"::DynasmApi::align","value":"pub fn align(&mut Self, usize, u8)","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Push filler until the assembling target end is aligned to the given alignment.\n","sig":null,"attributes":[{"value":"/ Push filler until the assembling target end is aligned to the given alignment.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6747,"byte_end":6829,"line_start":195,"line_end":195,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6959,"byte_end":6966,"line_start":200,"line_end":200,"column_start":8,"column_end":15},"name":"push_i8","qualname":"::DynasmApi::push_i8","value":"pub fn push_i8(&mut Self, i8)","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Push a signed byte into the assembling target\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6888,"byte_end":6897,"line_start":198,"line_end":198,"column_start":5,"column_end":14}},{"value":"/ Push a signed byte into the assembling target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6902,"byte_end":6951,"line_start":199,"line_end":199,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7104,"byte_end":7112,"line_start":205,"line_end":205,"column_start":8,"column_end":16},"name":"push_i16","qualname":"::DynasmApi::push_i16","value":"pub fn push_i16(&mut Self, i16)","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Push a signed word into the assembling target\n","sig":null,"attributes":[{"value":"/ Push a signed word into the assembling target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7033,"byte_end":7082,"line_start":203,"line_end":203,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7087,"byte_end":7096,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7268,"byte_end":7276,"line_start":210,"line_end":210,"column_start":8,"column_end":16},"name":"push_i32","qualname":"::DynasmApi::push_i32","value":"pub fn push_i32(&mut Self, i32)","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Push a signed doubleword into the assembling target\n","sig":null,"attributes":[{"value":"/ Push a signed doubleword into the assembling target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7191,"byte_end":7246,"line_start":208,"line_end":208,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7251,"byte_end":7260,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7430,"byte_end":7438,"line_start":215,"line_end":215,"column_start":8,"column_end":16},"name":"push_i64","qualname":"::DynasmApi::push_i64","value":"pub fn push_i64(&mut Self, i64)","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Push a signed quadword into the assembling target\n","sig":null,"attributes":[{"value":"/ Push a signed quadword into the assembling target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7355,"byte_end":7408,"line_start":213,"line_end":213,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7413,"byte_end":7422,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7590,"byte_end":7598,"line_start":220,"line_end":220,"column_start":8,"column_end":16},"name":"push_u16","qualname":"::DynasmApi::push_u16","value":"pub fn push_u16(&mut Self, u16)","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Push an usigned word into the assembling target\n","sig":null,"attributes":[{"value":"/ Push an usigned word into the assembling target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7517,"byte_end":7568,"line_start":218,"line_end":218,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7573,"byte_end":7582,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7756,"byte_end":7764,"line_start":225,"line_end":225,"column_start":8,"column_end":16},"name":"push_u32","qualname":"::DynasmApi::push_u32","value":"pub fn push_u32(&mut Self, u32)","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Push an usigned doubleword into the assembling target\n","sig":null,"attributes":[{"value":"/ Push an usigned doubleword into the assembling target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7677,"byte_end":7734,"line_start":223,"line_end":223,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7739,"byte_end":7748,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7920,"byte_end":7928,"line_start":230,"line_end":230,"column_start":8,"column_end":16},"name":"push_u64","qualname":"::DynasmApi::push_u64","value":"pub fn push_u64(&mut Self, u64)","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" Push an usigned quadword into the assembling target\n","sig":null,"attributes":[{"value":"/ Push an usigned quadword into the assembling target","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7843,"byte_end":7898,"line_start":228,"line_end":228,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":7903,"byte_end":7912,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8112,"byte_end":8125,"line_start":235,"line_end":235,"column_start":8,"column_end":21},"name":"runtime_error","qualname":"::DynasmApi::runtime_error","value":"pub fn runtime_error(&Self, &'static str) -> !","parent":{"krate":0,"index":289},"children":[],"decl_id":null,"docs":" This function is called in when a runtime error has to be generated. It panics.\n","sig":null,"attributes":[{"value":"/ This function is called in when a runtime error has to be generated. It panics.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8007,"byte_end":8090,"line_start":233,"line_end":233,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8095,"byte_end":8104,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8307,"byte_end":8321,"line_start":241,"line_end":241,"column_start":11,"column_end":25},"name":"DynasmLabelApi","qualname":"::DynasmLabelApi","value":"DynasmLabelApi: DynasmApi","parent":null,"children":[{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316}],"decl_id":null,"docs":" This trait extends DynasmApi to not only allow assembling, but also labels and various directives\n","sig":null,"attributes":[{"value":"/ This trait extends DynasmApi to not only allow assembling, but also labels and various directives","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8195,"byte_end":8296,"line_start":240,"line_end":240,"column_start":1,"column_end":102}}]},{"kind":"Type","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8400,"byte_end":8410,"line_start":243,"line_end":243,"column_start":10,"column_end":20},"name":"Relocation","qualname":"::DynasmLabelApi::Relocation","value":"type Relocation: Relocation;","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" The relocation info type this assembler uses. \n","sig":null,"attributes":[{"value":"/ The relocation info type this assembler uses. ","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8340,"byte_end":8390,"line_start":242,"line_end":242,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8479,"byte_end":8490,"line_start":246,"line_end":246,"column_start":8,"column_end":19},"name":"local_label","qualname":"::DynasmLabelApi::local_label","value":"pub fn local_label(&mut Self, &'static str)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Record the definition of a local label\n","sig":null,"attributes":[{"value":"/ Record the definition of a local label","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8429,"byte_end":8471,"line_start":245,"line_end":245,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8580,"byte_end":8592,"line_start":248,"line_end":248,"column_start":8,"column_end":20},"name":"global_label","qualname":"::DynasmLabelApi::global_label","value":"pub fn global_label(&mut Self, &'static str)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Record the definition of a global label\n","sig":null,"attributes":[{"value":"/ Record the definition of a global label","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8529,"byte_end":8572,"line_start":247,"line_end":247,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8682,"byte_end":8695,"line_start":250,"line_end":250,"column_start":8,"column_end":21},"name":"dynamic_label","qualname":"::DynasmLabelApi::dynamic_label","value":"pub fn dynamic_label(&mut Self, DynamicLabel)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Record the definition of a dynamic label\n","sig":null,"attributes":[{"value":"/ Record the definition of a dynamic label","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8630,"byte_end":8674,"line_start":249,"line_end":249,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8808,"byte_end":8821,"line_start":253,"line_end":253,"column_start":8,"column_end":21},"name":"forward_reloc","qualname":"::DynasmLabelApi::forward_reloc","value":"pub fn forward_reloc(&mut Self, &'static str, isize, u8, u8,\n                     <Self::Relocation as Relocation>::Encoding)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Record a relocation spot for a forward reference to a local label\n","sig":null,"attributes":[{"value":"/ Record a relocation spot for a forward reference to a local label","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8731,"byte_end":8800,"line_start":252,"line_end":252,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":9168,"byte_end":9182,"line_start":257,"line_end":257,"column_start":8,"column_end":22},"name":"backward_reloc","qualname":"::DynasmLabelApi::backward_reloc","value":"pub fn backward_reloc(&mut Self, &'static str, isize, u8, u8,\n                      <Self::Relocation as Relocation>::Encoding)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Record a relocation spot for a backward reference to a local label\n","sig":null,"attributes":[{"value":"/ Record a relocation spot for a backward reference to a local label","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":9090,"byte_end":9160,"line_start":256,"line_end":256,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":9521,"byte_end":9533,"line_start":261,"line_end":261,"column_start":8,"column_end":20},"name":"global_reloc","qualname":"::DynasmLabelApi::global_reloc","value":"pub fn global_reloc(&mut Self, &'static str, isize, u8, u8,\n                    <Self::Relocation as Relocation>::Encoding)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Record a relocation spot for a reference to a global label\n","sig":null,"attributes":[{"value":"/ Record a relocation spot for a reference to a global label","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":9451,"byte_end":9513,"line_start":260,"line_end":260,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":9873,"byte_end":9886,"line_start":265,"line_end":265,"column_start":8,"column_end":21},"name":"dynamic_reloc","qualname":"::DynasmLabelApi::dynamic_reloc","value":"pub fn dynamic_reloc(&mut Self, DynamicLabel, isize, u8, u8,\n                     <Self::Relocation as Relocation>::Encoding)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Record a relocation spot for a reference to a dynamic label\n","sig":null,"attributes":[{"value":"/ Record a relocation spot for a reference to a dynamic label","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":9802,"byte_end":9865,"line_start":264,"line_end":264,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":10213,"byte_end":10223,"line_start":269,"line_end":269,"column_start":8,"column_end":18},"name":"bare_reloc","qualname":"::DynasmLabelApi::bare_reloc","value":"pub fn bare_reloc(&mut Self, usize, u8, u8,\n                  <Self::Relocation as Relocation>::Encoding)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Record a relocation spot to an arbitrary target.\n","sig":null,"attributes":[{"value":"/ Record a relocation spot to an arbitrary target.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":10153,"byte_end":10205,"line_start":268,"line_end":268,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":10524,"byte_end":10542,"line_start":274,"line_end":274,"column_start":8,"column_end":26},"name":"forward_relocation","qualname":"::DynasmLabelApi::forward_relocation","value":"pub fn forward_relocation(&mut Self, &'static str, isize, u8, u8,\n                          Self::Relocation)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Equivalent of forward_reloc, but takes a non-encoded relocation\n","sig":null,"attributes":[{"value":"/ Equivalent of forward_reloc, but takes a non-encoded relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":10449,"byte_end":10516,"line_start":273,"line_end":273,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":10736,"byte_end":10755,"line_start":276,"line_end":276,"column_start":8,"column_end":27},"name":"backward_relocation","qualname":"::DynasmLabelApi::backward_relocation","value":"pub fn backward_relocation(&mut Self, &'static str, isize, u8, u8,\n                           Self::Relocation)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Equivalent of backward_reloc, but takes a non-encoded relocation\n","sig":null,"attributes":[{"value":"/ Equivalent of backward_reloc, but takes a non-encoded relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":10660,"byte_end":10728,"line_start":275,"line_end":275,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":10946,"byte_end":10963,"line_start":278,"line_end":278,"column_start":8,"column_end":25},"name":"global_relocation","qualname":"::DynasmLabelApi::global_relocation","value":"pub fn global_relocation(&mut Self, &'static str, isize, u8, u8,\n                         Self::Relocation)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Equivalent of global_reloc, but takes a non-encoded relocation\n","sig":null,"attributes":[{"value":"/ Equivalent of global_reloc, but takes a non-encoded relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":10872,"byte_end":10938,"line_start":277,"line_end":277,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11157,"byte_end":11175,"line_start":280,"line_end":280,"column_start":8,"column_end":26},"name":"dynamic_relocation","qualname":"::DynasmLabelApi::dynamic_relocation","value":"pub fn dynamic_relocation(&mut Self, DynamicLabel, isize, u8, u8,\n                          Self::Relocation)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Equivalent of dynamic_reloc, but takes a non-encoded relocation\n","sig":null,"attributes":[{"value":"/ Equivalent of dynamic_reloc, but takes a non-encoded relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11082,"byte_end":11149,"line_start":279,"line_end":279,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11365,"byte_end":11380,"line_start":282,"line_end":282,"column_start":8,"column_end":23},"name":"bare_relocation","qualname":"::DynasmLabelApi::bare_relocation","value":"pub fn bare_relocation(&mut Self, usize, u8, u8, Self::Relocation)","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Equivalent of bare_reloc, but takes a non-encoded relocation\n","sig":null,"attributes":[{"value":"/ Equivalent of bare_reloc, but takes a non-encoded relocation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11293,"byte_end":11357,"line_start":281,"line_end":281,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1713},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11707,"byte_end":11722,"line_start":289,"line_end":289,"column_start":12,"column_end":27},"name":"SimpleAssembler","qualname":"::SimpleAssembler","value":"SimpleAssembler { ops }","parent":null,"children":[{"krate":0,"index":1714}],"decl_id":null,"docs":" An assembler that is purely a `Vec<u8>`. It doesn't support labels or architecture-specific directives,\n but can be used to easily inspect generated code. It is intended to be used in testcases.\n","sig":null,"attributes":[{"value":"/ An assembler that is purely a `Vec<u8>`. It doesn't support labels or architecture-specific directives,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11470,"byte_end":11577,"line_start":286,"line_end":286,"column_start":1,"column_end":108}},{"value":"/ but can be used to easily inspect generated code. It is intended to be used in testcases.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11578,"byte_end":11671,"line_start":287,"line_end":287,"column_start":1,"column_end":94}}]},{"kind":"Field","id":{"krate":0,"index":1714},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11764,"byte_end":11767,"line_start":291,"line_end":291,"column_start":9,"column_end":12},"name":"ops","qualname":"::SimpleAssembler::ops","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" The assembling buffer.\n","sig":null,"attributes":[{"value":"/ The assembling buffer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11729,"byte_end":11755,"line_start":290,"line_end":290,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11882,"byte_end":11885,"line_start":296,"line_end":296,"column_start":12,"column_end":15},"name":"new","qualname":"<SimpleAssembler>::new","value":"pub fn new() -> SimpleAssembler","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `SimpleAssembler`, containing an empty `Vec`.\n","sig":null,"attributes":[{"value":"/ Creates a new `SimpleAssembler`, containing an empty `Vec`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11807,"byte_end":11870,"line_start":295,"line_end":295,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":12055,"byte_end":12060,"line_start":303,"line_end":303,"column_start":12,"column_end":17},"name":"alter","qualname":"<SimpleAssembler>::alter","value":"pub fn alter(&mut Self) -> UncommittedModifier","parent":null,"children":[],"decl_id":null,"docs":" Use an `UncommittedModifier` to alter uncommitted code.\n","sig":null,"attributes":[{"value":"/ Use an `UncommittedModifier` to alter uncommitted code.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11984,"byte_end":12043,"line_start":302,"line_end":302,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":12256,"byte_end":12264,"line_start":308,"line_end":308,"column_start":12,"column_end":20},"name":"finalize","qualname":"<SimpleAssembler>::finalize","value":"pub fn finalize(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Destroys this assembler, returning the `Vec<u8>` contained within\n","sig":null,"attributes":[{"value":"/ Destroys this assembler, returning the `Vec<u8>` contained within","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":12175,"byte_end":12244,"line_start":307,"line_end":307,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1719},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13273,"byte_end":13285,"line_start":346,"line_end":346,"column_start":12,"column_end":24},"name":"VecAssembler","qualname":"::VecAssembler","value":"VecAssembler {  }","parent":null,"children":[{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725}],"decl_id":null,"docs":" An assembler that assembles into a `Vec<u8>`, while supporting labels. To support the different types of relocations\n it requires a base address of the to be assembled code to be specified.\n","sig":null,"attributes":[{"value":"/ An assembler that assembles into a `Vec<u8>`, while supporting labels. To support the different types of relocations","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13048,"byte_end":13168,"line_start":343,"line_end":343,"column_start":1,"column_end":121}},{"value":"/ it requires a base address of the to be assembled code to be specified.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13169,"byte_end":13244,"line_start":344,"line_end":344,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13552,"byte_end":13555,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"new","qualname":"<VecAssembler<R>>::new","value":"pub fn new(usize) -> VecAssembler<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new VecAssembler, with the specified base address.\n","sig":null,"attributes":[{"value":"/ Creates a new VecAssembler, with the specified base address.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13476,"byte_end":13540,"line_start":355,"line_end":355,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13842,"byte_end":13859,"line_start":367,"line_end":367,"column_start":12,"column_end":29},"name":"new_dynamic_label","qualname":"<VecAssembler<R>>::new_dynamic_label","value":"pub fn new_dynamic_label(&mut Self) -> DynamicLabel","parent":null,"children":[],"decl_id":null,"docs":" Create a new dynamic label ID\n","sig":null,"attributes":[{"value":"/ Create a new dynamic label ID","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13797,"byte_end":13830,"line_start":366,"line_end":366,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":14112,"byte_end":14118,"line_start":373,"line_end":373,"column_start":12,"column_end":18},"name":"commit","qualname":"<VecAssembler<R>>::commit","value":"pub fn commit(&mut Self) -> Result<(), DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Resolves any relocations emitted to the assembler before this point.\n If an impossible relocation was specified before this point, returns them here.\n","sig":null,"attributes":[{"value":"/ Resolves any relocations emitted to the assembler before this point.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13940,"byte_end":14012,"line_start":371,"line_end":371,"column_start":5,"column_end":77}},{"value":"/ If an impossible relocation was specified before this point, returns them here.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":14017,"byte_end":14100,"line_start":372,"line_end":372,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":15423,"byte_end":15428,"line_start":407,"line_end":407,"column_start":12,"column_end":17},"name":"alter","qualname":"<VecAssembler<R>>::alter","value":"pub fn alter(&mut Self) -> UncommittedModifier","parent":null,"children":[],"decl_id":null,"docs":" Use an `UncommittedModifier` to alter uncommitted code.\n This does not allow the user to change labels/relocations.\n","sig":null,"attributes":[{"value":"/ Use an `UncommittedModifier` to alter uncommitted code.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":15285,"byte_end":15344,"line_start":405,"line_end":405,"column_start":5,"column_end":64}},{"value":"/ This does not allow the user to change labels/relocations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":15349,"byte_end":15411,"line_start":406,"line_end":406,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":15617,"byte_end":15623,"line_start":412,"line_end":412,"column_start":12,"column_end":18},"name":"labels","qualname":"<VecAssembler<R>>::labels","value":"pub fn labels(&Self) -> &LabelRegistry","parent":null,"children":[],"decl_id":null,"docs":" Provides access to the assemblers internal labels registry\n","sig":null,"attributes":[{"value":"/ Provides access to the assemblers internal labels registry","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":15543,"byte_end":15605,"line_start":411,"line_end":411,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":15765,"byte_end":15775,"line_start":417,"line_end":417,"column_start":12,"column_end":22},"name":"labels_mut","qualname":"<VecAssembler<R>>::labels_mut","value":"pub fn labels_mut(&mut Self) -> &mut LabelRegistry","parent":null,"children":[],"decl_id":null,"docs":" Provides mutable access to the assemblers internal labels registry\n","sig":null,"attributes":[{"value":"/ Provides mutable access to the assemblers internal labels registry","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":15683,"byte_end":15753,"line_start":416,"line_end":416,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":16050,"byte_end":16058,"line_start":423,"line_end":423,"column_start":12,"column_end":20},"name":"finalize","qualname":"<VecAssembler<R>>::finalize","value":"pub fn finalize(Self) -> Result<Vec<u8>, DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Finalizes the `VecAssembler`, returning the resulting `Vec<u8>` containing all assembled data.\n this implicitly commits any relocations beforehand and returns an error if required.\n","sig":null,"attributes":[{"value":"/ Finalizes the `VecAssembler`, returning the resulting `Vec<u8>` containing all assembled data.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":15847,"byte_end":15945,"line_start":421,"line_end":421,"column_start":5,"column_end":103}},{"value":"/ this implicitly commits any relocations beforehand and returns an error if required.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":15950,"byte_end":16038,"line_start":422,"line_end":422,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":1729},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20084,"byte_end":20093,"line_start":525,"line_end":525,"column_start":12,"column_end":21},"name":"Assembler","qualname":"::Assembler","value":"Assembler {  }","parent":null,"children":[{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736}],"decl_id":null,"docs":" A full assembler implementation. Supports labels, all types of relocations,\n incremental compilation and multithreaded execution with simultaneous compiltion.\n Its implementation guarantees no memory is executable and writable at the same time.\n","sig":null,"attributes":[{"value":"/ A full assembler implementation. Supports labels, all types of relocations,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":19801,"byte_end":19880,"line_start":521,"line_end":521,"column_start":1,"column_end":80}},{"value":"/ incremental compilation and multithreaded execution with simultaneous compiltion.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":19881,"byte_end":19966,"line_start":522,"line_end":522,"column_start":1,"column_end":86}},{"value":"/ Its implementation guarantees no memory is executable and writable at the same time.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":19967,"byte_end":20055,"line_start":523,"line_end":523,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20406,"byte_end":20409,"line_start":536,"line_end":536,"column_start":12,"column_end":15},"name":"new","qualname":"<Assembler<R>>::new","value":"pub fn new() -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty assembler, with initial allocation size `page_size`.\n","sig":null,"attributes":[{"value":"/ Create a new, empty assembler, with initial allocation size `page_size`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20318,"byte_end":20394,"line_start":535,"line_end":535,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20756,"byte_end":20773,"line_start":548,"line_end":548,"column_start":12,"column_end":29},"name":"new_dynamic_label","qualname":"<Assembler<R>>::new_dynamic_label","value":"pub fn new_dynamic_label(&mut Self) -> DynamicLabel","parent":null,"children":[],"decl_id":null,"docs":" Create a new dynamic label ID\n","sig":null,"attributes":[{"value":"/ Create a new dynamic label ID","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20711,"byte_end":20744,"line_start":547,"line_end":547,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20992,"byte_end":21009,"line_start":554,"line_end":554,"column_start":12,"column_end":29},"name":"alter_uncommitted","qualname":"<Assembler<R>>::alter_uncommitted","value":"pub fn alter_uncommitted(&mut Self) -> UncommittedModifier","parent":null,"children":[],"decl_id":null,"docs":" Use an `UncommittedModifier` to alter uncommitted code.\n This does not allow the user to change labels/relocations.\n","sig":null,"attributes":[{"value":"/ Use an `UncommittedModifier` to alter uncommitted code.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20854,"byte_end":20913,"line_start":552,"line_end":552,"column_start":5,"column_end":64}},{"value":"/ This does not allow the user to change labels/relocations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20918,"byte_end":20980,"line_start":553,"line_end":553,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":21452,"byte_end":21457,"line_start":562,"line_end":562,"column_start":12,"column_end":17},"name":"alter","qualname":"<Assembler<R>>::alter","value":"pub fn alter<F, O>(&mut Self, F) -> Result<O, DynasmError> where\nF: FnOnce(&mut Modifier<, R>) -> O","parent":null,"children":[],"decl_id":null,"docs":" Use a `Modifier` to alter committed code directly. While this is happening\n no code can be executed as the relevant pages are remapped as writable.\n This API supports defining new labels/relocations, and overwriting previously defined relocations.\n","sig":null,"attributes":[{"value":"/ Use a `Modifier` to alter committed code directly. While this is happening","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":21175,"byte_end":21253,"line_start":559,"line_end":559,"column_start":5,"column_end":83}},{"value":"/ no code can be executed as the relevant pages are remapped as writable.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":21258,"byte_end":21333,"line_start":560,"line_end":560,"column_start":5,"column_end":80}},{"value":"/ This API supports defining new labels/relocations, and overwriting previously defined relocations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":21338,"byte_end":21440,"line_start":561,"line_end":561,"column_start":5,"column_end":107}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":22745,"byte_end":22751,"line_start":601,"line_end":601,"column_start":12,"column_end":18},"name":"commit","qualname":"<Assembler<R>>::commit","value":"pub fn commit(&mut Self) -> Result<(), DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Commit code, flushing the temporary internal assembling buffer to the mapped executable memory.\n This makes assembled code available for execution.\n","sig":null,"attributes":[{"value":"/ Commit code, flushing the temporary internal assembling buffer to the mapped executable memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":22575,"byte_end":22674,"line_start":599,"line_end":599,"column_start":5,"column_end":104}},{"value":"/ This makes assembled code available for execution.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":22679,"byte_end":22733,"line_start":600,"line_end":600,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":23679,"byte_end":23687,"line_start":626,"line_end":626,"column_start":12,"column_end":20},"name":"finalize","qualname":"<Assembler<R>>::finalize","value":"pub fn finalize(Self) -> Result<ExecutableBuffer, Self>","parent":null,"children":[],"decl_id":null,"docs":" Finalize this assembler, returning the internal executablebuffer if no Executor instances exist.\n This panics if any uncommitted changes caused errors near the end. To handle these, call `commit()` explicitly beforehand.\n","sig":null,"attributes":[{"value":"/ Finalize this assembler, returning the internal executablebuffer if no Executor instances exist.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":23436,"byte_end":23536,"line_start":624,"line_end":624,"column_start":5,"column_end":105}},{"value":"/ This panics if any uncommitted changes caused errors near the end. To handle these, call `commit()` explicitly beforehand.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":23541,"byte_end":23667,"line_start":625,"line_end":625,"column_start":5,"column_end":131}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":24129,"byte_end":24135,"line_start":638,"line_end":638,"column_start":12,"column_end":18},"name":"reader","qualname":"<Assembler<R>>::reader","value":"pub fn reader(&Self) -> Executor","parent":null,"children":[],"decl_id":null,"docs":" Create an executor which can be used to execute code while still assembling code\n","sig":null,"attributes":[{"value":"/ Create an executor which can be used to execute code while still assembling code","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":24033,"byte_end":24117,"line_start":637,"line_end":637,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":24316,"byte_end":24322,"line_start":645,"line_end":645,"column_start":12,"column_end":18},"name":"labels","qualname":"<Assembler<R>>::labels","value":"pub fn labels(&Self) -> &LabelRegistry","parent":null,"children":[],"decl_id":null,"docs":" Provides access to the assemblers internal labels registry\n","sig":null,"attributes":[{"value":"/ Provides access to the assemblers internal labels registry","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":24242,"byte_end":24304,"line_start":644,"line_end":644,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":24464,"byte_end":24474,"line_start":650,"line_end":650,"column_start":12,"column_end":22},"name":"labels_mut","qualname":"<Assembler<R>>::labels_mut","value":"pub fn labels_mut(&mut Self) -> &mut LabelRegistry","parent":null,"children":[],"decl_id":null,"docs":" Provides mutable access to the assemblers internal labels registry\n","sig":null,"attributes":[{"value":"/ Provides mutable access to the assemblers internal labels registry","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":24382,"byte_end":24452,"line_start":649,"line_end":649,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1740},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":30393,"byte_end":30401,"line_start":802,"line_end":802,"column_start":12,"column_end":20},"name":"Modifier","qualname":"::Modifier","value":"Modifier {  }","parent":null,"children":[{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1749},{"krate":0,"index":1750}],"decl_id":null,"docs":" Allows modification of already committed assembly code. Contains an internal cursor\n into the emitted assembly, initialized to the start, that can be moved around either with the\n `goto` function, or just by assembling new code into this `Modifier`.\n","sig":null,"attributes":[{"value":"/ Allows modification of already committed assembly code. Contains an internal cursor","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":30105,"byte_end":30192,"line_start":798,"line_end":798,"column_start":1,"column_end":88}},{"value":"/ into the emitted assembly, initialized to the start, that can be moved around either with the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":30193,"byte_end":30290,"line_start":799,"line_end":799,"column_start":1,"column_end":98}},{"value":"/ `goto` function, or just by assembling new code into this `Modifier`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":30291,"byte_end":30364,"line_start":800,"line_end":800,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":30801,"byte_end":30805,"line_start":817,"line_end":817,"column_start":12,"column_end":16},"name":"goto","qualname":"<Modifier>::goto","value":"pub fn goto(&mut Self, AssemblyOffset)","parent":null,"children":[],"decl_id":null,"docs":" Move the modifier cursor to the selected location.\n","sig":null,"attributes":[{"value":"/ Move the modifier cursor to the selected location.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":30735,"byte_end":30789,"line_start":816,"line_end":816,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":31104,"byte_end":31109,"line_start":824,"line_end":824,"column_start":12,"column_end":17},"name":"check","qualname":"<Modifier>::check","value":"pub fn check(&Self, AssemblyOffset) -> Result<(), DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Check that the modifier cursor has not moved past the specified location.\n","sig":null,"attributes":[{"value":"/ Check that the modifier cursor has not moved past the specified location.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":31015,"byte_end":31092,"line_start":823,"line_end":823,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":411},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":31392,"byte_end":31403,"line_start":833,"line_end":833,"column_start":12,"column_end":23},"name":"check_exact","qualname":"<Modifier>::check_exact","value":"pub fn check_exact(&Self, AssemblyOffset) -> Result<(), DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Check that the modifier cursor is exactly at the specified location.\n","sig":null,"attributes":[{"value":"/ Check that the modifier cursor is exactly at the specified location.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":31308,"byte_end":31380,"line_start":832,"line_end":832,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1755},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38013,"byte_end":38032,"line_start":1004,"line_end":1004,"column_start":12,"column_end":31},"name":"UncommittedModifier","qualname":"::UncommittedModifier","value":"UncommittedModifier {  }","parent":null,"children":[{"krate":0,"index":1757},{"krate":0,"index":1758},{"krate":0,"index":1759}],"decl_id":null,"docs":" This struct is a wrapper around an `Assembler` normally created using the\n `Assembler.alter_uncommitted` method. It allows the user to edit parts\n of the assembling buffer that cannot be determined easily or efficiently\n in advance. Due to limitations of the label resolution algorithms, this\n assembler does not allow labels to be used.\n","sig":null,"attributes":[{"value":"/ This struct is a wrapper around an `Assembler` normally created using the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":37631,"byte_end":37708,"line_start":998,"line_end":998,"column_start":1,"column_end":78}},{"value":"/ `Assembler.alter_uncommitted` method. It allows the user to edit parts","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":37709,"byte_end":37783,"line_start":999,"line_end":999,"column_start":1,"column_end":75}},{"value":"/ of the assembling buffer that cannot be determined easily or efficiently","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":37784,"byte_end":37860,"line_start":1000,"line_end":1000,"column_start":1,"column_end":77}},{"value":"/ in advance. Due to limitations of the label resolution algorithms, this","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":37861,"byte_end":37936,"line_start":1001,"line_end":1001,"column_start":1,"column_end":76}},{"value":"/ assembler does not allow labels to be used.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":37937,"byte_end":37984,"line_start":1002,"line_end":1002,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38200,"byte_end":38203,"line_start":1012,"line_end":1012,"column_start":12,"column_end":15},"name":"new","qualname":"<UncommittedModifier>::new","value":"pub fn new(&mut Vec<u8>, AssemblyOffset) -> UncommittedModifier","parent":null,"children":[],"decl_id":null,"docs":" create a new uncommittedmodifier\n","sig":null,"attributes":[{"value":"/ create a new uncommittedmodifier","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38152,"byte_end":38188,"line_start":1011,"line_end":1011,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38496,"byte_end":38500,"line_start":1021,"line_end":1021,"column_start":12,"column_end":16},"name":"goto","qualname":"<UncommittedModifier>::goto","value":"pub fn goto(&mut Self, AssemblyOffset)","parent":null,"children":[],"decl_id":null,"docs":" Sets the current modification offset to the given value\n","sig":null,"attributes":[{"value":"/ Sets the current modification offset to the given value","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38425,"byte_end":38484,"line_start":1020,"line_end":1020,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38681,"byte_end":38686,"line_start":1026,"line_end":1026,"column_start":12,"column_end":17},"name":"check","qualname":"<UncommittedModifier>::check","value":"pub fn check(&mut Self, AssemblyOffset) -> Result<(), DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Checks that the current modification offset is not larger than the specified offset.\n","sig":null,"attributes":[{"value":"/ Checks that the current modification offset is not larger than the specified offset.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38581,"byte_end":38669,"line_start":1025,"line_end":1025,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38978,"byte_end":38989,"line_start":1035,"line_end":1035,"column_start":12,"column_end":23},"name":"check_exact","qualname":"<UncommittedModifier>::check_exact","value":"pub fn check_exact(&mut Self, AssemblyOffset) -> Result<(), DynasmError>","parent":null,"children":[],"decl_id":null,"docs":" Checks that the current modification offset is exactly the specified offset.\n","sig":null,"attributes":[{"value":"/ Checks that the current modification offset is exactly the specified offset.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38886,"byte_end":38966,"line_start":1034,"line_end":1034,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40291,"byte_end":40299,"line_start":1081,"line_end":1081,"column_start":11,"column_end":19},"name":"Register","qualname":"::Register","value":"Register: Debug + Clone + Copy + PartialEq + Eq + Hash","parent":null,"children":[{"krate":0,"index":463}],"decl_id":null,"docs":" A trait abstracting over architectural register families. This is usually implemented\n over an enum of all available registers in each family. This allows for code that is generic\n over register families.\n","sig":null,"attributes":[{"value":"/ A trait abstracting over architectural register families. This is usually implemented","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40066,"byte_end":40155,"line_start":1078,"line_end":1078,"column_start":1,"column_end":90}},{"value":"/ over an enum of all available registers in each family. This allows for code that is generic","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40156,"byte_end":40252,"line_start":1079,"line_end":1079,"column_start":1,"column_end":97}},{"value":"/ over register families.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40253,"byte_end":40280,"line_start":1080,"line_end":1080,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40515,"byte_end":40519,"line_start":1084,"line_end":1084,"column_start":8,"column_end":12},"name":"code","qualname":"::Register::code","value":"pub fn code(&Self) -> u8","parent":{"krate":0,"index":462},"children":[],"decl_id":null,"docs":" Returns the integer ID of the register. Usually equivalent to casting\n the enum to an u8, but allows you to be generic over the register family.\n","sig":null,"attributes":[{"value":"/ Returns the integer ID of the register. Usually equivalent to casting","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40352,"byte_end":40425,"line_start":1082,"line_end":1082,"column_start":5,"column_end":78}},{"value":"/ the enum to an u8, but allows you to be generic over the register family.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40430,"byte_end":40507,"line_start":1083,"line_end":1083,"column_start":5,"column_end":82}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41513,"byte_end":41529,"line_start":31,"line_end":31,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43200,"byte_end":43213,"line_start":79,"line_end":79,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44401,"byte_end":44417,"line_start":121,"line_end":121,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44570,"byte_end":44583,"line_start":130,"line_end":130,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44728,"byte_end":44744,"line_start":139,"line_end":139,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44943,"byte_end":44956,"line_start":150,"line_end":150,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":45158,"byte_end":45171,"line_start":161,"line_end":161,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":46323,"byte_end":46336,"line_start":29,"line_end":29,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":50546,"byte_end":50559,"line_start":141,"line_end":141,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53722,"byte_end":53730,"line_start":217,"line_end":217,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":56943,"byte_end":56956,"line_start":286,"line_end":286,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59623,"byte_end":59636,"line_start":350,"line_end":350,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":61756,"byte_end":61763,"line_start":412,"line_end":412,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71164,"byte_end":71178,"line_start":52,"line_end":52,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":72009,"byte_end":72023,"line_start":80,"line_end":80,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":75210,"byte_end":75223,"line_start":34,"line_end":34,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":79131,"byte_end":79144,"line_start":33,"line_end":33,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84792,"byte_end":84809,"line_start":48,"line_end":48,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":86942,"byte_end":86959,"line_start":106,"line_end":106,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2071,"byte_end":2083,"line_start":70,"line_end":70,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2641,"byte_end":2649,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3409,"byte_end":3418,"line_start":110,"line_end":110,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4450,"byte_end":4460,"line_start":138,"line_end":138,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5478,"byte_end":5489,"line_start":165,"line_end":165,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5976,"byte_end":5987,"line_start":176,"line_end":176,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11785,"byte_end":11800,"line_start":294,"line_end":294,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":12330,"byte_end":12345,"line_start":313,"line_end":313,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":12485,"byte_end":12500,"line_start":319,"line_end":319,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":12635,"byte_end":12650,"line_start":325,"line_end":325,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13454,"byte_end":13466,"line_start":354,"line_end":354,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":16192,"byte_end":16204,"line_start":429,"line_end":429,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":16362,"byte_end":16374,"line_start":435,"line_end":435,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":16527,"byte_end":16539,"line_start":441,"line_end":441,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":16978,"byte_end":16990,"line_start":458,"line_end":458,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20299,"byte_end":20308,"line_start":534,"line_end":534,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":26119,"byte_end":26128,"line_start":698,"line_end":698,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":26286,"byte_end":26295,"line_start":704,"line_end":704,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":26448,"byte_end":26457,"line_start":710,"line_end":710,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":26932,"byte_end":26941,"line_start":729,"line_end":729,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":30713,"byte_end":30721,"line_start":815,"line_end":815,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":33275,"byte_end":33283,"line_start":888,"line_end":888,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":33577,"byte_end":33585,"line_start":897,"line_end":897,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":33876,"byte_end":33884,"line_start":906,"line_end":906,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":34382,"byte_end":34390,"line_start":926,"line_end":926,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38122,"byte_end":38141,"line_start":1010,"line_end":1010,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":39211,"byte_end":39230,"line_start":1044,"line_end":1044,"column_start":24,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":39714,"byte_end":39733,"line_start":1064,"line_end":1064,"column_start":25,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":39910,"byte_end":39929,"line_start":1072,"line_end":1072,"column_start":33,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":388,"byte_end":392,"line_start":7,"line_end":7,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":402,"byte_end":412,"line_start":8,"line_end":8,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":36}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":422,"byte_end":433,"line_start":9,"line_end":9,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":138}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":796,"byte_end":799,"line_start":28,"line_end":28,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":169}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":809,"byte_end":812,"line_start":29,"line_end":29,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":198}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":822,"byte_end":829,"line_start":30,"line_end":30,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":219}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":41513,"byte_end":41529,"line_start":31,"line_end":31,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":43200,"byte_end":43213,"line_start":79,"line_end":79,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44401,"byte_end":44417,"line_start":121,"line_end":121,"column_start":18,"column_end":34},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":464},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44570,"byte_end":44583,"line_start":130,"line_end":130,"column_start":18,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":2033}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44728,"byte_end":44744,"line_start":139,"line_end":139,"column_start":16,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":464},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":44943,"byte_end":44956,"line_start":150,"line_end":150,"column_start":16,"column_end":29},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":2242}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\mmap.rs","byte_start":45158,"byte_end":45171,"line_start":161,"line_end":161,"column_start":19,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":469},"to":{"krate":2,"index":2255}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":46323,"byte_end":46336,"line_start":29,"line_end":29,"column_start":6,"column_end":19},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":50546,"byte_end":50559,"line_start":141,"line_end":141,"column_start":6,"column_end":19},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":53722,"byte_end":53730,"line_start":217,"line_end":217,"column_start":21,"column_end":29},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":491},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":56943,"byte_end":56956,"line_start":286,"line_end":286,"column_start":21,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":59623,"byte_end":59636,"line_start":350,"line_end":350,"column_start":21,"column_end":34},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\components.rs","byte_start":61756,"byte_end":61763,"line_start":412,"line_end":412,"column_start":6,"column_end":13},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":71164,"byte_end":71178,"line_start":52,"line_end":52,"column_start":6,"column_end":20},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":573},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\relocations.rs","byte_start":72009,"byte_end":72023,"line_start":80,"line_end":80,"column_start":21,"column_end":35},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":597},"to":{"krate":0,"index":143}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x64.rs","byte_start":75210,"byte_end":75223,"line_start":34,"line_end":34,"column_start":21,"column_end":34},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":624},"to":{"krate":0,"index":143}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\x86.rs","byte_start":79131,"byte_end":79144,"line_start":33,"line_end":33,"column_start":21,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":831},"to":{"krate":0,"index":143}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":84792,"byte_end":84809,"line_start":48,"line_end":48,"column_start":6,"column_end":23},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\aarch64.rs","byte_start":86942,"byte_end":86959,"line_start":106,"line_end":106,"column_start":21,"column_end":38},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1219},"to":{"krate":0,"index":143}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2071,"byte_end":2083,"line_start":70,"line_end":70,"column_start":6,"column_end":18},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1608},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":2641,"byte_end":2649,"line_start":87,"line_end":87,"column_start":6,"column_end":14},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":3409,"byte_end":3418,"line_start":110,"line_end":110,"column_start":23,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1632},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":4450,"byte_end":4460,"line_start":138,"line_end":138,"column_start":23,"column_end":33},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1657},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5478,"byte_end":5489,"line_start":165,"line_end":165,"column_start":23,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1690},"to":{"krate":2,"index":6611}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":5976,"byte_end":5987,"line_start":176,"line_end":176,"column_start":23,"column_end":34},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1690},"to":{"krate":1,"index":1725}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6523,"byte_end":6529,"line_start":190,"line_end":190,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":5226},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":6544,"byte_end":6550,"line_start":190,"line_end":190,"column_start":43,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":5226},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":8324,"byte_end":8333,"line_start":241,"line_end":241,"column_start":28,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":289},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":11785,"byte_end":11800,"line_start":294,"line_end":294,"column_start":6,"column_end":21},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1713},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":12330,"byte_end":12345,"line_start":313,"line_end":313,"column_start":21,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1713},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":12485,"byte_end":12500,"line_start":319,"line_end":319,"column_start":29,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1713},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":12635,"byte_end":12650,"line_start":325,"line_end":325,"column_start":20,"column_end":35},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1713},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":13454,"byte_end":13466,"line_start":354,"line_end":354,"column_start":21,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1719},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":16192,"byte_end":16204,"line_start":429,"line_end":429,"column_start":36,"column_end":48},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1719},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":16362,"byte_end":16374,"line_start":435,"line_end":435,"column_start":44,"column_end":56},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1719},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":16527,"byte_end":16539,"line_start":441,"line_end":441,"column_start":35,"column_end":47},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1719},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":16978,"byte_end":16990,"line_start":458,"line_end":458,"column_start":40,"column_end":52},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1719},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":20299,"byte_end":20308,"line_start":534,"line_end":534,"column_start":21,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":26119,"byte_end":26128,"line_start":698,"line_end":698,"column_start":36,"column_end":45},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1729},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":26286,"byte_end":26295,"line_start":704,"line_end":704,"column_start":44,"column_end":53},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1729},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":26448,"byte_end":26457,"line_start":710,"line_end":710,"column_start":35,"column_end":44},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1729},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":26932,"byte_end":26941,"line_start":729,"line_end":729,"column_start":40,"column_end":49},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1729},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":30713,"byte_end":30721,"line_start":815,"line_end":815,"column_start":25,"column_end":33},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":33275,"byte_end":33283,"line_start":888,"line_end":888,"column_start":40,"column_end":48},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1740},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":33577,"byte_end":33585,"line_start":897,"line_end":897,"column_start":48,"column_end":56},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1740},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":33876,"byte_end":33884,"line_start":906,"line_end":906,"column_start":39,"column_end":47},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1740},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":34382,"byte_end":34390,"line_start":926,"line_end":926,"column_start":44,"column_end":52},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1740},"to":{"krate":0,"index":302}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":38122,"byte_end":38141,"line_start":1010,"line_end":1010,"column_start":10,"column_end":29},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1755},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":39211,"byte_end":39230,"line_start":1044,"line_end":1044,"column_start":24,"column_end":43},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1755},"to":{"krate":0,"index":289}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":39714,"byte_end":39733,"line_start":1064,"line_end":1064,"column_start":25,"column_end":44},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1755},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":39910,"byte_end":39929,"line_start":1072,"line_end":1072,"column_start":33,"column_end":52},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1755},"to":{"krate":2,"index":5226}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40301,"byte_end":40306,"line_start":1081,"line_end":1081,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":6606},"to":{"krate":0,"index":462}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40309,"byte_end":40314,"line_start":1081,"line_end":1081,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1742},"to":{"krate":0,"index":462}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40317,"byte_end":40321,"line_start":1081,"line_end":1081,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":2055},"to":{"krate":0,"index":462}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40324,"byte_end":40333,"line_start":1081,"line_end":1081,"column_start":44,"column_end":53},"kind":"SuperTrait","from":{"krate":2,"index":1770},"to":{"krate":0,"index":462}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40336,"byte_end":40338,"line_start":1081,"line_end":1081,"column_start":56,"column_end":58},"kind":"SuperTrait","from":{"krate":2,"index":1775},"to":{"krate":0,"index":462}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\dynasmrt-1.1.0\\src\\lib.rs","byte_start":40341,"byte_end":40345,"line_start":1081,"line_end":1081,"column_start":61,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":6794},"to":{"krate":0,"index":462}}]}