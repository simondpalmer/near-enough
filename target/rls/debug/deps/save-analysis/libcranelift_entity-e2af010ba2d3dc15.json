{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0","program":"C:\\Users\\Simon Palmer\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","cranelift_entity","--edition=2018","C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"enable-serde\"","--cfg","feature=\"serde\"","-C","metadata=e2af010ba2d3dc15","-C","extra-filename=-e2af010ba2d3dc15","--out-dir","c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps","--extern","serde=c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libserde-b7446586dbaddb65.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Simon Palmer\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Simon Palmer\\Documents\\Programming\\near_enough\\target\\rls\\debug\\deps\\libcranelift_entity-e2af010ba2d3dc15.rmeta"},"prelude":{"crate_id":{"name":"cranelift_entity","disambiguator":[16555229360816668259,4985405003495595612]},"crate_root":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src","external_crates":[{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[1322159461575500717,8297198428669169011]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[2376346800744392852,12342541482992122530]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14946502858004023242,6637215598610016319]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","num":4,"id":{"name":"alloc","disambiguator":[5305136910335682758,6890491777619641650]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":5,"id":{"name":"serde","disambiguator":[8657281438905347929,3967742918256439497]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":6,"id":{"name":"std","disambiguator":[2134305066550747688,1377703208702874155]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":7,"id":{"name":"libc","disambiguator":[8079093424489733033,9678018066858265018]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":8,"id":{"name":"unwind","disambiguator":[8191054904896780843,65190916132359678]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":9,"id":{"name":"cfg_if","disambiguator":[17454577518104061478,8473922882117178851]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":10,"id":{"name":"hashbrown","disambiguator":[14702801963282246562,3385633331338644346]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[4483555191844012602,617965746000623535]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[6496369475756502088,8603909216288097824]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[8790568169648576788,8899032378407077408]}},{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","num":14,"id":{"name":"serde_derive","disambiguator":[9842309209684279102,18288336910812146633]}}],"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":0,"byte_end":5626,"line_start":1,"line_end":147,"column_start":1,"column_end":62}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5348,"byte_end":5358,"line_start":140,"line_end":140,"column_start":28,"column_end":38},"alias_span":null,"name":"BoxedSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5381,"byte_end":5385,"line_start":141,"line_end":141,"column_start":22,"column_end":26},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5387,"byte_end":5394,"line_start":141,"line_end":141,"column_start":28,"column_end":35},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5417,"byte_end":5421,"line_start":142,"line_end":142,"column_start":21,"column_end":25},"alias_span":null,"name":"Keys","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5444,"byte_end":5454,"line_start":143,"line_end":143,"column_start":22,"column_end":32},"alias_span":null,"name":"EntityList","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5456,"byte_end":5464,"line_start":143,"line_end":143,"column_start":34,"column_end":42},"alias_span":null,"name":"ListPool","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5486,"byte_end":5498,"line_start":144,"line_end":144,"column_start":20,"column_end":32},"alias_span":null,"name":"SecondaryMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":575},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5523,"byte_end":5533,"line_start":145,"line_end":145,"column_start":24,"column_end":34},"alias_span":null,"name":"PrimaryMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5554,"byte_end":5563,"line_start":146,"line_end":146,"column_start":20,"column_end":29},"alias_span":null,"name":"EntitySet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5588,"byte_end":5597,"line_start":147,"line_end":147,"column_start":24,"column_end":33},"alias_span":null,"name":"SparseMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5599,"byte_end":5613,"line_start":147,"line_end":147,"column_start":35,"column_end":49},"alias_span":null,"name":"SparseMapValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5615,"byte_end":5624,"line_start":147,"line_end":147,"column_start":51,"column_end":60},"alias_span":null,"name":"SparseSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":0,"byte_end":5626,"line_start":1,"line_end":147,"column_start":1,"column_end":62},"name":"","qualname":"::","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":42},{"krate":0,"index":92},{"krate":0,"index":180},{"krate":0,"index":201},{"krate":0,"index":250},{"krate":0,"index":336},{"krate":0,"index":416},{"krate":0,"index":436},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" Array-based data structures using densely numbered entity references as mapping keys.","sig":null,"attributes":[{"value":"/ Array-based data structures using densely numbered entity references as mapping keys.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":0,"byte_end":89,"line_start":1,"line_end":1,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":90,"byte_end":93,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate defines a number of data structures based on arrays. The arrays are not indexed by","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":94,"byte_end":191,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ `usize` as usual, but by *entity references* which are integers wrapped in new-types. This has","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":192,"byte_end":290,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ a couple advantages:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":291,"byte_end":315,"line_start":5,"line_end":5,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":316,"byte_end":319,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ - Improved type safety. The various map and set types accept a specific key type, so there is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":320,"byte_end":417,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/   no confusion about the meaning of an array index, as there is with plain arrays.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":418,"byte_end":504,"line_start":8,"line_end":8,"column_start":1,"column_end":87}},{"value":"/ - Smaller indexes. The normal `usize` index is often 64 bits which is way too large for most","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":505,"byte_end":601,"line_start":9,"line_end":9,"column_start":1,"column_end":97}},{"value":"/   purposes. The entity reference types can be smaller, allowing for more compact data","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":602,"byte_end":691,"line_start":10,"line_end":10,"column_start":1,"column_end":90}},{"value":"/   structures.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":692,"byte_end":709,"line_start":11,"line_end":11,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":710,"byte_end":713,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The `EntityRef` trait should be implemented by types to be used as indexed. The `entity_impl!`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":714,"byte_end":812,"line_start":13,"line_end":13,"column_start":1,"column_end":99}},{"value":"/ macro provides convenient defaults for types wrapping `u32` which is common.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":813,"byte_end":893,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":894,"byte_end":897,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ - [`PrimaryMap`](struct.PrimaryMap.html) is used to keep track of a vector of entities,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":898,"byte_end":989,"line_start":16,"line_end":16,"column_start":1,"column_end":92}},{"value":"/   assigning a unique entity reference to each.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":990,"byte_end":1040,"line_start":17,"line_end":17,"column_start":1,"column_end":51}},{"value":"/ - [`SecondaryMap`](struct.SecondaryMap.html) is used to associate secondary information to an","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1041,"byte_end":1138,"line_start":18,"line_end":18,"column_start":1,"column_end":98}},{"value":"/   entity. The map is implemented as a simple vector, so it does not keep track of which","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1139,"byte_end":1230,"line_start":19,"line_end":19,"column_start":1,"column_end":92}},{"value":"/   entities have been inserted. Instead, any unknown entities map to the default value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1231,"byte_end":1321,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/ - [`SparseMap`](struct.SparseMap.html) is used to associate secondary information to a small","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1322,"byte_end":1418,"line_start":21,"line_end":21,"column_start":1,"column_end":97}},{"value":"/   number of entities. It tracks accurately which entities have been inserted. This is a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1419,"byte_end":1510,"line_start":22,"line_end":22,"column_start":1,"column_end":92}},{"value":"/   specialized data structure which can use a lot of memory, so read the documentation before","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1511,"byte_end":1607,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/   using it.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1608,"byte_end":1623,"line_start":24,"line_end":24,"column_start":1,"column_end":16}},{"value":"/ - [`EntitySet`](struct.EntitySet.html) is used to represent a secondary set of entities.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1624,"byte_end":1716,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/   The set is implemented as a simple vector, so it does not keep track of which entities have","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1717,"byte_end":1814,"line_start":26,"line_end":26,"column_start":1,"column_end":98}},{"value":"/   been inserted into the primary map. Instead, any unknown entities are not in the set.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1815,"byte_end":1906,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ - [`EntityList`](struct.EntityList.html) is a compact representation of lists of entity","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1907,"byte_end":1998,"line_start":28,"line_end":28,"column_start":1,"column_end":92}},{"value":"/   references allocated from an associated memory pool. It has a much smaller footprint than","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":1999,"byte_end":2094,"line_start":29,"line_end":29,"column_start":1,"column_end":96}},{"value":"/   `Vec`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":2095,"byte_end":2107,"line_start":30,"line_end":30,"column_start":1,"column_end":13}},{"value":"deny(missing_docs, trivial_numeric_casts, unused_extern_crates)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":2109,"byte_end":2176,"line_start":32,"line_end":32,"column_start":1,"column_end":68}},{"value":"warn(unused_import_braces)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":2177,"byte_end":2207,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"no_std","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":2688,"byte_end":2698,"line_start":49,"line_end":49,"column_start":1,"column_end":11}}]},{"kind":"Trait","id":{"krate":0,"index":6},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":2996,"byte_end":3005,"line_start":59,"line_end":59,"column_start":11,"column_end":20},"name":"EntityRef","qualname":"::EntityRef","value":"EntityRef: Copy + Eq","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8}],"decl_id":null,"docs":" A type wrapping a small integer index should implement `EntityRef` so it can be used as the key\n of an `SecondaryMap` or `SparseMap`.\n","sig":null,"attributes":[{"value":"/ A type wrapping a small integer index should implement `EntityRef` so it can be used as the key","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":2845,"byte_end":2944,"line_start":57,"line_end":57,"column_start":1,"column_end":100}},{"value":"/ of an `SecondaryMap` or `SparseMap`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":2945,"byte_end":2985,"line_start":58,"line_end":58,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":7},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":3157,"byte_end":3160,"line_start":62,"line_end":62,"column_start":8,"column_end":11},"name":"new","qualname":"::EntityRef::new","value":"pub fn new(usize) -> Self","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Create a new entity reference from a small integer.\n This should crash if the requested index is not representable.\n","sig":null,"attributes":[{"value":"/ Create a new entity reference from a small integer.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":3023,"byte_end":3078,"line_start":60,"line_end":60,"column_start":5,"column_end":60}},{"value":"/ This should crash if the requested index is not representable.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":3083,"byte_end":3149,"line_start":61,"line_end":61,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":3257,"byte_end":3262,"line_start":65,"line_end":65,"column_start":8,"column_end":13},"name":"index","qualname":"::EntityRef::index","value":"pub fn index(Self) -> usize","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Get the index that was used to create this entity reference.\n","sig":null,"attributes":[{"value":"/ Get the index that was used to create this entity reference.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":3185,"byte_end":3249,"line_start":64,"line_end":64,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"packed_option","qualname":"::packed_option","value":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":494},{"krate":0,"index":525},{"krate":0,"index":523},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":510},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":502},{"krate":0,"index":498},{"krate":0,"index":16},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39}],"decl_id":null,"docs":" Compact representation of `Option<T>` for types with a reserved value.","sig":null,"attributes":[{"value":"/ Compact representation of `Option<T>` for types with a reserved value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":5628,"byte_end":5702,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":5703,"byte_end":5706,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Small Cranelift types like the 32-bit entity references are often used in tables and linked","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":5707,"byte_end":5802,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ lists where an `Option<T>` is needed. Unfortunately, that would double the size of the tables","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":5803,"byte_end":5900,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ because `Option<T>` is twice as big as `T`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":5901,"byte_end":5948,"line_start":5,"line_end":5,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":5949,"byte_end":5952,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This module provides a `PackedOption<T>` for types that have a reserved value that can be used","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":5953,"byte_end":6051,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ to represent `None`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6052,"byte_end":6076,"line_start":8,"line_end":8,"column_start":1,"column_end":25}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6194,"byte_end":6207,"line_start":14,"line_end":14,"column_start":11,"column_end":24},"name":"ReservedValue","qualname":"::packed_option::ReservedValue","value":"ReservedValue","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15}],"decl_id":null,"docs":" Types that have a reserved value which can't be created any other way.\n","sig":null,"attributes":[{"value":"/ Types that have a reserved value which can't be created any other way.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6109,"byte_end":6183,"line_start":13,"line_end":13,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6267,"byte_end":6281,"line_start":16,"line_end":16,"column_start":8,"column_end":22},"name":"reserved_value","qualname":"::packed_option::ReservedValue::reserved_value","value":"pub fn reserved_value() -> Self","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Create an instance of the reserved value.\n","sig":null,"attributes":[{"value":"/ Create an instance of the reserved value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6214,"byte_end":6259,"line_start":15,"line_end":15,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6350,"byte_end":6367,"line_start":18,"line_end":18,"column_start":8,"column_end":25},"name":"is_reserved_value","qualname":"::packed_option::ReservedValue::is_reserved_value","value":"pub fn is_reserved_value(&Self) -> bool","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Checks whether value is the reserved one.\n","sig":null,"attributes":[{"value":"/ Checks whether value is the reserved one.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6297,"byte_end":6342,"line_start":17,"line_end":17,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":494},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6501,"byte_end":6513,"line_start":23,"line_end":23,"column_start":12,"column_end":24},"name":"PackedOption","qualname":"::packed_option::PackedOption","value":"","parent":null,"children":[],"decl_id":null,"docs":" Packed representation of `Option<T>`.\n","sig":null,"attributes":[{"value":"/ Packed representation of `Option<T>`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6387,"byte_end":6428,"line_start":21,"line_end":21,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6652,"byte_end":6659,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"is_none","qualname":"<PackedOption<T>>::is_none","value":"pub fn is_none(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the packed option is a `None` value.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the packed option is a `None` value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6582,"byte_end":6640,"line_start":26,"line_end":26,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6793,"byte_end":6800,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"is_some","qualname":"<PackedOption<T>>::is_some","value":"pub fn is_some(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the packed option is a `Some` value.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the packed option is a `Some` value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6723,"byte_end":6781,"line_start":31,"line_end":31,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6929,"byte_end":6935,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"expand","qualname":"<PackedOption<T>>::expand","value":"pub fn expand(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Expand the packed option into a normal `Option`.\n","sig":null,"attributes":[{"value":"/ Expand the packed option into a normal `Option`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6865,"byte_end":6917,"line_start":36,"line_end":36,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7165,"byte_end":7168,"line_start":46,"line_end":46,"column_start":12,"column_end":15},"name":"map","qualname":"<PackedOption<T>>::map","value":"pub fn map<U, F>(Self, F) -> Option<U> where F: FnOnce(T) -> U","parent":null,"children":[],"decl_id":null,"docs":" Maps a `PackedOption<T>` to `Option<U>` by applying a function to a contained value.\n","sig":null,"attributes":[{"value":"/ Maps a `PackedOption<T>` to `Option<U>` by applying a function to a contained value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7065,"byte_end":7153,"line_start":45,"line_end":45,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7337,"byte_end":7343,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<PackedOption<T>>::unwrap","value":"pub fn unwrap(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Unwrap a packed `Some` value or panic.\n","sig":null,"attributes":[{"value":"/ Unwrap a packed `Some` value or panic.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7283,"byte_end":7325,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7453,"byte_end":7459,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"expect","qualname":"<PackedOption<T>>::expect","value":"pub fn expect(Self, &str) -> T","parent":null,"children":[],"decl_id":null,"docs":" Unwrap a packed `Some` value or panic.\n","sig":null,"attributes":[{"value":"/ Unwrap a packed `Some` value or panic.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7399,"byte_end":7441,"line_start":58,"line_end":58,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7617,"byte_end":7621,"line_start":64,"line_end":64,"column_start":12,"column_end":16},"name":"take","qualname":"<PackedOption<T>>::take","value":"pub fn take(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the packed option, leaving a `None` in its place.\n","sig":null,"attributes":[{"value":"/ Takes the value out of the packed option, leaving a `None` in its place.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7529,"byte_end":7605,"line_start":63,"line_end":63,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":528},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10425,"byte_end":10435,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"BoxedSlice","qualname":"::boxed_slice::BoxedSlice","value":"BoxedSlice {  }","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"decl_id":null,"docs":" A slice mapping `K -> V` allocating dense entity references.","sig":null,"attributes":[{"value":"/ A slice mapping `K -> V` allocating dense entity references.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10215,"byte_end":10279,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10280,"byte_end":10283,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The `BoxedSlice` data structure uses the dense index space to implement a map with a boxed","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10284,"byte_end":10378,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/ slice.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10379,"byte_end":10389,"line_start":14,"line_end":14,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10817,"byte_end":10825,"line_start":34,"line_end":34,"column_start":19,"column_end":27},"name":"from_raw","qualname":"<BoxedSlice<K, V>>::from_raw","value":"pub unsafe fn from_raw(*mut [V]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new slice from a raw pointer. A safer way to create slices is\n to use `PrimaryMap::into_boxed_slice()`.","sig":null,"attributes":[{"value":"/ Create a new slice from a raw pointer. A safer way to create slices is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10578,"byte_end":10652,"line_start":28,"line_end":28,"column_start":5,"column_end":79}},{"value":"/ to use `PrimaryMap::into_boxed_slice()`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10657,"byte_end":10701,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10706,"byte_end":10709,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10714,"byte_end":10726,"line_start":31,"line_end":31,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10731,"byte_end":10734,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ This relies on `raw` pointing to a valid slice of `V`s.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10739,"byte_end":10798,"line_start":33,"line_end":33,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11014,"byte_end":11022,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<BoxedSlice<K, V>>::is_valid","value":"pub fn is_valid(&Self, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if `k` is a valid key in the map.\n","sig":null,"attributes":[{"value":"/ Check if `k` is a valid key in the map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10959,"byte_end":11002,"line_start":41,"line_end":41,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11146,"byte_end":11149,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"get","qualname":"<BoxedSlice<K, V>>::get","value":"pub fn get(&Self, K) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Get the element at `k` if it exists.\n","sig":null,"attributes":[{"value":"/ Get the element at `k` if it exists.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11094,"byte_end":11134,"line_start":46,"line_end":46,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11293,"byte_end":11300,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BoxedSlice<K, V>>::get_mut","value":"pub fn get_mut(&mut Self, K) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Get the element at `k` if it exists, mutable version.\n","sig":null,"attributes":[{"value":"/ Get the element at `k` if it exists, mutable version.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11224,"byte_end":11281,"line_start":51,"line_end":51,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11432,"byte_end":11440,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BoxedSlice<K, V>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this map completely empty?\n","sig":null,"attributes":[{"value":"/ Is this map completely empty?","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11387,"byte_end":11420,"line_start":56,"line_end":56,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11565,"byte_end":11568,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"len","qualname":"<BoxedSlice<K, V>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of entity references created.\n","sig":null,"attributes":[{"value":"/ Get the total number of entity references created.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11499,"byte_end":11553,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11677,"byte_end":11681,"line_start":67,"line_end":67,"column_start":12,"column_end":16},"name":"keys","qualname":"<BoxedSlice<K, V>>::keys","value":"pub fn keys(&Self) -> Keys<K>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys in this map.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys in this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11623,"byte_end":11665,"line_start":66,"line_end":66,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11810,"byte_end":11816,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"values","qualname":"<BoxedSlice<K, V>>::values","value":"pub fn values(&Self) -> slice::Iter<, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the values in this map.\n","sig":null,"attributes":[{"value":"/ Iterate over all the values in this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11754,"byte_end":11798,"line_start":71,"line_end":71,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11954,"byte_end":11964,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<BoxedSlice<K, V>>::values_mut","value":"pub fn values_mut(&mut Self) -> slice::IterMut<, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the values in this map, mutable edition.\n","sig":null,"attributes":[{"value":"/ Iterate over all the values in this map, mutable edition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":11881,"byte_end":11942,"line_start":76,"line_end":76,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12105,"byte_end":12109,"line_start":82,"line_end":82,"column_start":12,"column_end":16},"name":"iter","qualname":"<BoxedSlice<K, V>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys and values in this map.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys and values in this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12040,"byte_end":12093,"line_start":81,"line_end":81,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12263,"byte_end":12271,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<BoxedSlice<K, V>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys and values in this map, mutable edition.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys and values in this map, mutable edition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12181,"byte_end":12251,"line_start":86,"line_end":86,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12427,"byte_end":12431,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"last","qualname":"<BoxedSlice<K, V>>::last","value":"pub fn last(&Self) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last element that was inserted in the map.\n","sig":null,"attributes":[{"value":"/ Returns the last element that was inserted in the map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12357,"byte_end":12415,"line_start":91,"line_end":91,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":17860,"byte_end":17864,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Iter","qualname":"::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103}],"decl_id":null,"docs":" Iterate over all keys in order.\n","sig":null,"attributes":[{"value":"/ Iterate over all keys in order.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":17813,"byte_end":17848,"line_start":9,"line_end":9,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18134,"byte_end":18137,"line_start":21,"line_end":21,"column_start":12,"column_end":15},"name":"new","qualname":"<Iter>::new","value":"pub fn new(slice::Iter) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `Iter` iterator that visits the `PrimaryMap` keys and values\n of `iter`.\n","sig":null,"attributes":[{"value":"/ Create an `Iter` iterator that visits the `PrimaryMap` keys and values","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18029,"byte_end":18103,"line_start":19,"line_end":19,"column_start":5,"column_end":79}},{"value":"/ of `iter`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18108,"byte_end":18122,"line_start":20,"line_end":20,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":127},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18882,"byte_end":18889,"line_start":50,"line_end":50,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::iter::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"decl_id":null,"docs":" Iterate over all keys in order.\n","sig":null,"attributes":[{"value":"/ Iterate over all keys in order.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18835,"byte_end":18870,"line_start":49,"line_end":49,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19168,"byte_end":19171,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<IterMut>::new","value":"pub fn new(slice::IterMut) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `IterMut` iterator that visits the `PrimaryMap` keys and values\n of `iter`.\n","sig":null,"attributes":[{"value":"/ Create an `IterMut` iterator that visits the `PrimaryMap` keys and values","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19060,"byte_end":19137,"line_start":59,"line_end":59,"column_start":5,"column_end":82}},{"value":"/ of `iter`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19142,"byte_end":19156,"line_start":60,"line_end":60,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19932,"byte_end":19940,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"decl_id":null,"docs":" Iterate over all keys in order.\n","sig":null,"attributes":[{"value":"/ Iterate over all keys in order.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19885,"byte_end":19920,"line_start":89,"line_end":89,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20187,"byte_end":20190,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<IntoIter<K, V>>::new","value":"pub fn new(vec::IntoIter<V>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `IntoIter` iterator that visits the `PrimaryMap` keys and values\n of `iter`.\n","sig":null,"attributes":[{"value":"/ Create an `IntoIter` iterator that visits the `PrimaryMap` keys and values","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20078,"byte_end":20156,"line_start":96,"line_end":96,"column_start":5,"column_end":83}},{"value":"/ of `iter`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20161,"byte_end":20175,"line_start":97,"line_end":97,"column_start":5,"column_end":19}}]},{"kind":"Struct","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21182,"byte_end":21186,"line_start":10,"line_end":10,"column_start":12,"column_end":16},"name":"Keys","qualname":"::keys::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187}],"decl_id":null,"docs":" Iterate over all keys in order.\n","sig":null,"attributes":[{"value":"/ Iterate over all keys in order.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21135,"byte_end":21170,"line_start":9,"line_end":9,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21387,"byte_end":21395,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"with_len","qualname":"<Keys<K>>::with_len","value":"pub fn with_len(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `Keys` iterator that visits `len` entities starting from 0.\n","sig":null,"attributes":[{"value":"/ Create a `Keys` iterator that visits `len` entities starting from 0.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21303,"byte_end":21375,"line_start":17,"line_end":17,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":541},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":25269,"byte_end":25279,"line_start":63,"line_end":63,"column_start":12,"column_end":22},"name":"EntityList","qualname":"::list::EntityList","value":"EntityList {  }","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544}],"decl_id":null,"docs":" A small list of entity references allocated from a pool.","sig":null,"attributes":[{"value":"/ A small list of entity references allocated from a pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22459,"byte_end":22519,"line_start":8,"line_end":8,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22520,"byte_end":22523,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ An `EntityList<T>` type provides similar functionality to `Vec<T>`, but with some important","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22524,"byte_end":22619,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/ differences in the implementation:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22620,"byte_end":22658,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22659,"byte_end":22662,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ 1. Memory is allocated from a `ListPool<T>` instead of the global heap.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22663,"byte_end":22738,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ 2. The footprint of an entity list is 4 bytes, compared with the 24 bytes for `Vec<T>`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22739,"byte_end":22830,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ 3. An entity list doesn't implement `Drop`, leaving it to the pool to manage memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22831,"byte_end":22919,"line_start":15,"line_end":15,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22920,"byte_end":22923,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The list pool is intended to be used as a LIFO allocator. After building up a larger data","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":22924,"byte_end":23017,"line_start":17,"line_end":17,"column_start":1,"column_end":94}},{"value":"/ structure with many list references, the whole thing can be discarded quickly by clearing the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23018,"byte_end":23115,"line_start":18,"line_end":18,"column_start":1,"column_end":98}},{"value":"/ pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23116,"byte_end":23125,"line_start":19,"line_end":19,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23126,"byte_end":23129,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23130,"byte_end":23142,"line_start":21,"line_end":21,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23143,"byte_end":23146,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Entity lists are not as safe to use as `Vec<T>`, but they never jeopardize Rust's memory safety","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23147,"byte_end":23246,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ guarantees. These are the problems to be aware of:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23247,"byte_end":23301,"line_start":24,"line_end":24,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23302,"byte_end":23305,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ - If you lose track of an entity list, its memory won't be recycled until the pool is cleared.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23306,"byte_end":23404,"line_start":26,"line_end":26,"column_start":1,"column_end":99}},{"value":"/   This can cause the pool to grow very large with leaked lists.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23405,"byte_end":23472,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ - If entity lists are used after their pool is cleared, they may contain garbage data, and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23473,"byte_end":23567,"line_start":28,"line_end":28,"column_start":1,"column_end":95}},{"value":"/   modifying them may corrupt other lists in the pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23568,"byte_end":23625,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ - If an entity list is used with two different pool instances, both pools are likely to become","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23626,"byte_end":23724,"line_start":30,"line_end":30,"column_start":1,"column_end":99}},{"value":"/   corrupted.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23725,"byte_end":23741,"line_start":31,"line_end":31,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23742,"byte_end":23745,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Entity lists can be cloned, but that operation should only be used as part of cloning the whole","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23746,"byte_end":23845,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/ function they belong to. *Cloning an entity list does not allocate new memory for the clone*.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23846,"byte_end":23943,"line_start":34,"line_end":34,"column_start":1,"column_end":98}},{"value":"/ It creates an alias of the same memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23944,"byte_end":23987,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23988,"byte_end":23991,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ Entity lists cannot be hashed and compared for equality because it's not possible to compare the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":23992,"byte_end":24092,"line_start":37,"line_end":37,"column_start":1,"column_end":101}},{"value":"/ contents of the list without the pool reference.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24093,"byte_end":24145,"line_start":38,"line_end":38,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24146,"byte_end":24149,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ # Implementation","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24150,"byte_end":24170,"line_start":40,"line_end":40,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24171,"byte_end":24174,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The `EntityList` itself is designed to have the smallest possible footprint. This is important","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24175,"byte_end":24273,"line_start":42,"line_end":42,"column_start":1,"column_end":99}},{"value":"/ because it is used inside very compact data structures like `InstructionData`. The list","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24274,"byte_end":24365,"line_start":43,"line_end":43,"column_start":1,"column_end":92}},{"value":"/ contains only a 32-bit index into the pool's memory vector, pointing to the first element of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24366,"byte_end":24462,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24463,"byte_end":24476,"line_start":45,"line_end":45,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24477,"byte_end":24480,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The pool is just a single `Vec<T>` containing all of the allocated lists. Each list is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24481,"byte_end":24571,"line_start":47,"line_end":47,"column_start":1,"column_end":91}},{"value":"/ represented as three contiguous parts:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24572,"byte_end":24614,"line_start":48,"line_end":48,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24615,"byte_end":24618,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ 1. The number of elements in the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24619,"byte_end":24661,"line_start":50,"line_end":50,"column_start":1,"column_end":43}},{"value":"/ 2. The list elements.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24662,"byte_end":24687,"line_start":51,"line_end":51,"column_start":1,"column_end":26}},{"value":"/ 3. Excess capacity elements.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24688,"byte_end":24720,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24721,"byte_end":24724,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ The total size of the three parts is always a power of two, and the excess capacity is always","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24725,"byte_end":24822,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"/ as small as possible. This means that shrinking a list may cause the excess capacity to shrink","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24823,"byte_end":24921,"line_start":55,"line_end":55,"column_start":1,"column_end":99}},{"value":"/ if a smaller power-of-two size becomes available.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24922,"byte_end":24975,"line_start":56,"line_end":56,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24976,"byte_end":24979,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Both growing and shrinking a list may cause it to be reallocated in the pool vector.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":24980,"byte_end":25068,"line_start":58,"line_end":58,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":25069,"byte_end":25072,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The index stored in an `EntityList` points to part 2, the list elements. The value 0 is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":25073,"byte_end":25164,"line_start":60,"line_end":60,"column_start":1,"column_end":92}},{"value":"/ reserved for the empty list which isn't allocated in the vector.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":25165,"byte_end":25233,"line_start":61,"line_end":61,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":551},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":25643,"byte_end":25651,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"ListPool","qualname":"::list::ListPool","value":"ListPool {  }","parent":null,"children":[{"krate":0,"index":553},{"krate":0,"index":554}],"decl_id":null,"docs":" A memory pool for storing lists of `T`.\n","sig":null,"attributes":[{"value":"/ A memory pool for storing lists of `T`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":25564,"byte_end":25607,"line_start":78,"line_end":78,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":26692,"byte_end":26695,"line_start":111,"line_end":111,"column_start":12,"column_end":15},"name":"new","qualname":"<ListPool<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new list pool.\n","sig":null,"attributes":[{"value":"/ Create a new list pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":26653,"byte_end":26680,"line_start":110,"line_end":110,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":27110,"byte_end":27115,"line_start":124,"line_end":124,"column_start":12,"column_end":17},"name":"clear","qualname":"<ListPool<T>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear the pool, forgetting about all lists that use it.","sig":null,"attributes":[{"value":"/ Clear the pool, forgetting about all lists that use it.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":26804,"byte_end":26863,"line_start":118,"line_end":118,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":26868,"byte_end":26871,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This invalidates any existing entity lists that used this pool to allocate memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":26876,"byte_end":26962,"line_start":120,"line_end":120,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":26967,"byte_end":26970,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ The pool's memory is not released to the operating system, but kept around for faster","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":26975,"byte_end":27064,"line_start":122,"line_end":122,"column_start":5,"column_end":94}},{"value":"/ allocation in the future.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":27069,"byte_end":27098,"line_start":123,"line_end":123,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":31058,"byte_end":31061,"line_start":225,"line_end":225,"column_start":12,"column_end":15},"name":"new","qualname":"<EntityList<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty list.\n","sig":null,"attributes":[{"value":"/ Create a new empty list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":31018,"byte_end":31046,"line_start":224,"line_end":224,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":31189,"byte_end":31199,"line_start":230,"line_end":230,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<EntityList<T>>::from_slice","value":"pub fn from_slice(&[T], &mut ListPool<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new list with the contents initialized from a slice.\n","sig":null,"attributes":[{"value":"/ Create a new list with the contents initialized from a slice.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":31112,"byte_end":31177,"line_start":229,"line_end":229,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":31676,"byte_end":31684,"line_start":247,"line_end":247,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EntityList<T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the list has a length of 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the list has a length of 0.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":31615,"byte_end":31664,"line_start":246,"line_end":246,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":31909,"byte_end":31912,"line_start":254,"line_end":254,"column_start":12,"column_end":15},"name":"len","qualname":"<EntityList<T>>::len","value":"pub fn len(&Self, &ListPool<T>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the number of elements in the list.\n","sig":null,"attributes":[{"value":"/ Get the number of elements in the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":31854,"byte_end":31897,"line_start":253,"line_end":253,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":32133,"byte_end":32141,"line_start":260,"line_end":260,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<EntityList<T>>::is_valid","value":"pub fn is_valid(&Self, &ListPool<T>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the list is valid\n","sig":null,"attributes":[{"value":"/ Returns `true` if the list is valid","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":32082,"byte_end":32121,"line_start":259,"line_end":259,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":32332,"byte_end":32340,"line_start":266,"line_end":266,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<EntityList<T>>::as_slice","value":"pub fn as_slice<'a>(&'a Self, &'a ListPool<T>) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Get the list as a slice.\n","sig":null,"attributes":[{"value":"/ Get the list as a slice.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":32292,"byte_end":32320,"line_start":265,"line_end":265,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":32614,"byte_end":32617,"line_start":275,"line_end":275,"column_start":12,"column_end":15},"name":"get","qualname":"<EntityList<T>>::get","value":"pub fn get(&Self, usize, &ListPool<T>) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Get a single element from the list.\n","sig":null,"attributes":[{"value":"/ Get a single element from the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":32563,"byte_end":32602,"line_start":274,"line_end":274,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":32785,"byte_end":32790,"line_start":280,"line_end":280,"column_start":12,"column_end":17},"name":"first","qualname":"<EntityList<T>>::first","value":"pub fn first(&Self, &ListPool<T>) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Get the first element from the list.\n","sig":null,"attributes":[{"value":"/ Get the first element from the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":32733,"byte_end":32773,"line_start":279,"line_end":279,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":33014,"byte_end":33026,"line_start":289,"line_end":289,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<EntityList<T>>::as_mut_slice","value":"pub fn as_mut_slice<'a>(&'a mut Self, &'a mut ListPool<T>) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Get the list as a mutable slice.\n","sig":null,"attributes":[{"value":"/ Get the list as a mutable slice.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":32966,"byte_end":33002,"line_start":288,"line_end":288,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":33343,"byte_end":33350,"line_start":298,"line_end":298,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<EntityList<T>>::get_mut","value":"pub fn get_mut<'a>(&'a mut Self, usize, &'a mut ListPool<T>)\n-> Option<&'a mut T>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single element from the list.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single element from the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":33269,"byte_end":33331,"line_start":297,"line_end":297,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":33611,"byte_end":33616,"line_start":305,"line_end":305,"column_start":12,"column_end":17},"name":"clear","qualname":"<EntityList<T>>::clear","value":"pub fn clear(&mut Self, &mut ListPool<T>)","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the list.","sig":null,"attributes":[{"value":"/ Removes all elements from the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":33491,"byte_end":33530,"line_start":302,"line_end":302,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":33535,"byte_end":33538,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ The memory used by the list is put back in the pool.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":33543,"byte_end":33599,"line_start":304,"line_end":304,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":34143,"byte_end":34147,"line_start":318,"line_end":318,"column_start":12,"column_end":16},"name":"take","qualname":"<EntityList<T>>::take","value":"pub fn take(&mut Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Take all elements from this list and return them as a new list. Leave this list empty.","sig":null,"attributes":[{"value":"/ Take all elements from this list and return them as a new list. Leave this list empty.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":33981,"byte_end":34071,"line_start":315,"line_end":315,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":34076,"byte_end":34079,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ This is the equivalent of `Option::take()`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":34084,"byte_end":34131,"line_start":317,"line_end":317,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":34344,"byte_end":34348,"line_start":324,"line_end":324,"column_start":12,"column_end":16},"name":"push","qualname":"<EntityList<T>>::push","value":"pub fn push(&mut Self, T, &mut ListPool<T>) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Appends an element to the back of the list.\n Returns the index where the element was inserted.\n","sig":null,"attributes":[{"value":"/ Appends an element to the back of the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":34227,"byte_end":34274,"line_start":322,"line_end":322,"column_start":5,"column_end":52}},{"value":"/ Returns the index where the element was inserted.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":34279,"byte_end":34332,"line_start":323,"line_end":323,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":36971,"byte_end":36977,"line_start":391,"line_end":391,"column_start":12,"column_end":18},"name":"extend","qualname":"<EntityList<T>>::extend","value":"pub fn extend<I>(&mut Self, I, &mut ListPool<T>) where I: IntoIterator<Item =\nT>","parent":null,"children":[],"decl_id":null,"docs":" Appends multiple elements to the back of the list.\n","sig":null,"attributes":[{"value":"/ Appends multiple elements to the back of the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":36905,"byte_end":36959,"line_start":390,"line_end":390,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":37341,"byte_end":37347,"line_start":403,"line_end":403,"column_start":12,"column_end":18},"name":"insert","qualname":"<EntityList<T>>::insert","value":"pub fn insert(&mut Self, usize, T, &mut ListPool<T>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts an element as position `index` in the list, shifting all elements after it to the\n right.\n","sig":null,"attributes":[{"value":"/ Inserts an element as position `index` in the list, shifting all elements after it to the","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":37221,"byte_end":37314,"line_start":401,"line_end":401,"column_start":5,"column_end":98}},{"value":"/ right.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":37319,"byte_end":37329,"line_start":402,"line_end":402,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":37940,"byte_end":37946,"line_start":421,"line_end":421,"column_start":12,"column_end":18},"name":"remove","qualname":"<EntityList<T>>::remove","value":"pub fn remove(&mut Self, usize, &mut ListPool<T>)","parent":null,"children":[],"decl_id":null,"docs":" Removes the element at position `index` from the list. Potentially linear complexity.\n","sig":null,"attributes":[{"value":"/ Removes the element at position `index` from the list. Potentially linear complexity.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":37839,"byte_end":37928,"line_start":420,"line_end":420,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":38944,"byte_end":38955,"line_start":454,"line_end":454,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<EntityList<T>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize, &mut ListPool<T>)","parent":null,"children":[],"decl_id":null,"docs":" Removes the element at `index` in constant time by switching it with the last element of\n the list.\n","sig":null,"attributes":[{"value":"/ Removes the element at `index` in constant time by switching it with the last element of","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":38822,"byte_end":38914,"line_start":452,"line_end":452,"column_start":5,"column_end":97}},{"value":"/ the list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":38919,"byte_end":38932,"line_start":453,"line_end":453,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":39671,"byte_end":39678,"line_start":473,"line_end":473,"column_start":12,"column_end":19},"name":"grow_at","qualname":"<EntityList<T>>::grow_at","value":"pub fn grow_at(&mut Self, usize, usize, &mut ListPool<T>)","parent":null,"children":[],"decl_id":null,"docs":" Grow the list by inserting `count` elements at `index`.","sig":null,"attributes":[{"value":"/ Grow the list by inserting `count` elements at `index`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":39344,"byte_end":39403,"line_start":468,"line_end":468,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":39408,"byte_end":39411,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ The new elements are not initialized, they will contain whatever happened to be in memory.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":39416,"byte_end":39510,"line_start":470,"line_end":470,"column_start":5,"column_end":99}},{"value":"/ Since the memory comes from the pool, this will be either zero entity references or","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":39515,"byte_end":39602,"line_start":471,"line_end":471,"column_start":5,"column_end":92}},{"value":"/ whatever where in a previously deallocated list.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":39607,"byte_end":39659,"line_start":472,"line_end":472,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48149,"byte_end":48161,"line_start":27,"line_end":27,"column_start":12,"column_end":24},"name":"SecondaryMap","qualname":"::map::SecondaryMap","value":"SecondaryMap {  }","parent":null,"children":[{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566}],"decl_id":null,"docs":" A mapping `K -> V` for densely indexed entity references.","sig":null,"attributes":[{"value":"/ A mapping `K -> V` for densely indexed entity references.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":47638,"byte_end":47699,"line_start":18,"line_end":18,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":47700,"byte_end":47703,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The `SecondaryMap` data structure uses the dense index space to implement a map with a vector.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":47704,"byte_end":47802,"line_start":20,"line_end":20,"column_start":1,"column_end":99}},{"value":"/ Unlike `PrimaryMap`, an `SecondaryMap` can't be used to allocate entity references. It is used","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":47803,"byte_end":47901,"line_start":21,"line_end":21,"column_start":1,"column_end":99}},{"value":"/ to associate secondary information with entities.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":47902,"byte_end":47955,"line_start":22,"line_end":22,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":47956,"byte_end":47959,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The map does not track if an entry for a key has been inserted or not. Instead it behaves as if","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":47960,"byte_end":48059,"line_start":24,"line_end":24,"column_start":1,"column_end":100}},{"value":"/ all keys have a default entry from the beginning.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48060,"byte_end":48113,"line_start":25,"line_end":25,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48449,"byte_end":48452,"line_start":44,"line_end":44,"column_start":12,"column_end":15},"name":"new","qualname":"<SecondaryMap<K, V>>::new","value":"pub fn new() -> Self where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty map.\n","sig":null,"attributes":[{"value":"/ Create a new empty map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48410,"byte_end":48437,"line_start":43,"line_end":43,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48803,"byte_end":48816,"line_start":58,"line_end":58,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<SecondaryMap<K, V>>::with_capacity","value":"pub fn with_capacity(usize) -> Self where V: Default","parent":null,"children":[],"decl_id":null,"docs":" Create a new, empty map with the specified capacity.","sig":null,"attributes":[{"value":"/ Create a new, empty map with the specified capacity.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48640,"byte_end":48696,"line_start":55,"line_end":55,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48701,"byte_end":48704,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ The map will be able to hold exactly `capacity` elements without reallocating.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48709,"byte_end":48791,"line_start":57,"line_end":57,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49181,"byte_end":49193,"line_start":72,"line_end":72,"column_start":12,"column_end":24},"name":"with_default","qualname":"<SecondaryMap<K, V>>::with_default","value":"pub fn with_default(V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty map with a specified default value.","sig":null,"attributes":[{"value":"/ Create a new empty map with a specified default value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49037,"byte_end":49095,"line_start":69,"line_end":69,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49100,"byte_end":49103,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ This constructor does not require V to implement Default.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49108,"byte_end":49169,"line_start":71,"line_end":71,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49422,"byte_end":49430,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"capacity","qualname":"<SecondaryMap<K, V>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold without reallocating.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49337,"byte_end":49410,"line_start":80,"line_end":80,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49564,"byte_end":49567,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"get","qualname":"<SecondaryMap<K, V>>::get","value":"pub fn get(&Self, K) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Get the element at `k` if it exists.\n","sig":null,"attributes":[{"value":"/ Get the element at `k` if it exists.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49490,"byte_end":49530,"line_start":85,"line_end":85,"column_start":5,"column_end":45}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49535,"byte_end":49552,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49709,"byte_end":49717,"line_start":93,"line_end":93,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SecondaryMap<K, V>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this map completely empty?\n","sig":null,"attributes":[{"value":"/ Is this map completely empty?","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49642,"byte_end":49675,"line_start":91,"line_end":91,"column_start":5,"column_end":38}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49680,"byte_end":49697,"line_start":92,"line_end":92,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49847,"byte_end":49852,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"clear","qualname":"<SecondaryMap<K, V>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries from this map.\n","sig":null,"attributes":[{"value":"/ Remove all entries from this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49776,"byte_end":49813,"line_start":97,"line_end":97,"column_start":5,"column_end":42}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49818,"byte_end":49835,"line_start":98,"line_end":98,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49969,"byte_end":49973,"line_start":104,"line_end":104,"column_start":12,"column_end":16},"name":"iter","qualname":"<SecondaryMap<K, V>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys and values in this map.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys and values in this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":49904,"byte_end":49957,"line_start":103,"line_end":103,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50127,"byte_end":50135,"line_start":109,"line_end":109,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<SecondaryMap<K, V>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys and values in this map, mutable edition.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys and values in this map, mutable edition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50045,"byte_end":50115,"line_start":108,"line_end":108,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50275,"byte_end":50279,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"keys","qualname":"<SecondaryMap<K, V>>::keys","value":"pub fn keys(&Self) -> Keys<K>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys in this map.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys in this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50221,"byte_end":50263,"line_start":113,"line_end":113,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50408,"byte_end":50414,"line_start":119,"line_end":119,"column_start":12,"column_end":18},"name":"values","qualname":"<SecondaryMap<K, V>>::values","value":"pub fn values(&Self) -> slice::Iter<, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the values in this map.\n","sig":null,"attributes":[{"value":"/ Iterate over all the values in this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50352,"byte_end":50396,"line_start":118,"line_end":118,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50552,"byte_end":50562,"line_start":124,"line_end":124,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<SecondaryMap<K, V>>::values_mut","value":"pub fn values_mut(&mut Self) -> slice::IterMut<, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the values in this map, mutable edition.\n","sig":null,"attributes":[{"value":"/ Iterate over all the values in this map, mutable edition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50479,"byte_end":50540,"line_start":123,"line_end":123,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50725,"byte_end":50731,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"resize","qualname":"<SecondaryMap<K, V>>::resize","value":"pub fn resize(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Resize the map to have `n` entries by adding default entries as needed.\n","sig":null,"attributes":[{"value":"/ Resize the map to have `n` entries by adding default entries as needed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50638,"byte_end":50713,"line_start":128,"line_end":128,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":575},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57346,"byte_end":57356,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"PrimaryMap","qualname":"::primary::PrimaryMap","value":"PrimaryMap {  }","parent":null,"children":[{"krate":0,"index":578},{"krate":0,"index":579}],"decl_id":null,"docs":" A primary mapping `K -> V` allocating dense entity references.","sig":null,"attributes":[{"value":"/ A primary mapping `K -> V` allocating dense entity references.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56316,"byte_end":56382,"line_start":15,"line_end":15,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56383,"byte_end":56386,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The `PrimaryMap` data structure uses the dense index space to implement a map with a vector.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56387,"byte_end":56483,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56484,"byte_end":56487,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ A primary map contains the main definition of an entity, and it can be used to allocate new","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56488,"byte_end":56583,"line_start":19,"line_end":19,"column_start":1,"column_end":96}},{"value":"/ entity references with the `push` method.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56584,"byte_end":56629,"line_start":20,"line_end":20,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56630,"byte_end":56633,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ There should only be a single `PrimaryMap` instance for a given `EntityRef` type, otherwise","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56634,"byte_end":56729,"line_start":22,"line_end":22,"column_start":1,"column_end":96}},{"value":"/ conflicting references will be created. Using unknown keys for indexing will cause a panic.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56730,"byte_end":56825,"line_start":23,"line_end":23,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56826,"byte_end":56829,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Note that `PrimaryMap` doesn't implement `Deref` or `DerefMut`, which would allow","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56830,"byte_end":56915,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"/ `&PrimaryMap<K, V>` to convert to `&[V]`. One of the main advantages of `PrimaryMap` is","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":56916,"byte_end":57007,"line_start":26,"line_end":26,"column_start":1,"column_end":92}},{"value":"/ that it only allows indexing with the distinct `EntityRef` key type, so converting to a","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57008,"byte_end":57099,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ plain slice would make it easier to use incorrectly. To make a slice of a `PrimaryMap`, use","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57100,"byte_end":57195,"line_start":28,"line_end":28,"column_start":1,"column_end":96}},{"value":"/ `into_boxed_slice`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57196,"byte_end":57219,"line_start":29,"line_end":29,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57536,"byte_end":57539,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<PrimaryMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty map.\n","sig":null,"attributes":[{"value":"/ Create a new empty map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57497,"byte_end":57524,"line_start":44,"line_end":44,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57715,"byte_end":57728,"line_start":53,"line_end":53,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<PrimaryMap<K, V>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty map with the given capacity.\n","sig":null,"attributes":[{"value":"/ Create a new empty map with the given capacity.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57652,"byte_end":57703,"line_start":52,"line_end":52,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57929,"byte_end":57937,"line_start":61,"line_end":61,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<PrimaryMap<K, V>>::is_valid","value":"pub fn is_valid(&Self, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if `k` is a valid key in the map.\n","sig":null,"attributes":[{"value":"/ Check if `k` is a valid key in the map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57874,"byte_end":57917,"line_start":60,"line_end":60,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58061,"byte_end":58064,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"get","qualname":"<PrimaryMap<K, V>>::get","value":"pub fn get(&Self, K) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Get the element at `k` if it exists.\n","sig":null,"attributes":[{"value":"/ Get the element at `k` if it exists.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58009,"byte_end":58049,"line_start":65,"line_end":65,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58208,"byte_end":58215,"line_start":71,"line_end":71,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<PrimaryMap<K, V>>::get_mut","value":"pub fn get_mut(&mut Self, K) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Get the element at `k` if it exists, mutable version.\n","sig":null,"attributes":[{"value":"/ Get the element at `k` if it exists, mutable version.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58139,"byte_end":58196,"line_start":70,"line_end":70,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":363},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58347,"byte_end":58355,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<PrimaryMap<K, V>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this map completely empty?\n","sig":null,"attributes":[{"value":"/ Is this map completely empty?","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58302,"byte_end":58335,"line_start":75,"line_end":75,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58480,"byte_end":58483,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"len","qualname":"<PrimaryMap<K, V>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the total number of entity references created.\n","sig":null,"attributes":[{"value":"/ Get the total number of entity references created.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58414,"byte_end":58468,"line_start":80,"line_end":80,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58592,"byte_end":58596,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"keys","qualname":"<PrimaryMap<K, V>>::keys","value":"pub fn keys(&Self) -> Keys<K>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys in this map.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys in this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58538,"byte_end":58580,"line_start":85,"line_end":85,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58725,"byte_end":58731,"line_start":91,"line_end":91,"column_start":12,"column_end":18},"name":"values","qualname":"<PrimaryMap<K, V>>::values","value":"pub fn values(&Self) -> slice::Iter<, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the values in this map.\n","sig":null,"attributes":[{"value":"/ Iterate over all the values in this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58669,"byte_end":58713,"line_start":90,"line_end":90,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58869,"byte_end":58879,"line_start":96,"line_end":96,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<PrimaryMap<K, V>>::values_mut","value":"pub fn values_mut(&mut Self) -> slice::IterMut<, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the values in this map, mutable edition.\n","sig":null,"attributes":[{"value":"/ Iterate over all the values in this map, mutable edition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58796,"byte_end":58857,"line_start":95,"line_end":95,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59020,"byte_end":59024,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"iter","qualname":"<PrimaryMap<K, V>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys and values in this map.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys and values in this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":58955,"byte_end":59008,"line_start":100,"line_end":100,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59178,"byte_end":59186,"line_start":106,"line_end":106,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<PrimaryMap<K, V>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys and values in this map, mutable edition.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys and values in this map, mutable edition.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59096,"byte_end":59166,"line_start":105,"line_end":105,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59321,"byte_end":59326,"line_start":111,"line_end":111,"column_start":12,"column_end":17},"name":"clear","qualname":"<PrimaryMap<K, V>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries from this map.\n","sig":null,"attributes":[{"value":"/ Remove all entries from this map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59272,"byte_end":59309,"line_start":110,"line_end":110,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59453,"byte_end":59461,"line_start":116,"line_end":116,"column_start":12,"column_end":20},"name":"next_key","qualname":"<PrimaryMap<K, V>>::next_key","value":"pub fn next_key(&Self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Get the key that will be assigned to the next pushed value.\n","sig":null,"attributes":[{"value":"/ Get the key that will be assigned to the next pushed value.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59378,"byte_end":59441,"line_start":115,"line_end":115,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59601,"byte_end":59605,"line_start":121,"line_end":121,"column_start":12,"column_end":16},"name":"push","qualname":"<PrimaryMap<K, V>>::push","value":"pub fn push(&mut Self, V) -> K","parent":null,"children":[],"decl_id":null,"docs":" Append `v` to the mapping, assigning a new key which is returned.\n","sig":null,"attributes":[{"value":"/ Append `v` to the mapping, assigning a new key which is returned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59520,"byte_end":59589,"line_start":120,"line_end":120,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":373},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59782,"byte_end":59786,"line_start":128,"line_end":128,"column_start":12,"column_end":16},"name":"last","qualname":"<PrimaryMap<K, V>>::last","value":"pub fn last(&Self) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last element that was inserted in the map.\n","sig":null,"attributes":[{"value":"/ Returns the last element that was inserted in the map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59712,"byte_end":59770,"line_start":127,"line_end":127,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59936,"byte_end":59943,"line_start":133,"line_end":133,"column_start":12,"column_end":19},"name":"reserve","qualname":"<PrimaryMap<K, V>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted.\n","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more elements to be inserted.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":59847,"byte_end":59924,"line_start":132,"line_end":132,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60126,"byte_end":60139,"line_start":138,"line_end":138,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<PrimaryMap<K, V>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more elements to be inserted.\n","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more elements to be inserted.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60026,"byte_end":60114,"line_start":137,"line_end":137,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60305,"byte_end":60318,"line_start":143,"line_end":143,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<PrimaryMap<K, V>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the `PrimaryMap` as much as possible.\n","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the `PrimaryMap` as much as possible.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60228,"byte_end":60293,"line_start":142,"line_end":142,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60449,"byte_end":60465,"line_start":148,"line_end":148,"column_start":12,"column_end":28},"name":"into_boxed_slice","qualname":"<PrimaryMap<K, V>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> BoxedSlice<K, V>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `PrimaryMap` and produces a `BoxedSlice`.\n","sig":null,"attributes":[{"value":"/ Consumes this `PrimaryMap` and produces a `BoxedSlice`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60378,"byte_end":60437,"line_start":147,"line_end":147,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":665},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67099,"byte_end":67108,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"EntitySet","qualname":"::set::EntitySet","value":"EntitySet {  }","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669}],"decl_id":null,"docs":" A set of `K` for densely indexed entity references.","sig":null,"attributes":[{"value":"/ A set of `K` for densely indexed entity references.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":66807,"byte_end":66862,"line_start":8,"line_end":8,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":66863,"byte_end":66866,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The `EntitySet` data structure uses the dense index space to implement a set with a bitvector.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":66867,"byte_end":66965,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"/ Like `SecondaryMap`, an `EntitySet` is used to associate secondary information with entities.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":66966,"byte_end":67063,"line_start":11,"line_end":11,"column_start":1,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67354,"byte_end":67357,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<EntitySet<K>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty set.\n","sig":null,"attributes":[{"value":"/ Create a new empty set.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67315,"byte_end":67342,"line_start":27,"line_end":27,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67558,"byte_end":67571,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<EntitySet<K>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty set with the specified capacity.\n","sig":null,"attributes":[{"value":"/ Creates a new empty set with the specified capacity.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67490,"byte_end":67546,"line_start":36,"line_end":36,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67772,"byte_end":67780,"line_start":45,"line_end":45,"column_start":12,"column_end":20},"name":"contains","qualname":"<EntitySet<K>>::contains","value":"pub fn contains(&Self, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Get the element at `k` if it exists.\n","sig":null,"attributes":[{"value":"/ Get the element at `k` if it exists.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67720,"byte_end":67760,"line_start":44,"line_end":44,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":68028,"byte_end":68036,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EntitySet<K>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this set completely empty?\n","sig":null,"attributes":[{"value":"/ Is this set completely empty?","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67983,"byte_end":68016,"line_start":54,"line_end":54,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":68426,"byte_end":68437,"line_start":66,"line_end":66,"column_start":12,"column_end":23},"name":"cardinality","qualname":"<EntitySet<K>>::cardinality","value":"pub fn cardinality(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the cardinality of the set.  More precisely, it returns the number of calls to\n `insert` with different key values, that have happened since the the set was most recently\n `clear`ed or created with `new`.\n","sig":null,"attributes":[{"value":"/ Returns the cardinality of the set.  More precisely, it returns the number of calls to","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":68184,"byte_end":68274,"line_start":63,"line_end":63,"column_start":5,"column_end":95}},{"value":"/ `insert` with different key values, that have happened since the the set was most recently","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":68279,"byte_end":68373,"line_start":64,"line_end":64,"column_start":5,"column_end":99}},{"value":"/ `clear`ed or created with `new`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":68378,"byte_end":68414,"line_start":65,"line_end":65,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":68837,"byte_end":68842,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"clear","qualname":"<EntitySet<K>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all entries from this set.\n","sig":null,"attributes":[{"value":"/ Remove all entries from this set.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":68788,"byte_end":68825,"line_start":79,"line_end":79,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":68970,"byte_end":68974,"line_start":86,"line_end":86,"column_start":12,"column_end":16},"name":"keys","qualname":"<EntitySet<K>>::keys","value":"pub fn keys(&Self) -> Keys<K>","parent":null,"children":[],"decl_id":null,"docs":" Iterate over all the keys in this set.\n","sig":null,"attributes":[{"value":"/ Iterate over all the keys in this set.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":68916,"byte_end":68958,"line_start":85,"line_end":85,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":69126,"byte_end":69132,"line_start":91,"line_end":91,"column_start":12,"column_end":18},"name":"resize","qualname":"<EntitySet<K>>::resize","value":"pub fn resize(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Resize the set to have `n` entries by adding default entries as needed.\n","sig":null,"attributes":[{"value":"/ Resize the set to have `n` entries by adding default entries as needed.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":69039,"byte_end":69114,"line_start":90,"line_end":90,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":69273,"byte_end":69279,"line_start":97,"line_end":97,"column_start":12,"column_end":18},"name":"insert","qualname":"<EntitySet<K>>::insert","value":"pub fn insert(&mut Self, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Insert the element at `k`.\n","sig":null,"attributes":[{"value":"/ Insert the element at `k`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":69231,"byte_end":69261,"line_start":96,"line_end":96,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":433},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":69604,"byte_end":69607,"line_start":108,"line_end":108,"column_start":12,"column_end":15},"name":"pop","qualname":"<EntitySet<K>>::pop","value":"pub fn pop(&mut Self) -> Option<K>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the entity from the set if it exists.\n","sig":null,"attributes":[{"value":"/ Removes and returns the entity from the set if it exists.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":69531,"byte_end":69592,"line_start":107,"line_end":107,"column_start":5,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":73861,"byte_end":73875,"line_start":21,"line_end":21,"column_start":11,"column_end":25},"name":"SparseMapValue","qualname":"::sparse::SparseMapValue","value":"SparseMapValue<K>","parent":null,"children":[{"krate":0,"index":445}],"decl_id":null,"docs":" Trait for extracting keys from values stored in a `SparseMap`.","sig":null,"attributes":[{"value":"/ Trait for extracting keys from values stored in a `SparseMap`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":73638,"byte_end":73704,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":73705,"byte_end":73708,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ All values stored in a `SparseMap` must keep track of their own key in the map and implement","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":73709,"byte_end":73805,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ this trait to provide access to the key.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":73806,"byte_end":73850,"line_start":20,"line_end":20,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74016,"byte_end":74019,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"key","qualname":"::sparse::SparseMapValue::key","value":"pub fn key(&Self) -> K","parent":{"krate":0,"index":443},"children":[],"decl_id":null,"docs":" Get the key of this sparse map value. This key is not allowed to change while the value\n is a member of the map.\n","sig":null,"attributes":[{"value":"/ Get the key of this sparse map value. This key is not allowed to change while the value","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":73885,"byte_end":73976,"line_start":22,"line_end":22,"column_start":5,"column_end":96}},{"value":"/ is a member of the map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":73981,"byte_end":74008,"line_start":23,"line_end":23,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75748,"byte_end":75757,"line_start":56,"line_end":56,"column_start":12,"column_end":21},"name":"SparseMap","qualname":"::sparse::SparseMap","value":"SparseMap {  }","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450}],"decl_id":null,"docs":" A sparse mapping of entity references.","sig":null,"attributes":[{"value":"/ A sparse mapping of entity references.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74036,"byte_end":74078,"line_start":27,"line_end":27,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74079,"byte_end":74082,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ A `SparseMap<K, V>` map provides:","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74083,"byte_end":74120,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74121,"byte_end":74124,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ - Memory usage equivalent to `SecondaryMap<K, u32>` + `Vec<V>`, so much smaller than","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74125,"byte_end":74213,"line_start":31,"line_end":31,"column_start":1,"column_end":89}},{"value":"/   `SecondaryMap<K, V>` for sparse mappings of larger `V` types.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74214,"byte_end":74281,"line_start":32,"line_end":32,"column_start":1,"column_end":68}},{"value":"/ - Constant time lookup, slightly slower than `SecondaryMap`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74282,"byte_end":74346,"line_start":33,"line_end":33,"column_start":1,"column_end":65}},{"value":"/ - A very fast, constant time `clear()` operation.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74347,"byte_end":74400,"line_start":34,"line_end":34,"column_start":1,"column_end":54}},{"value":"/ - Fast insert and erase operations.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74401,"byte_end":74440,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"/ - Stable iteration that is as fast as a `Vec<V>`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74441,"byte_end":74494,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74495,"byte_end":74498,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Compared to `SecondaryMap`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74499,"byte_end":74531,"line_start":38,"line_end":38,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74532,"byte_end":74535,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ When should we use a `SparseMap` instead of a secondary `SecondaryMap`? First of all,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74536,"byte_end":74625,"line_start":40,"line_end":40,"column_start":1,"column_end":90}},{"value":"/ `SparseMap` does not provide the functionality of a `PrimaryMap` which can allocate and assign","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74626,"byte_end":74724,"line_start":41,"line_end":41,"column_start":1,"column_end":99}},{"value":"/ entity references to objects as they are pushed onto the map. It is only the secondary entity","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74725,"byte_end":74822,"line_start":42,"line_end":42,"column_start":1,"column_end":98}},{"value":"/ maps that can be replaced with a `SparseMap`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74823,"byte_end":74872,"line_start":43,"line_end":43,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74873,"byte_end":74876,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ - A secondary entity map assigns a default mapping to all keys. It doesn't distinguish between","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74877,"byte_end":74975,"line_start":45,"line_end":45,"column_start":1,"column_end":99}},{"value":"/   an unmapped key and one that maps to the default value. `SparseMap` does not require","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":74976,"byte_end":75066,"line_start":46,"line_end":46,"column_start":1,"column_end":91}},{"value":"/   `Default` values, and it tracks accurately if a key has been mapped or not.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75067,"byte_end":75148,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"/ - Iterating over the contents of an `SecondaryMap` is linear in the size of the *key space*,","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75149,"byte_end":75245,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"/   while iterating over a `SparseMap` is linear in the number of elements in the mapping. This","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75246,"byte_end":75343,"line_start":49,"line_end":49,"column_start":1,"column_end":98}},{"value":"/   is an advantage precisely when the mapping is sparse.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75344,"byte_end":75403,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/ - `SparseMap::clear()` is constant time and super-fast. `SecondaryMap::clear()` is linear in","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75404,"byte_end":75500,"line_start":51,"line_end":51,"column_start":1,"column_end":97}},{"value":"/   the size of the key space. (Or, rather the required `resize()` call following the `clear()`","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75501,"byte_end":75598,"line_start":52,"line_end":52,"column_start":1,"column_end":98}},{"value":"/   is).","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75599,"byte_end":75609,"line_start":53,"line_end":53,"column_start":1,"column_end":11}},{"value":"/ - `SparseMap` requires the values to implement `SparseMapValue<K>` which means that they must","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75610,"byte_end":75707,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"/   contain their own key.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75708,"byte_end":75736,"line_start":55,"line_end":55,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75998,"byte_end":76001,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<SparseMap<K, V>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty mapping.\n","sig":null,"attributes":[{"value":"/ Create a new empty mapping.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75955,"byte_end":75986,"line_start":70,"line_end":70,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76180,"byte_end":76183,"line_start":79,"line_end":79,"column_start":12,"column_end":15},"name":"len","qualname":"<SparseMap<K, V>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76122,"byte_end":76168,"line_start":78,"line_end":78,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":456},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76299,"byte_end":76307,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SparseMap<K, V>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true is the map contains no elements.\n","sig":null,"attributes":[{"value":"/ Returns true is the map contains no elements.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76238,"byte_end":76287,"line_start":83,"line_end":83,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76419,"byte_end":76424,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"clear","qualname":"<SparseMap<K, V>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all elements from the mapping.\n","sig":null,"attributes":[{"value":"/ Remove all elements from the mapping.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76366,"byte_end":76407,"line_start":88,"line_end":88,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76551,"byte_end":76554,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"get","qualname":"<SparseMap<K, V>>::get","value":"pub fn get(&Self, K) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76477,"byte_end":76539,"line_start":93,"line_end":93,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":77099,"byte_end":77106,"line_start":109,"line_end":109,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SparseMap<K, V>>::get_mut","value":"pub fn get_mut(&mut Self, K) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76855,"byte_end":76925,"line_start":105,"line_end":105,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76930,"byte_end":76933,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Note that the returned value must not be mutated in a way that would change its key. This","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":76938,"byte_end":77031,"line_start":107,"line_end":107,"column_start":5,"column_end":98}},{"value":"/ would invalidate the sparse set data structure.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":77036,"byte_end":77087,"line_start":108,"line_end":108,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":77912,"byte_end":77924,"line_start":134,"line_end":134,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<SparseMap<K, V>>::contains_key","value":"pub fn contains_key(&Self, K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the map contains a value corresponding to `key`.\n","sig":null,"attributes":[{"value":"/ Return `true` if the map contains a value corresponding to `key`.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":77831,"byte_end":77900,"line_start":133,"line_end":133,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":78318,"byte_end":78324,"line_start":145,"line_end":145,"column_start":12,"column_end":18},"name":"insert","qualname":"<SparseMap<K, V>>::insert","value":"pub fn insert(&mut Self, V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Insert a value into the map.","sig":null,"attributes":[{"value":"/ Insert a value into the map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":77993,"byte_end":78025,"line_start":138,"line_end":138,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":78030,"byte_end":78033,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, `None` is returned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":78038,"byte_end":78103,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":78108,"byte_end":78111,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old value is returned.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":78116,"byte_end":78210,"line_start":142,"line_end":142,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":78215,"byte_end":78218,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ It is not necessary to provide a key since the value knows its own key already.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":78223,"byte_end":78306,"line_start":144,"line_end":144,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":78911,"byte_end":78917,"line_start":162,"line_end":162,"column_start":12,"column_end":18},"name":"remove","qualname":"<SparseMap<K, V>>::remove","value":"pub fn remove(&mut Self, K) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove a value from the map and return it.\n","sig":null,"attributes":[{"value":"/ Remove a value from the map and return it.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":78853,"byte_end":78899,"line_start":161,"line_end":161,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":79600,"byte_end":79603,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"pop","qualname":"<SparseMap<K, V>>::pop","value":"pub fn pop(&mut Self) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Remove the last value from the map.\n","sig":null,"attributes":[{"value":"/ Remove the last value from the map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":79549,"byte_end":79588,"line_start":182,"line_end":182,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":79936,"byte_end":79942,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"values","qualname":"<SparseMap<K, V>>::values","value":"pub fn values(&Self) -> slice::Iter<, V>","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the values in the map.","sig":null,"attributes":[{"value":"/ Get an iterator over the values in the map.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":79666,"byte_end":79713,"line_start":187,"line_end":187,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":79718,"byte_end":79721,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ The iteration order is entirely determined by the preceding sequence of `insert` and","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":79726,"byte_end":79814,"line_start":189,"line_end":189,"column_start":5,"column_end":93}},{"value":"/ `remove` operations. In particular, if no elements were removed, this is the insertion","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":79819,"byte_end":79909,"line_start":190,"line_end":190,"column_start":5,"column_end":95}},{"value":"/ order.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":79914,"byte_end":79924,"line_start":191,"line_end":191,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":80049,"byte_end":80057,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<SparseMap<K, V>>::as_slice","value":"pub fn as_slice(&Self) -> &[V]","parent":null,"children":[],"decl_id":null,"docs":" Get the values as a slice.\n","sig":null,"attributes":[{"value":"/ Get the values as a slice.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":80007,"byte_end":80037,"line_start":196,"line_end":196,"column_start":5,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":477},"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":80714,"byte_end":80723,"line_start":229,"line_end":229,"column_start":10,"column_end":19},"name":"SparseSet","qualname":"::sparse::SparseSet","value":"SparseMap<T, T>","parent":null,"children":[],"decl_id":null,"docs":" A sparse set of entity references.","sig":null,"attributes":[{"value":"/ A sparse set of entity references.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":80582,"byte_end":80620,"line_start":226,"line_end":226,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":80621,"byte_end":80624,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ Any type that implements `EntityRef` can be used as a sparse set value too.","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":80625,"byte_end":80704,"line_start":228,"line_end":228,"column_start":1,"column_end":80}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6560,"byte_end":6572,"line_start":25,"line_end":25,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7741,"byte_end":7753,"line_start":69,"line_end":69,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7924,"byte_end":7936,"line_start":76,"line_end":76,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":8218,"byte_end":8230,"line_start":87,"line_end":87,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":8480,"byte_end":8492,"line_start":97,"line_end":97,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":8585,"byte_end":8597,"line_start":103,"line_end":103,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10531,"byte_end":10541,"line_start":24,"line_end":24,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12600,"byte_end":12610,"line_start":99,"line_end":99,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12808,"byte_end":12818,"line_start":111,"line_end":111,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18008,"byte_end":18012,"line_start":18,"line_end":18,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18321,"byte_end":18325,"line_start":29,"line_end":29,"column_start":40,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18626,"byte_end":18630,"line_start":41,"line_end":41,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18816,"byte_end":18820,"line_start":47,"line_end":47,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19036,"byte_end":19043,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19358,"byte_end":19365,"line_start":69,"line_end":69,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19670,"byte_end":19677,"line_start":81,"line_end":81,"column_start":51,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19863,"byte_end":19870,"line_start":87,"line_end":87,"column_start":49,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20057,"byte_end":20065,"line_start":95,"line_end":95,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20368,"byte_end":20376,"line_start":106,"line_end":106,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20665,"byte_end":20673,"line_start":118,"line_end":118,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20851,"byte_end":20859,"line_start":124,"line_end":124,"column_start":45,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21289,"byte_end":21293,"line_start":16,"line_end":16,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21563,"byte_end":21567,"line_start":27,"line_end":27,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21988,"byte_end":21992,"line_start":46,"line_end":46,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":22278,"byte_end":22282,"line_start":58,"line_end":58,"column_start":42,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":25432,"byte_end":25442,"line_start":69,"line_end":69,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":26635,"byte_end":26643,"line_start":109,"line_end":109,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":30998,"byte_end":31008,"line_start":223,"line_end":223,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48347,"byte_end":48359,"line_start":38,"line_end":38,"column_start":12,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50839,"byte_end":50851,"line_start":134,"line_end":134,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":51131,"byte_end":51143,"line_start":147,"line_end":147,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":51465,"byte_end":51477,"line_start":163,"line_end":163,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":301}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":51785,"byte_end":51797,"line_start":178,"line_end":178,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":52240,"byte_end":52252,"line_start":192,"line_end":192,"column_start":19,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":52377,"byte_end":52389,"line_start":200,"line_end":200,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":53323,"byte_end":53335,"line_start":226,"line_end":226,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":53676,"byte_end":53695,"line_start":240,"line_end":240,"column_start":42,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57450,"byte_end":57460,"line_start":40,"line_end":40,"column_start":12,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60627,"byte_end":60637,"line_start":153,"line_end":153,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60855,"byte_end":60865,"line_start":164,"line_end":164,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":61064,"byte_end":61074,"line_start":176,"line_end":176,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":61225,"byte_end":61235,"line_start":185,"line_end":185,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":61942,"byte_end":61952,"line_start":221,"line_end":221,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67272,"byte_end":67281,"line_start":23,"line_end":23,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75883,"byte_end":75892,"line_start":65,"line_end":65,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":80503,"byte_end":80504,"line_start":217,"line_end":217,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":476}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":5214,"byte_end":5227,"line_start":129,"line_end":129,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":10}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":3007,"byte_end":3011,"line_start":59,"line_end":59,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":2055},"to":{"krate":0,"index":6}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\lib.rs","byte_start":3014,"byte_end":3016,"line_start":59,"line_end":59,"column_start":29,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1775},"to":{"krate":0,"index":6}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":6560,"byte_end":6572,"line_start":25,"line_end":25,"column_start":24,"column_end":36},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":494},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7741,"byte_end":7753,"line_start":69,"line_end":69,"column_start":36,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":2033}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":7924,"byte_end":7936,"line_start":76,"line_end":76,"column_start":36,"column_end":48},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":8218,"byte_end":8230,"line_start":87,"line_end":87,"column_start":44,"column_end":56},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":1963}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":8480,"byte_end":8492,"line_start":97,"line_end":97,"column_start":44,"column_end":56},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":1960}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\packed_option.rs","byte_start":8585,"byte_end":8597,"line_start":103,"line_end":103,"column_start":24,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":494},"to":{"krate":1,"index":6606}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":10531,"byte_end":10541,"line_start":24,"line_end":24,"column_start":12,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12600,"byte_end":12610,"line_start":99,"line_end":99,"column_start":25,"column_end":35},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":528},"to":{"krate":1,"index":2323}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\boxed_slice.rs","byte_start":12808,"byte_end":12818,"line_start":111,"line_end":111,"column_start":28,"column_end":38},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":528},"to":{"krate":1,"index":2327}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18008,"byte_end":18012,"line_start":18,"line_end":18,"column_start":27,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":98},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18321,"byte_end":18325,"line_start":29,"line_end":29,"column_start":40,"column_end":44},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":5311}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18626,"byte_end":18630,"line_start":41,"line_end":41,"column_start":51,"column_end":55},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":5240}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":18816,"byte_end":18820,"line_start":47,"line_end":47,"column_start":49,"column_end":53},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":98},"to":{"krate":1,"index":5265}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19036,"byte_end":19043,"line_start":58,"line_end":58,"column_start":27,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":127},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19358,"byte_end":19365,"line_start":69,"line_end":69,"column_start":40,"column_end":47},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":127},"to":{"krate":1,"index":5311}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19670,"byte_end":19677,"line_start":81,"line_end":81,"column_start":51,"column_end":58},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":127},"to":{"krate":1,"index":5240}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":19863,"byte_end":19870,"line_start":87,"line_end":87,"column_start":49,"column_end":56},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":127},"to":{"krate":1,"index":5265}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20057,"byte_end":20065,"line_start":95,"line_end":95,"column_start":23,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":156},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20368,"byte_end":20376,"line_start":106,"line_end":106,"column_start":36,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":156},"to":{"krate":1,"index":5311}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20665,"byte_end":20673,"line_start":118,"line_end":118,"column_start":47,"column_end":55},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":156},"to":{"krate":1,"index":5240}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\iter.rs","byte_start":20851,"byte_end":20859,"line_start":124,"line_end":124,"column_start":45,"column_end":53},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":156},"to":{"krate":1,"index":5265}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21289,"byte_end":21293,"line_start":16,"line_end":16,"column_start":20,"column_end":24},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":183},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21563,"byte_end":21567,"line_start":27,"line_end":27,"column_start":33,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":183},"to":{"krate":1,"index":5311}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":21988,"byte_end":21992,"line_start":46,"line_end":46,"column_start":44,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":183},"to":{"krate":1,"index":5240}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\keys.rs","byte_start":22278,"byte_end":22282,"line_start":58,"line_end":58,"column_start":42,"column_end":46},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":183},"to":{"krate":1,"index":5265}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":25432,"byte_end":25442,"line_start":69,"line_end":69,"column_start":48,"column_end":58},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":541},"to":{"krate":1,"index":2033}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":26635,"byte_end":26643,"line_start":109,"line_end":109,"column_start":36,"column_end":44},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":551},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\list.rs","byte_start":30998,"byte_end":31008,"line_start":223,"line_end":223,"column_start":36,"column_end":46},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":48347,"byte_end":48359,"line_start":38,"line_end":38,"column_start":12,"column_end":24},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":561},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":50839,"byte_end":50851,"line_start":134,"line_end":134,"column_start":24,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":561},"to":{"krate":1,"index":2033}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":51131,"byte_end":51143,"line_start":147,"line_end":147,"column_start":25,"column_end":37},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":561},"to":{"krate":1,"index":2323}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":51465,"byte_end":51477,"line_start":163,"line_end":163,"column_start":28,"column_end":40},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":561},"to":{"krate":1,"index":2327}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":51785,"byte_end":51797,"line_start":178,"line_end":178,"column_start":26,"column_end":38},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":561},"to":{"krate":1,"index":1770}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":52240,"byte_end":52252,"line_start":192,"line_end":192,"column_start":19,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":561},"to":{"krate":1,"index":1775}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":52377,"byte_end":52389,"line_start":200,"line_end":200,"column_start":26,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":561},"to":{"krate":5,"index":1706}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":53323,"byte_end":53335,"line_start":226,"line_end":226,"column_start":38,"column_end":50},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":561},"to":{"krate":5,"index":1210}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\map.rs","byte_start":53676,"byte_end":53695,"line_start":240,"line_end":240,"column_start":42,"column_end":61},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":323},"to":{"krate":5,"index":1294}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":57450,"byte_end":57460,"line_start":40,"line_end":40,"column_start":12,"column_end":22},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":575},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60627,"byte_end":60637,"line_start":153,"line_end":153,"column_start":24,"column_end":34},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":575},"to":{"krate":1,"index":2033}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":60855,"byte_end":60865,"line_start":164,"line_end":164,"column_start":25,"column_end":35},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":575},"to":{"krate":1,"index":2323}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":61064,"byte_end":61074,"line_start":176,"line_end":176,"column_start":28,"column_end":38},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":575},"to":{"krate":1,"index":2327}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":61225,"byte_end":61235,"line_start":185,"line_end":185,"column_start":29,"column_end":39},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":575},"to":{"krate":1,"index":5217}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\primary.rs","byte_start":61942,"byte_end":61952,"line_start":221,"line_end":221,"column_start":32,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":575},"to":{"krate":1,"index":5213}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\set.rs","byte_start":67272,"byte_end":67281,"line_start":23,"line_end":23,"column_start":9,"column_end":18},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":75883,"byte_end":75892,"line_start":65,"line_end":65,"column_start":12,"column_end":21},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Simon Palmer\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\cranelift-entity-0.68.0\\src\\sparse.rs","byte_start":80503,"byte_end":80504,"line_start":217,"line_end":217,"column_start":31,"column_end":32},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":475},"to":{"krate":0,"index":443}}]}